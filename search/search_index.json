{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"00 \u7b80\u4ecb","text":""},{"location":"index.html#nisa-network-information-security-association","title":"NISA (Network &amp; Information Security Association) \u4ecb\u7ecd","text":"<p>\u798f\u5efa\u5e08\u8303\u5927\u5b66\u7f51\u7edc\u4e0e\u4fe1\u606f\u5b89\u5168\u534f\u4f1a\uff08\u4ee5\u4e0b\u7b80\u79f0\u201c\u7f51\u5b89\u534f\u4f1a\u201d\uff09\u662f\u5728\u798f\u5efa\u5e08\u8303\u5927\u5b66\u7f51\u7edc\u4e0e\u6570\u636e\u4e2d\u5fc3\u6307\u5bfc\u4e0b\u521b\u7acb\u7684\u5b66\u751f\u793e\u56e2\uff0c\u6700\u65e9\u4e8e2014\u5e74\u6d3b\u8dc3\u5728\u5e08\u5927\u7f51\u5b89\u5708\uff0c\u4e8e2018\u5e74\u6b63\u5f0f\u4ee5\u5b66\u751f\u793e\u56e2\u5f62\u5f0f\u521b\u7acb\uff0c\u81ea2024\u5e74\u8d77\uff0c\u7531\u8ba1\u7b97\u673a\u4e0e\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5b66\u9662\u4f5c\u4e3a\u6307\u5bfc\u5355\u4f4d\uff0c\u7531\u6797\u6656\u6559\u6388\u4efb\u6307\u5bfc\u8001\u5e08\u3002\u6210\u7acb\u4ee5\u6765\uff0c\u7f51\u5b89\u534f\u4f1a\u7acb\u8db3\u4e8e\u666e\u53ca\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u3001\u63d0\u5347\u7f51\u7edc\u5b89\u5168\u6280\u80fd\uff0c\u591a\u6b21\u4e8e\u534f\u4f1a\u5185\u90e8\u5f00\u5c55\u6280\u672f\u5206\u4eab\uff0c\u627f\u529e\u591a\u5c4a\u798f\u5efa\u5e08\u8303\u5927\u5b66\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u6280\u80fd\u7ade\u8d5b\uff0c\u5176\u4e0b\u5c5eNISA\u6218\u961f\u6210\u5458\u66fe\u591a\u6b21\u83b7\u5f97\u201c\u767e\u8d8a\u676f\u201d\u3001\u201c\u9ed1\u76fe\u676f\u201d\uff08\u73b0\u201c\u95fd\u76fe\u676f\u201d\uff09\u3001\u201c\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u201d\u7b49\u6bd4\u8d5b\u5956\u9879\uff0c\u591a\u6b21\u5411\u6821\u7f51\u4fe1\u529e\u63d0\u4ea4\u6e17\u900f\u6d4b\u8bd5\u62a5\u544a\uff0c\u5e76\u4e8e\u7701\u653b\u9632\u6bd4\u8d5b\u4e2d\u53d6\u5f97\u4e00\u5b9a\u540d\u6b21\u3002\u76ee\u524d\uff0c\u534f\u4f1a\u6210\u5458\u6d3b\u8dc3\u4e8e\u56fd\u5185\u5404\u5927\u8d5b\u4e8b\uff0c\u5e76\u4e14\u81f4\u529b\u4e8e\u5b8c\u5584\u73b0\u6709\u7f51\u5b89\u5b9e\u6218\u9776\u573a\uff0c\u4e0e\u6821\u7f51\u4fe1\u529e\u5171\u540c\u5efa\u7acb\u6821\u5185SRC\u5e73\u53f0\uff0c\u540c\u65f6\u534f\u52a9\u8ba1\u7b97\u673a\u4e0e\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5b66\u9662\u5b8c\u5584\u7f51\u5b89\u4eba\u624d\u57f9\u517b\u8ba1\u5212\u3002</p>"},{"location":"index.html#nisa-wiki","title":"NISA Wiki \u4ecb\u7ecd","text":"<p>\u81f4\u529b\u4e8e\u603b\u7ed3 NISA \u7684\u5386\u5c4a\u6210\u679c\u7ecf\u9a8c</p>"},{"location":"01-QUICK%20START/index.html","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u6216\u8bb8\u5148\u5b66\u4e60\u8fd9\u4e9b\u6280\u80fd\uff0c\u4f1a\u66f4\u597d\u5e2e\u52a9\u4f60\u66f4\u597d\u7684\u7ee7\u7eed\u540e\u7eed\u7684\u5b66\u4e60, \u6839\u636e\u81ea\u5df1\u9700\u8981\u9605\u8bfb</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/index.html","title":"\u5fc5\u770b\u6307\u5357","text":"<p>\u5982\u679c\u4f60\u521a\u5165\u95e8, \u8fd9\u4e9b\u53ef\u80fd\u4f1a\u5e2e\u52a9\u4f60</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html","title":"\u65b0\u751f\u6307\u5f15","text":"<p>\u8fd9\u662f\u4e00\u4efd\u9762\u5411\u65b0\u751f\u7684\u5feb\u901f\u6307\u5f15</p> <p>NISA\u7f51\u5b89\u534f\u4f1a\u7684\u6280\u672f\u90e8\u95e8\u5206\u4e3aCTF\u90e8\u548c\u6e17\u900f\u90e8\uff0c\u53ef\u4ee5\u9605\u8bfb\u4e0b\u9762\u7684\u7b80\u4ecb\u540e\u6311\u9009\u611f\u5174\u8da3\u7684\u90e8\u5206\u6df1\u5165\u4e86\u89e3</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#ctf","title":"CTF\u90e8","text":"<p>CTF\uff0c\u5373Capture The Flag\uff0c\u7f51\u7edc\u593a\u65d7\u8d5b\uff0c\u89e3\u51fa\u9898\u76ee\u4e2d\u8bbe\u7f6e\u7684\u5bc6\u7801\u6216\u6f0f\u6d1e\uff0c\u627e\u5230\u9690\u85cf\u7684 <code>Flag</code> \u6765\u5f97\u5206\u3002\u5176\u66f4\u504f\u5411\u4e8e\u6bd4\u8d5b\u3002</p> <p>\u6709\u4ee3\u8868\u6027\u7684\u6bd4\u8d5b\u6709 CISCN\uff0c\u957f\u57ce\u676f\u7b49</p> <p>\u5728\u56fd\u8d5b\u548c\u7701\u8d5b\u4e2d\u62ff\u5956\u53ef\u4ee5\u52a0\u7efc\u6d4b</p> <p>\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u5411\uff1a</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#web","title":"Web","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#misc","title":"MISC \u6742\u9879","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#crypto","title":"CRYPTO \u5bc6\u7801","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#re","title":"RE \u9006\u5411","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#pwn","title":"PWN \u7834\u89e3","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#_2","title":"\u6e17\u900f\u90e8","text":"<p>\u5f53\u5927\u9ed1\u5ba2\u55b5</p> <p>\u6e17\u900f\uff0c\u5bf9\u771f\u5b9e\u573a\u666f\u6216\u6a21\u62df\u771f\u5b9e\u573a\u666f\u8fdb\u884c\u5b89\u5168\u8bc4\u4f30\uff0c\u65e8\u5728\u53d1\u73b0\u7cfb\u7edf\u4e2d\u7684\u6f5c\u5728\u6f0f\u6d1e\uff0c\u5e76\u63d0\u4f9b\u4fee\u590d\u5efa\u8bae\u3002\u5176\u66f4\u504f\u5411\u4e8e\u5b9e\u6218\uff0c\u5373\u6709\u6388\u6743\u5730\u653b\u51fb\u771f\u5b9e\u7f51\u7edc\u7cfb\u7edf</p> <p>\u53ef\u4ee5\u4ee3\u8868\u5b66\u6821 \u6216\u7701\u6559\u80b2\u5385 \u53c2\u52a0\u7701\u5e02\u7ea7\u7684\u62a4\u7f51\u884c\u52a8\uff0c\u6709\u6388\u6743\u7684 \u653b\u51fb \u6d4b\u8bd5\u522b\u7684\u5b66\u6821\u6216\u4f01\u4e1a</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html","title":"\u9ad8\u6548\u63d0\u95ee\u6307\u5357","text":"<p>\u53c2\u8003</p> <p>https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</p> <p>https://pidoc.cn/docs/pidoc/how_to_ask</p> <p>\u5982\u679c\u60f3\u9ad8\u6548\u63d0\u95ee\u800c\u4e0d\u662f\u62db\u7b11\u63d0\u95ee, \u4e0b\u6587\u6216\u8bb8\u662f\u8be5\u770b\u7684</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_2","title":"\u9ad8\u6548\u63d0\u95ee\u57fa\u672c\u6d41\u7a0b","text":"<p>\u9047\u5230\u95ee\u9898 -&gt; \u67e5\u770b\u62a5\u9519 -&gt; AI\u5206\u6790 -&gt; \u641c\u7d22\u5f15\u64ce -&gt; \u8be2\u95ee\u4ed6\u4eba</p> <p>\u9664\u4e86\u8be2\u95ee\u4ed6\u4eba\u662f\u6700\u540e\u4e00\u6b65, \u5176\u4ed6\u7684\u987a\u5e8f\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u4e60\u60ef\u548c\u95ee\u9898\u7c7b\u578b\u8c03\u6574(\u5f53\u7136, \u5982\u679c\u522b\u4eba\u613f\u610f, \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9047\u5230\u95ee\u9898\u5c31\u629b\u51fa)</p> <p>\u5982\u679c\u90fd\u4e0d\u80fd\u89e3\u51b3, \u90a3\u53ea\u80fd\u81ea\u5df1\u5f80\u95ee\u9898\u66f4\u5e95\u5c42\u5206\u6790, \u6210\u4e3a\u53d1\u73b0\u65b0\u95ee\u9898\u5e76\u63d0\u51fa\u89e3\u51b3\u529e\u6cd5\u7684\u4eba</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_3","title":"\u67e5\u770b\u62a5\u9519","text":"<p>\u5927\u90e8\u5206\u7684\u7a0b\u5e8f\u7684\u62a5\u9519\u4fe1\u606f\u90fd\u7279\u522b\u8be6\u7ec6, \u751a\u81f3\u4f1a\u7ed9\u51fa\u89e3\u51b3\u529e\u6cd5, \u53ea\u4e0d\u8fc7\u662f\u82f1\u6587\u7684</p> <p>\u8fd9\u4e2a\u65f6\u5019, \u5c31\u9700\u8981\u6709\u4e00\u4e2a\u597d\u7684\u82f1\u6587\u6c34\u5e73, \u4e0d\u8fc7\u5982\u679c\u81ea\u8eab\u82f1\u8bed\u80fd\u529b\u6709\u9650, \u4f7f\u7528\u7ffb\u8bd1\u8f6f\u4ef6\u4e5f\u53ef\u4ee5</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#ai","title":"AI\u5206\u6790","text":"<p>\u5982\u679c\u81ea\u8eab\u7684\u82f1\u6587\u6c34\u5e73\u548c\u7ffb\u8bd1\u8f6f\u4ef6\u90fd\u4e0d\u80fd\u5f88\u597d\u7684\u7ffb\u8bd1\u62a5\u9519\u4fe1\u606f, \u6216\u8bb8\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 AI \u5e2e\u5fd9(AI \u5176\u5b9e\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5f3a\u5927\u7684\u7ffb\u8bd1\u8f6f\u4ef6)</p> <p>\u4f46\u662f AI \u4e0d\u4ec5\u4ec5\u53ea\u4f1a\u7ffb\u8bd1, \u901a\u5e38\u8fd8\u4f1a\u7ed9\u51fa\u5177\u4f53\u7684\u89e3\u51b3\u529e\u6cd5\u548c\u6392\u67e5\u6b65\u9aa4</p> <p>\u5982\u679c\u5728\u67d0\u4e2a\u6b65\u9aa4\u4e0d\u7406\u89e3, \u8fd8\u53ef\u4ee5\u8ba9 AI \u5c55\u5f00\u8bb2\u89e3, \u5e76\u4e14\u89e3\u51b3\u95ee\u9898\u4e2d, \u5982\u679c\u9047\u5230\u65b0\u7684\u95ee\u9898, \u53ef\u4ee5\u4e00\u5e76\u63d0\u4f9b\u7ed9 AI, \u4e00\u8d77\u5206\u6790</p> <p>\u6ce8\u610f, \u6ce8\u610f, \u6ce8\u610f, \u4e07\u4e0d\u53ef\u4ee5\u4f9d\u8d56 AI, AI\u7ed9\u51fa\u7684\u6240\u6709\u547d\u4ee4, \u90fd\u5e94\u8be5\u63d0\u524d\u77e5\u9053\u6267\u884c\u6548\u679c\u540e\u518d\u53bb\u6267\u884c, \u5e76\u4e14\u5fc5\u8981\u65f6\u8bf7\u505a\u597d\u5907\u4efd, \u5728\u6ca1\u6709\u4eba\u4e3a\u5e72\u9884\u7684\u60c5\u51b5\u4e0b, \u53ef\u80fd\u4e00\u5207\u4f1a\u5f80\u6df7\u4e71\u7684\u65b9\u5411\u53d1\u5c55</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_4","title":"\u641c\u7d22\u5f15\u64ce","text":"<p>\u611f\u53d7 AI \u7684\u4fbf\u6377\u65f6, \u4e0d\u8981\u5fd8\u8bb0\u641c\u7d22\u5f15\u64ce\u7684\u7528\u5904, \u4e00\u4e9b\u95ee\u9898\u6216\u8bb8\u518d\u641c\u7d22\u5f15\u64ce\u4e2d\u66f4\u5bb9\u6613\u83b7\u53d6\u7b54\u6848</p> <p>\u5728\u5165\u95e8\u9636\u6bb5, \u9047\u5230\u7684\u95ee\u9898, 99%\u524d\u4eba\u90fd\u662f\u5df2\u7ecf\u9047\u5230\u8fc7\u7684, \u5e76\u4e14\u628a\u89e3\u51b3\u529e\u6cd5\u548c\u7ecf\u9a8c\u5206\u4eab\u5728\u7f51\u7edc\u4e2d, \u9605\u8bfb\u524d\u4eba\u7684\u6587\u7ae0\u6709\u65f6\u4f1a\u6bd4\u8be2\u95ee AI \u66f4\u52a0\u6e05\u695a</p> <p>\u5173\u4e8e\u641c\u7d22\u5f15\u64ce\u7684\u4f7f\u7528, \u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b, \u6216\u8bb8\u540e\u7eed\u4f1a\u5355\u72ec\u5217\u4e00\u4e2a\u9875\u9762</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_5","title":"\u641c\u7d22\u5f15\u64ce\u9009\u62e9","text":"<p>\u641c\u7d22\u5f15\u64ce\u6709\u5f88\u591a, \u8fd9\u91cc\u4e0d\u505a\u4ec0\u4e48\u63a8\u8350(\u8c37\u6b4c, bing, \u767e\u5ea6, \u641c\u72d7\u7b49), \u5404\u6709\u5404\u7684\u4f18\u52bf(\u6bd4\u5982\u641c\u72d7\u53ef\u4ee5\u641c\u7d22\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0), \u81ea\u5df1\u90fd\u53bb\u7528\u7528, \u627e\u5230\u81ea\u5df1\u559c\u6b22\u7684\u5c31\u597d, \u5e76\u4e14\u5404\u4e2a\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u7684\u7f51\u7ad9\u5e76\u4e14\u5b8c\u5168\u4e00\u81f4\u7684, \u6709\u65f6\u5019\u53ef\u4ee5\u591a\u4e2a\u641c\u7d22\u5f15\u64ce\u4e00\u8d77\u4f7f\u7528</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_6","title":"\u5173\u952e\u8bcd\u63d0\u53d6","text":"<p>\u6709\u4e9b\u65f6\u5019, \u76f4\u63a5\u628a\u62a5\u9519\u6574\u53e5\u8bdd\u653e\u5165\u641c\u7d22\u6846\u5c31\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u6587\u7ae0</p> <p>\u4f46\u662f\u6709\u7684\u62a5\u9519\u8bed\u53e5\u5728\u4e0d\u540c\u5e94\u7528\u548c\u7cfb\u7edf\u4e4b\u95f4\u5b58\u5728\u666e\u904d\u6027, \u8fd9\u4e2a\u65f6\u5019, \u8bb0\u5f97\u5584\u4e8e\u4f7f\u7528\u7a7a\u683c\u5206\u9694\u5173\u952e\u8bcd, \u6dfb\u52a0\u9650\u5236\u8bcd\u6c47(\u6bd4\u5982\u7cfb\u7edf\u7248\u672c, \u8f6f\u4ef6\u7248\u672c\u7b49)</p> <p>\u6216\u8bb8\u4f60\u8fd8\u542c\u8fc7 <code>\u8c37\u6b4c\u8bed\u6cd5</code>, \u8fd9\u4e2a\u662f\u66f4\u52a0\u590d\u6742\u66f4\u52a0\u53ef\u81ea\u5b9a\u4e49\u7684\u641c\u7d22\u8bed\u53e5, \u81ea\u5df1\u53bb\u5b66\u4e60\u5427</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_7","title":"\u8be2\u95ee\u4ed6\u4eba","text":"<p>\u5728\u4e0a\u8ff0\u529e\u6cd5\u90fd\u5c1d\u8bd5\u540e, \u5982\u679c\u8fd8\u662f\u4e0d\u80fd\u89e3\u51b3, \u53ef\u4ee5\u5c1d\u8bd5\u95ee\u95ee\u4ed6\u4eba, \u6216\u8bb8\u5f53\u5c40\u8005\u8ff7\u65c1\u89c2\u8005\u6e05, \u4ed6\u4eba\u4e00\u4e0b\u5c31\u53ef\u4ee5\u770b\u51fa\u4f60\u7684\u95ee\u9898(\u5f53\u7136, \u5982\u679c\u4f60\u7ecf\u8fc7\u4e0a\u9762\u8fd9\u51e0\u4e2a\u6b65\u9aa4\u540e, \u8fd9\u79cd\u60c5\u51b5\u662f\u5c11\u89c1\u7684)</p> <p>\u4f46\u662f\u6709\u4e9b\u65f6\u5019\u63d0\u95ee\u5374\u6ca1\u4eba\u613f\u610f\u56de\u7b54, \u6216\u8bb8\u662f\u5e76\u975e\u63d0\u51fa\u7684\u95ee\u9898\u591a\u96be, \u53ea\u662f\u4f60\u63d0\u51fa\u7684\u95ee\u9898\u4e0d\u591f\u8be6\u7ec6, \u522b\u4eba\u6ca1\u529e\u6cd5\u5728\u51e0\u5206\u949f\u4e4b\u5185\u56de\u7b54, \u800c\u662f\u8981\u518d\u8ddf\u4f60\u8fdb\u4e00\u6b65\u6c9f\u901a\u540e\u624d\u80fd\u786e\u5b9a\u95ee\u9898\u6240\u5728, \u8fd9\u96be\u514d\u4f1a\u4f7f\u522b\u4eba\u4e27\u5931\u56de\u7b54\u7684\u70ed\u60c5, \u6240\u4ee5\u597d\u7684\u63d0\u95ee\u662f\u83b7\u53d6\u522b\u4eba\u56de\u7b54\u7684\u5173\u952e</p> <p>\u4e0b\u6587\u540c\u6837\u9002\u7528\u4e8e\u8ddf AI \u63d0\u95ee</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_8","title":"\u8be2\u95ee\u8c01","text":"<p>\u95ee\u4ed6\u4eba\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u627e\u5230\u95ee\u7684\u4eba, \u672f\u4e1a\u6709\u4e13\u653b, \u627e\u5230\u5bf9\u7684\u4eba\u624d\u53ef\u4ee5\u66f4\u5feb\u7684\u89e3\u51b3\u95ee\u9898</p> <p>\u5982\u679c\u4f60\u662f\u5728\u4f7f\u7528 Github \u4e0a\u7684\u9879\u76ee, \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 Issue \u4e2d\u63d0\u95ee(\u4e0d\u8fc7\u63d0\u95ee\u4e4b\u524d, \u8bf7\u5148\u770b\u770b\u6709\u6ca1\u6709\u4eba\u5df2\u7ecf\u63d0\u8fc7\u76f8\u4f3c\u7684\u95ee\u9898)</p> <p>\u4e00\u4e9b\u8f6f\u4ef6\u6709\u81ea\u5df1\u7684\u793e\u533a, \u53ef\u4ee5\u518d\u8be2\u95ee\u76f8\u5173\u95ee\u9898\u4e5f\u53ef\u4ee5\u66f4\u597d\u7684\u5f97\u5230\u56de\u7b54</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_9","title":"\u590d\u73b0\u6761\u4ef6","text":"<p>\u95ee\u95ee\u9898\u6700\u91cd\u8981\u7684\u5c31\u662f\u5c55\u793a\u95ee\u9898, \u5c55\u793a\u95ee\u9898\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u5c31\u662f\u8ba9\u4ed6\u4eba\u53ef\u4ee5\u76f4\u63a5\u590d\u73b0\u95ee\u9898</p> <p>\u6240\u4ee5\u63d0\u95ee\u65f6, \u8bb0\u5f97\u9644\u4e0a\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u590d\u73b0\u6761\u4ef6, \u6bd4\u5982(\u8fd9\u91cc\u6284\u4e86\u4e00\u4e0b\u6811\u8393\u6d3e\u7684\u63d0\u95ee\u6307\u5357)</p> <ol> <li>\u4ec0\u4e48\u786c\u4ef6\u8bbe\u5907\u3002\u4f8b\u5982\uff1a\u6811\u8393\u6d3e3B+XX\u6444\u50cf\u5934</li> <li>\u4ec0\u4e48\u64cd\u4f5c\u7cfb\u7edf\u3002\u4f8b\u5982\uff1a\u6811\u8393\u6d3eOS Desktop Bookworm\uff0c32\u4f4d</li> <li>\u4ec0\u4e48\u7f16\u7a0b\u8bed\u8a00\u3002\u4f8b\u5982\uff1aPython 3.9.6 \u4ec04. \u4e48\u95ee\u9898\u73b0\u8c61\u3002\u4f8b\u5982\uff1a\u8c03\u7528xxxx\u65f6\uff0c\u62a5\u9519xxxxx\u3002\u65e0\u6cd5\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u5185\u5bb9\u3002\u9644\u5b8c\u6574\u4fe1\u606f\u622a\u56fe</li> <li>\u9644\u4e0a\u5b9e\u73b0\u4ee3\u7801\u3002</li> <li>\u5982\u4f55\u590d\u73b0\uff1a<ol> <li>\u63d2\u4e0a\u7535\u6e90</li> <li>\u5f00\u673a</li> <li>\u8fd0\u884cXXX</li> <li>\u62a5\u9519</li> </ol> </li> </ol>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_10","title":"\u5f53\u524d\u60c5\u51b5","text":"<p>\u8bb2\u6e05\u695a\u590d\u73b0\u6761\u4ef6\u540e, \u63a5\u7740\u8bb2\u8ff0\u81ea\u5df1\u76ee\u524d\u7684\u60c5\u51b5, \u6bd4\u5982\u81ea\u5df1\u5c1d\u8bd5\u4e86\u4ec0\u4e48\u65b9\u5f0f\u4e86, \u5df2\u77e5\u54ea\u4e9b\u5df2\u7ecf\u5931\u8d25\u7684\u89e3\u51b3\u529e\u6cd5</p> <p>\u5fc5\u8981\u65f6\u9644\u4e0a\u622a\u56fe, \u4e3b\u8981\u662f\u622a\u56fe!!!</p> <p>\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u901a\u5e38\u4f1a\u6709\u6469\u5c14\u7eb9\u7b49\u5e72\u6270\u60c5\u51b5\u7684\u51fa\u73b0, \u8fd9\u4e2a\u7279\u522b\u5f71\u54cd\u4ed6\u4eba\u7684\u89c2\u611f, \u6240\u4ee5\u5728\u9644\u56fe\u65f6\u5c3d\u53ef\u80fd\u4f7f\u7528\u622a\u56fe\u800c\u4e0d\u662f\u62cd\u7167(\u5f53\u7136, \u5982\u679c\u5728BIOS\u7b49\u73af\u5883\u4e0b, \u6ca1\u529e\u6cd5\u622a\u56fe\u5916)</p> <p>\u518d\u8005\u9644\u56fe\u65f6, \u5c3d\u53ef\u80fd\u4e0d\u6cc4\u9732\u81ea\u5df1\u9690\u79c1\u7684\u524d\u63d0\u4e0b, \u8bf7\u5c3d\u53ef\u80fd\u7684\u622a\u5168\u5c4f\u5e55, \u5c3d\u53ef\u80fd\u7ed9\u5168\u4fe1\u606f</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_11","title":"\u63d0\u51fa\u9700\u6c42","text":"<p>\u95ee\u9898\u63d0\u51fa\u540e, \u8bb0\u5f97\u7ed9\u51fa\u8981\u5b9e\u73b0\u4ec0\u4e48\u6548\u679c, \u6bd4\u5982\u89e3\u51b3\u62a5\u9519? \u9700\u8981\u66f4\u7b80\u4fbf\u65b9\u6cd5? \u53d1\u5c55\u610f\u89c1?</p> <p>\u8fd9\u4f1a\u8ba9\u4ed6\u4eba\u66f4\u6709\u76ee\u7684\u6027\u7684\u89e3\u51b3\u95ee\u9898</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_12","title":"\u60ac\u8d4f","text":"<p>\u5982\u679c\u5b9e\u5728\u4e00\u4e2a\u5f00\u653e\u7684\u4ea4\u6d41\u793e\u533a, \u6216\u8005\u793e\u56e2\u7ec4\u7ec7(\u6bd4\u5982NISA), \u8fd9\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u5ffd\u7565</p> <p>\u4f46\u662f\u5982\u679c\u5728\u4e00\u4e2a\u964c\u751f\u7684\u793e\u7fa4\u4e2d, \u5982\u679c\u60f3\u8ba9\u5927\u5bb6\u5173\u6ce8\u4f60\u7684\u95ee\u9898, \u6216\u8005\u4f60\u7684\u95ee\u9898\u6d89\u53ca\u9762\u6bd4\u8f83\u5927, \u5904\u7406\u590d\u6742, \u9002\u5f53\u7684\u60ac\u8d4f\u662f\u5438\u5f15\u4ed6\u4eba\u7684\u6709\u6548\u624b\u6bb5</p> <p>\u4e0d\u8fc7\u6211\u76f8\u4fe1, \u5982\u679c\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u63d0\u95ee, \u77e5\u9053\u7b54\u6848\u7684\u4eba\u662f\u5f88\u613f\u610f\u65e0\u507f\u5e2e\u5fd9\u7684</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html","title":"FAQ","text":"<p>\u6c47\u603b\u4e00\u4e9b\u65b0\u624b\u4f1a\u9047\u5230\u7684\u95ee\u9898, \u4e0d\u5b9a\u671f\u66f4\u65b0\u4e2d(\u6709\u95ee\u9898\u53ca\u65f6\u53cd\u9988, \u5b66\u957f\u4f1a\u6c47\u603b\u6574\u7406)</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#_1","title":"\u5165\u95e8\u76f8\u5173","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf","title":"Q: CTF\u5237\u9898\u662f\u4e0d\u662f\u90fd\u9700\u8981\u4f1a\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00","text":"<p>A: \u4e0d\u4e00\u5b9a\u5fc5\u987b\u4f1a\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u4f1a\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u4f1a\u8ba9\u4f60\u5237 CTF \u9898\u8f7b\u677e\u5f88\u591a, \u6240\u4ee5\u5efa\u8bae\u5165\u95e8\u8fd8\u662f\u4ece\u5b66\u4f1a\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u5f00\u59cb, \u4e0d\u7740\u6025\u5f00\u59cb\u5237\u9898</p> <p>\u800c\u4e14\u5982\u679c\u4f60\u662f\u4e00\u540d\u7535\u8111\u5c0f\u767d, \u4ece\u5b66\u4e60\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u5f00\u59cb\u719f\u6089\u7535\u8111\u4e5f\u662f\u4e0d\u9519\u7684\u9009\u62e9</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#_2","title":"\u7ade\u8d5b\u76f8\u5173","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_1","title":"Q: \u4ec0\u4e48\u662f CTF","text":"<p>A: \u300cCTF Capture The Flag\u300d\u4e2d\u6587\u4e00\u822c\u8bd1\u4f5c\u593a\u65d7\u8d5b\uff0c\u5728\u7f51\u7edc\u5b89\u5168\u9886\u57df\u4e2d\u6307\u7684\u662f\u7f51\u7edc\u5b89\u5168\u6280\u672f\u4eba\u5458\u4e4b\u95f4\u8fdb\u884c\u6280\u672f\u7ade\u6280\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\u3002CTF \u8d77\u6e90\u4e8e 1996 \u5e74 DEFCON \u5168\u7403\u9ed1\u5ba2\u5927\u4f1a\uff0c\u4ee5\u4ee3\u66ff\u4e4b\u524d\u9ed1\u5ba2\u4eec\u901a\u8fc7\u76f8\u53d1\u8d77\u771f\u5b9e\u653b\u51fb\u8fdb\u884c\u6280\u672f\u6bd4\u62fc\u7684\u65b9\u5f0f\uff1b\u5176\u5c06\u5b89\u5168\u76f8\u5173\u7684\u77e5\u8bc6\u70b9\u62bd\u8c61\u51fa\u6765\u5e76\u52a0\u5165\u5230\u9898\u76ee\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u77e5\u8bc6\u70b9\u7684\u7406\u89e3\u8ba4\u77e5\uff0c\u5177\u4f53\u5730\u8fdb\u884c\u5b9e\u8df5\u6765\u653b\u514b\u9898\u76ee\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-flag","title":"Q: \u4ec0\u4e48\u662f Flag\uff1f","text":"<p>A: \u53c2\u8d5b\u56e2\u961f\u4e4b\u95f4\u901a\u8fc7\u8fdb\u884c\u653b\u9632\u5bf9\u6297\u3001\u7a0b\u5e8f\u5206\u6790\u7b49\u5f62\u5f0f\uff0c\u7387\u5148\u4ece\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6bd4\u8d5b\u73af\u5883\u4e2d\u5f97\u5230\u4e00\u4e32\u5177\u6709\u4e00\u5b9a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u6216\u5176\u4ed6\u5185\u5bb9\uff0c\u5e76\u5c06\u5176\u63d0\u4ea4\u7ed9\u4e3b\u529e\u65b9\uff0c\u4ece\u800c\u593a\u5f97\u5206\u6570\u3002\u4e3a\u4e86\u65b9\u4fbf\u79f0\u547c\uff0c\u6211\u4eec\u628a\u8fd9\u6837\u7684\u5185\u5bb9\u79f0\u4e4b\u4e3a\u201cFlag\u201d</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_2","title":"Q: CTF \u7ade\u8d5b\u6a21\u5f0f\uff1f","text":"<p>A: CTF \u6709\u4e2a\u4eba\u8d5b\u548c\u56e2\u961f\u8d5b\uff0c\u5728\u4e3b\u6d41\u6bd4\u8d5b\u4e2d\u591a\u4e3a\u56e2\u961f\u8d5b\uff1b</p> <p>CTF \u8d5b\u5236\u5206\u591a\u79cd\uff0c\u56fd\u5185\u5e38\u89c1\u7684\u4e3a\u300c \u89e3\u9898\u6a21\u5f0f Jeopardy \u300d\u300c \u653b\u9632\u6a21\u5f0f | AWD (Attack With Defense) \u300d\u300c \u9759\u6001\u653b\u9632 AWDP (Attack With Defence Plus) \u300d\u4e00\u822c\u5206\u4e3a\u7ebf\u4e0a\u7ebf\u4e0b\u4e24\u4e2a\u9636\u6bb5\uff0c\u7ebf\u4e0a\u901a\u5e38\u91c7\u7528 \u89e3\u9898\u6a21\u5f0f \uff0c\u7ebf\u4e0b\u901a\u5e38\u4e3a CTF +( \u7406\u8bba )+ AWD/AWDP \u6a21\u5f0f\uff0c\u5177\u4f53\u770b\u4e3b\u529e\u65b9\u5b89\u6392\u3002</p> <ul> <li>\u300c \u89e3\u9898\u6a21\u5f0f Jeopardy \u300d\u76ee\u524d\u5927\u591a\u6570\u56fd\u5185\u5916 CTF \u6bd4\u8d5b\u7684\u4e3b\u6d41\u5f62\u5f0f\uff0c\u9009\u624b\u81ea\u7531\u7ec4\u961f\u53c2\u8d5b\u3002\u9898\u76ee\u901a\u5e38\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u9646\u7eed\u653e\u51fa\u3002\u89e3\u51fa\u4e00\u9053\u9898\u76ee\u540e\uff0c\u63d0\u4ea4\u9898\u76ee\u5bf9\u5e94\u7684 flag \u5373\u53ef\u5f97\u5206\uff0c\u6bd4\u8d5b\u7ed3\u675f\u65f6\u5206\u9ad8\u8005\u83b7\u80dc\u3002</li> <li>\u300c \u653b\u9632\u6a21\u5f0f | AWD (Attack With Defense) \u300d\u901a\u5e38\u4e3a\u73b0\u573a\u6bd4\u8d5b\uff0c\u591a\u6570 CTF \u51b3\u8d5b\u7684\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u9009\u624b\u81ea\u7531\u7ec4\u961f\u53c2\u8d5b\u3002\u6bcf\u4e2a\u961f\u4f0d\u90fd\u6709\u81ea\u5df1\u7684 gamebox\uff0c\u5176\u4e0a\u8fd0\u884c\u7740\u4e00\u4e9b\u5e26\u6709\u6f0f\u6d1e\u7684\u670d\u52a1\u3002\u53c2\u8d5b\u6218\u961f\u9700\u8981\u627e\u5230\u6f0f\u6d1e\u5bf9\u5176\u4ed6\u961f\u4f0d gamebox \u53d1\u8d77\u653b\u51fb\uff0c\u4e5f\u9700\u8981\u901a\u8fc7 patch \u670d\u52a1\u6765\u52a0\u56fa\u81ea\u5df1\u7684 gamebox\u3002\u76f8\u6bd4\u4e8e\u89e3\u9898\u6a21\u5f0f\uff0c\u65f6\u95f4\u66f4\u77ed\uff0c\u6bd4\u8d5b\u4e2d\u66f4\u6ce8\u91cd\u4e34\u573a\u53cd\u5e94\u548c\u89e3\u9898\u901f\u5ea6\uff0c\u9700\u8981\u80fd\u591f\u5feb\u901f\u653b\u51fb\u76ee\u6807\u4e3b\u673a\u7684\u6743\u9650\uff0c\u8003\u5bdf\u56e2\u961f\u591a\u65b9\u9762\u7684\u7efc\u5408\u5b89\u5168\u80fd\u529b\u3002</li> <li>\u300c \u9759\u6001\u653b\u9632 AWDP (Attack With Defence Plus) \u300d\u89e3\u9898 + \u52a0\u56fa\u8d5b\uff0c\u76f8\u6bd4 AWD \u8d5b\u5236\u53d6\u6d88\u4e86 gamebox\uff0c\u4e3b\u529e\u65b9\u4f1a\u6839\u636e\u51fa\u9898\u4eba\u8bbe\u7f6e\u7684\u811a\u672c\u5224\u65ad\u63d0\u4ea4\u7684 patch \u662f\u5426\u6709\u6548\uff08\u653b\u51fb\u5219\u548c\u89e3\u9898\u6a21\u5f0f\u7c7b\u4f3c\uff09\uff0c\u53c2\u8d5b\u961f\u4f0d\u65e0\u6cd5\u76f4\u63a5\u653b\u51fb\u5176\u4ed6\u961f\u4f0d\u3002\u6bcf\u4e2a\u56de\u5408\uff0c\u53c2\u8d5b\u961f\u4f0d\u90fd\u4f1a\u6839\u636e\u81ea\u5df1\u653b\u51fb\u548c\u52a0\u56fa\u6210\u529f\u7684\u9898\u76ee\uff08\u4ee5\u53ca\u76f8\u5e94\u9898\u76ee\u7684\u89e3\u9898\u961f\u4f0d\u6570\uff09\u6765\u5f97\u5206\uff0c\u4ee5\u7d2f\u79ef\u5f97\u5206\u4f5c\u4e3a\u6392\u884c\u4f9d\u636e\u3002</li> </ul> <p>\u5b58\u6709\u7591\u60d1\uff1f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0b\u9762\u8fd8\u6709\u66f4\u8ff7\u7cca\u7684 x \u6682\u65f6\u4e86\u89e3\u5c31\u597d\u5566\uff0c\u5728 CTF \u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u63a5\u89e6\u7684\u6700\u591a\u7684\u5c31\u662f\u300c \u89e3\u9898\u6a21\u5f0f Jeopardy \u300d\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_3","title":"Q: CTF \u7684\u7ade\u8d5b\u65b9\u5411","text":"<p>A: \u7531\u4e8e CTF \u77e5\u8bc6\u9762\u5f88\u5e7f\uff0c\u4e00\u4e2a\u4eba\u4e0d\u53ef\u80fd\u9762\u9762\u4ff1\u5230\uff0c\u6240\u4ee5\u9009\u624b\u4eec\u901a\u5e38\u90fd\u4f1a\u9009\u62e9\u4e00\u4e2a\u81ea\u5df1\u559c\u6b22\u7684\u65b9\u5411\u6df1\u5165\u7814\u7a76\uff0c\uff0c\u901a\u5e38\u5206\u4e3a\u4e94\u4e2a\u65b9\u5411:PWN\u3001WEB\u3001REVERSE\u3001CRYPTO\u3001MISC\uff1a</p> <ul> <li>\u300c \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 Pwn \u300dPwn \u5728\u5b89\u5168\u9886\u57df\u662f\u300c\u653b\u7834\u300d\u7684\u610f\u601d\u3002\u4e3b\u8981\u7814\u7a76\u7a0b\u5e8f\u6f0f\u6d1e\u5229\u7528\u6280\u672f\uff0c\u4f8b\u5982\u6808\u6ea2\u51fa\u3001\u5806\u7ba1\u7406\u5668\u7684\u6f0f\u6d1e\u5229\u7528\u548c\u5176\u4ed6\u9ad8\u9636\u6280\u5de7\uff1b\u6316\u6398\u548c\u5206\u6790\u5404\u7c7b\u57fa\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00\u7684\u6f0f\u6d1e\u3002\u4e8c\u8fdb\u5236\u653b\u51fb\u6d89\u53ca\u5230\u6808\u6ea2\u51fa\u3001\u5806\u6ea2\u51fa\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7b49\u4e8c\u8fdb\u5236\u6f0f\u6d1e\uff0c\u9009\u624b\u9700\u8981\u501f\u52a9\u8fd9\u4e9b\u6f0f\u6d1e\u83b7\u53d6\u8ba1\u7b97\u673a\u6743\u9650\uff0c\u4ece\u800c\u62ff\u5230 flag \u2014\u2014PWN!(\u6307\u58f0\u97f3</li> <li>\u300c \u7f51\u7edc\u653b\u9632 WEB \u300d\u7740\u91cd\u4e8e Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u6846\u67b6\uff0c\u6d4f\u89c8\u5668\u4ee5\u53ca\u5404\u7c7b Web \u670d\u52a1\u5668\u7684\u5b89\u5168\u95ee\u9898\uff1b\u6316\u6398 / \u5229\u7528 / \u7814\u7a76\u5404\u7c7b Web \u7cfb\u6f0f\u6d1e\uff0c\u63a2\u7a76\u5176\u5f62\u6210\u539f\u7406\u3001\u5229\u7528\u65b9\u5f0f\u53ca\u4fee\u8865\u65b9\u6848\u3002\u9898\u76ee\u5e38\u89c1\u7684\u6f0f\u6d1e\u7c7b\u578b\u5305\u62ec\u6ce8\u5165\u3001XSS\u3001\u6587\u4ef6\u5305\u542b\u3001\u4ee3\u7801\u6267\u884c\u3001\u4e0a\u4f20\u3001SSRF \u7b49\uff0c\u9009\u624b\u901a\u8fc7\u6f0f\u6d1e\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u62ff\u5230 shell \u6216\u8005\u5f97\u5230\u67d0\u4e9b\u5173\u952e\u6587\u4ef6\u4ece\u800c\u5f97\u5230 Flag\u3002 \u2014\u2014\u6c6a\u6c6a\u6c6a</li> <li>\u300c \u9006\u5411\u5de5\u7a0b Reverse Engineering \u300d\u7814\u7a76\u5404\u7c7b\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7f16\u8bd1\u5668\uff0c\u865a\u62df\u673a\u7684\u5e95\u5c42\u67b6\u6784\uff0c\u4ee5 Windows \u548c Linux \u4e3a\u5e73\u53f0\uff0c\u5b66\u4e60\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u9006\u5411\u5206\u6790\u6280\u672f\uff0c\u5982\u8f6f\u4ef6\u8c03\u8bd5\u4e0e\u7834\u89e3\uff0c\u5bf9\u5df2\u7ecf\u7f16\u8bd1\u5b8c\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u5206\u6790\uff0c\u7814\u7a76\u7a0b\u5e8f\u7684\u884c\u4e3a\u548c\u7b97\u6cd5\uff0c\u7136\u540e\u4ee5\u6b64\u4e3a\u4f9d\u636e\uff0c\u8ba1\u7b97\u51fa\u51fa\u9898\u4eba\u60f3\u9690\u85cf\u7684 flag </li> <li>\u300c \u5bc6\u7801\u5b66 CRYPTO \u300d\u5bc6\u7801\u5b66\u7b80\u5355\u8bb2\u5c31\u53e4\u5178\u5bc6\u7801\u548c\u73b0\u4ee3\u5bc6\u7801\uff0c\u5f53\u7136\u5927\u591a\u6570\u53e4\u5178\u5bc6\u7801\u7684\u9898\u76ee\u76ee\u524d\u90fd\u88ab\u5212\u5206\u5230 MISC \u4e2d\uff0c\u76ee\u524d\u7684\u5bc6\u7801\u5b66\u53cd\u800c\u66f4\u504f\u5411\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5e38\u51fa\u73b0\u5206\u7ec4\u5bc6\u7801\u3001\u6d41\u5bc6\u7801\u548c\u516c\u94a5\u5bc6\u7801\u4f53\u5236\u7684\u8003\u5bdf\uff0c\u5bf9\u521d\u7b49\u6570\u5b66\u3001\u57fa\u672c\u7684\u6570\u8bba\u6709\u4e00\u5b9a\u9700\u6c42\u3002\u9009\u624b\u901a\u5e38\u88ab\u7ed9\u4e88\u4e00\u4e2a\u52a0\u5bc6\u7a0b\u5e8f\uff0c\u62b9\u53bb\u660e\u6587\u4e4b\u540e\u7559\u4e0b\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u8f93\u51fa\uff0c\u8981\u6c42\u9009\u624b\u901a\u8fc7\u5bc6\u7801\u4f53\u5236\u7684\u5f31\u70b9\u6765\u8fd8\u539f flag\u3002 \u2014\u2014\u542c\u8bf4 Oi \u7237\u53c8 AK \u4e86\uff01</li> <li>\u300c \u6742\u9879 MISC \u300d\u5b89\u5168\u6742\u9879\u6d89\u53ca\u5230\u53e4\u5178\u5bc6\u7801\u5b66\u3001\u7f16\u7801\u3001\u9690\u5199\u672f\u3001\u7535\u5b50\u53d6\u8bc1\u3001\u6570\u636e\u5206\u6790\u7b49\u5e7f\u5ea6\u6781\u9ad8\u7684\u5b89\u5168\u624b\u6bb5\u53ca\u5229\u7528\u65b9\u6cd5\uff0c\u9009\u624b\u9700\u8981\u786e\u5b9a\u624b\u6bb5\u6216\u8005\u65b9\u6cd5\uff0c\u53cd\u5411\u7684\u53bb\u7834\u8bd1\u53d6\u8bc1\u4ece\u800c\u62ff\u5230 flag\uff0cMISC \u662f CTF \u6bd4\u8d5b\u4e2d\u5e7f\u5ea6\u6700\u9ad8\u7684\u65b9\u5411\uff0c\u9700\u8981\u5404\u4e2a\u65b9\u5411\u90fd\u6709\u6d89\u730e\u3002 \u2014\u2014 \u55ef\uff1f\u9898\u4e0d\u77e5\u9053\u4e22\u54ea\uff1f\u6ca1\u4e8b\u4e22\u6742\u9879\u5c31\u597d\uff01</li> <li>SOMETHING NEW \u968f\u7740\u8ba1\u7b97\u673a\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4e5f\u6709\u4e00\u4e9b\u65b0\u7684\u65b9\u5411\u5982 \u300c \u533a\u5757\u94fe Blockchain \u300d\u300c AI \u5b89\u5168 \u300d\u300c \u7269\u8054\u7f51 IoT \u300d\u7b49\u7684\u52a0\u5165\u3002\u8fd9\u4e9b\u5185\u5bb9\u6211\u4eec\u4f1a\u5728\u8fdb\u9636\u6587\u6863\u4e2d\u66f4\u65b0\u3002</li> </ul>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q","title":"Q: \u6211\u53ea\u662f\u4e2a\u840c\u65b0\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u53eb\u6211\u5e08\u5085?","text":"<p>A: CTF \u5708\u5b50\u4e2d\uff0cCTFer \u4eec\u901a\u5e38\u4ee5\"\u5e08\u5085\"\u76f8\u4e92\u79f0\u547c\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-writeup","title":"Q: \u4ec0\u4e48\u662f WriteUP?","text":"<p>A: \u53c8\u79f0\u4f5c WP\uff0c\u662f\u8bb0\u5f55 CTF \u6bd4\u8d5b\u4e2d\u89e3\u9898\u8fc7\u7a0b\u7684\u6587\u7ae0\uff0c\u901a\u5e38\u5305\u542b\u9898\u76ee\u63cf\u8ff0\u3001\u89e3\u9898\u601d\u8def\u3001\u89e3\u9898\u8fc7\u7a0b\u3001\u6e90\u7801\u5206\u6790\u3001\u811a\u672c\u5206\u6790\u7b49\u5185\u5bb9\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u89e3\u9898\u62a5\u544a \u2014\u2014 \u9898\u89e3\u3002</p> <p>\u5176\u4ed6\u540d\u8bcd\u89e3\u91ca</p> <ul> <li>\u4e00\u628a\u68ad \u4ee3\u6307\u4e00\u7c7b\u89e3\u9898\u8fc7\u7a0b\u6216\u8005\u65b9\u6cd5\uff0c\u4e00\u822c\u6307\u5c06\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u5bf9\u5e94\u7684\u9644\u4ef6 / \u4ee3\u7801 / \u5bc6\u6587\u7b49\uff0c\u76f4\u63a5\u4e22\u5230\u67d0\u4e2a\u5de5\u5177\u6216\u8005\u7f51\u7ad9\u4e0a\uff0c\u5c31\u80fd\u5f97\u5230 flag \u7684\u89e3\u9898\u65b9\u6cd5\u3002</li> <li>\u5957\u5a03 \u4e00\u662f\u6307\u4e00\u4e9b\u9898\u76ee\u6bd4\u5982\u8bf4\u52a0\u5bc6\u9898\uff0c\u5d4c\u5957\u4e86\u591a\u5c42\u7684\u52a0\u5bc6\uff0c\u9700\u8981\u591a\u6b21\u89e3\u5bc6\u624d\u80fd\u5f97\u5230 flag\uff0c\u5373\u4e00\u9053\u9898\u4e2d\u53ef\u80fd\u6d89\u53ca\u5230\u591a\u4e2a\u77e5\u8bc6\u70b9\u7684\u8003\u5bdf\uff1b \u4e8c\u662f\u5e26\u6709\u4e00\u5b9a\u8d2c\u4e49\u610f\u4e49\uff0c\u901a\u5e38\u6307\u51fa\u9898\u4eba\u53ea\u662f\u4e3a\u4e86\u51fa\u9898\u800c\u51fa\u9898\uff0c\u5355\u7eaf\u7684\u3001\u4e00\u5473\u7684\u3001\u5411\u9898\u76ee\u4e2d\u53e0\u52a0 tricks\uff0c\u5bfc\u81f4\u672c\u6765\u5c31\u4e0d\u65b0\u9896\u7684\u9898\u76ee\u8fd8\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u4f7f\u5f97\u9898\u76ee\u7684\u96be\u5ea6\u65e0\u610f\u4e49\u7684\u53d8\u9ad8\u3002</li> </ul>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_4","title":"Q: \u5b66\u4e60 CTF \u6709\u4ec0\u4e48\u8981\u6c42\u4e48?","text":"<p>A: \u4fe1\u606f\u68c0\u7d22\u80fd\u529b \u548c \u5b66\u4e60\u80fd\u529b \u8fd9\u4e24\u8005</p> <p>\u5373\u53ef\u8bf4\u4eba\u8bdd\u5c31\u662f\uff0c\u4f1a\u7528\u641c\u7d22\u5f15\uff0c\u77e5\u9053\u600e\u4e48\u68c0\u7d22\u4fe1\u606f\uff0c\u77e5\u9053\u600e\u4e48\u9a8c\u8bc1\u4fe1\u606f\u6b63\u786e\u6027\uff0c\u77e5\u9053\u600e\u4e48\u5728\u5783\u573e\u573a\u91cc\u9762\u7ffb\u6709\u7528\u4fe1\u606f\u7136\u540e\u5c31\u662f\u62ff\u5230\u4fe1\u606f\u4e4b\u540e\uff0c\u5feb\u901f\u5b66\u4e60\uff0c\u77e5\u9053\u600e\u4e48\u8fd0\u7528\u77e5\u8bc6\u70b9\u3002\u81f3\u5c11\uff0c\u522b\u4eba\u7684\u89e3\u9898\u62a5\u544a(\u4e00\u822c\u6211\u4eec\u79f0\u4e4b\u4e3a WriteUp \u7b80\u79f0 WP)\u4f60\u5f97\u770b\u5f97\u61c2\uff0c\u4f60\u4f1a\u770b\u7740\u8ddf\u7740\u590d\u73b0\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#_3","title":"\u6e17\u900f\u76f8\u5173","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q_1","title":"Q: \u60f3\u5f53\u9ed1\u5ba2\u5b66\u4ec0\u4e48\uff08\u96fe","text":"<p>A: \u5b66\u6e17\u900f\u55b5\u8c22\u8c22\u55b5\u3002</p> <p>\u6e17\u900f\u5728ctf\u4e2d\u7684\u5e94\u7528\u4e3b\u8981\u662f\u5728\u8fdb\u4e86\u51b3\u8d5b\u540e\u7684awdp\u6216awd\uff0c\u4f46\u4e0d\u80fd\u4ec5\u4ec5\u5c40\u9650\u4e8e\u6bd4\u8d5b\u4e2d\u3002\u5e73\u65f6\u7684\u62a4\u7f51\u884c\u52a8\u6216\u627e\u5b66\u6821\u5b98\u7f51\u7684\u6f0f\u6d1e\u90fd\u662f\u5f88\u597d\u7684\u953b\u70bc\ud83d\ude0b\u3002\u5177\u4f53\u7684\u5b66\u4e60\u8f68\u53ef\u4ee5\u8003\u8651\u5148\u5b66web\u518d\u8f6c\u6e17\u900f\uff08\u53ef\u4ee5\u907f\u514d\u4e0d\u4f1actf\u6b62\u6b65\u8d5b\u7684\u60e8\u5267\u554a\u55ef\uff09\u3002\u518d\u5177\u4f53\u4e00\u70b9\u53ef\u4ee5\u62c9\u5230\u6700\u540e\u9762\u770b\u6e17\u900f\u95e8\u55b5\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-hvv","title":"Q: \u4ec0\u4e48\u662fhvv\u884c\u52a8","text":"<p>A: https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=257451</p> <p>\u7b80\u5355\u6765\u8bb2\u5c31\u662f\u653f\u5e9c\u673a\u5173\u8d1f\u8d23\u4e3e\u529e\u7684\u5bf9\u5404\u5355\u4f4d\u7f51\u7edc(\u5b66\u6821\uff0c\u533b\u9662\uff0c\u94f6\u884c\uff0c\u516c\u53f8\u7b49)\u7684\u7ef4\u62a4\u6bd4\u8d5b,\u5206\u4e3a\u653b\u51fb\u65b9(\u7ea2\u961f)\u4e0e\u9632\u5b88\u65b9(\u84dd\u961f)\uff0c\u653b\u51fb\u65b9\u8d1f\u8d23\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u6f0f\u6d1e\u6316\u6398\uff0c\u793e\u5de5\u7b49\u65b9\u5f0f\u6765\u53d1\u73b0\u5bf9\u65b9\u7f51\u7edc\u4ee5\u53ca\u4eba\u5458\u8106\u5f31\u7684\u90e8\u5206\u6765\u83b7\u53d6\u5206\u6570\u3002\u9632\u5b88\u65b9\u5219\u8d1f\u8d23\u8fdb\u884c\u5bf9\u653b\u51fb\u65b9\u7684\u9632\u5b88\u548c\u62c5\u4efb\u7f51\u7edc\u8b66\u5bdf\u7684\u8eab\u4efd\u5bf9\u653b\u51fb\u8005\u8fdb\u884c\u6eaf\u6e90\u6765\u83b7\u53d6\u5206\u6570</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html","title":"NISA Wiki\u4f7f\u7528\u6307\u5357","text":"<p>\u4e00\u8d77\u6765\u6784\u5efa NISA Wiki \u4e4b\u524d, \u5148\u6765\u5b66\u4e60\u4e00\u4e0b\u5427</p> <p>\u8fd9\u91cc\u4f1a\u5c55\u793a\u4e00\u4e9b\u793a\u4f8b, \u5982\u679c\u9700\u8981\u8bf7\u7ed3\u5408 Markdown \u6587\u4ef6\u548c\u7f51\u9875\u524d\u7aef\u5c55\u793a\u5bf9\u6bd4\u5b66\u4e60</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html","title":"NISA Wiki \u672c\u5730\u9884\u89c8","text":"<p>\u8bf7\u5728\u540c\u6b65\u5230\u4e91\u7aef\u4ed3\u5e93\u524d, \u5148\u5728\u672c\u5730\u8fdb\u884c\u6d4b\u8bd5</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html#clone-","title":"Clone-\u514b\u9686","text":"<p>\u5728\u786e\u4fdd\u5b89\u88c5 git \u4e0e\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee Github \u540e, \u5728\u4e00\u4e2a\u5408\u9002\u7684\u5b58\u50a8\u8def\u5f84, \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4</p> Bash<pre><code>git clone https://github.com/FJNU-NISA/NISA-Wiki\n</code></pre> <p>\u5982\u679c\u987a\u5229\u7684\u8bdd, \u8fd9\u65f6\u4f1a\u4e0b\u8f7d\u4e0b\u6765\u4e00\u4e2a <code>NISA-Wiki</code> \u547d\u540d\u7684\u6587\u4ef6\u5939</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html#python","title":"\u5b89\u88c5Python\u53ca\u5176\u4f9d\u8d56\u5e93","text":"<p>python \u5b89\u88c5\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86, \u4e0b\u9762\u662f\u5b89\u88c5\u4f9d\u8d56\u7684\u547d\u4ee4</p> Bash<pre><code>pip install -r requestment.txt\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html#_1","title":"\u542f\u52a8\u672c\u5730\u9884\u89c8\u670d\u52a1","text":"Bash<pre><code>mkdocs serve\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html","title":"NISA Wiki \u7f16\u5199\u89c4\u8303","text":""},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_1","title":"\u91cd\u70b9\u5fc5\u770b","text":"<ol> <li>\u5c3d\u53ef\u80fd\u4e0d\u8981\u79fb\u52a8\u6587\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784, \u8fd9\u4e2a\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5220\u9664\u6587\u4ef6\u540e\u518d\u65b0\u5efa, \u4f1a\u5bfc\u81f4\u534f\u4f5c\u8bb0\u5f55\u4e22\u5931</li> </ol>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#markdown","title":"Markdown \u89c4\u8303","text":"<p>\u8bf7\u5148\u5c3d\u53ef\u80fd\u7684\u5b66\u4e60 Markdown \u7684\u8bed\u6cd5\u53ca\u89c4\u8303, \u719f\u7ec3\u638c\u63e1\u6587\u672c\u7f16\u8f91\u80fd\u529b, Markdown \u89c4\u8303\u6559\u7a0b\u5982\u4e0b</p> <p>https://markdown.com.cn/</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#wiki","title":"Wiki \u7ed3\u6784\u4ecb\u7ecd","text":""},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_2","title":"\u6574\u4f53\u7ed3\u6784\u4ecb\u7ecd","text":"Text Only<pre><code>\\NISA-WIKI\n|   .gitignore   # git \u5ffd\u7565\u7684\u6587\u4ef6, \u5199\u5165\u8fd9\u91cc\u7684\u6587\u4ef6, git \u4f1a\u5ffd\u7565\u5b83(\u6bd4\u5982\u8fd9\u91cc\u5ffd\u7565\u4e86'.cache'\u7f13\u5b58\u6587\u4ef6\u5939)\n|   LICENSE   # \u56e0\u4e3a\u4e0a\u4f20\u5230\u4e86 github, \u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee, \u4e00\u4e2a\u8bb8\u53ef\u8bc1\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684, \u8fd9\u91cc\u9009\u62e9\u4e86 CC4.0 \u534f\u8bae\n|   mkdocs.yml   # \u672c Wiki \u91c7\u7528 Material for MkDocs \u4f5c\u4e3a\u6846\u67b6, \u8fd9\u4e2a\u6587\u4ef6\u662f\u8be5\u6846\u67b6\u7684\u914d\u7f6e\u6587\u4ef6\n|   README.md   # \u57fa\u672c\u6bcf\u4e2a\u5f00\u6e90\u9879\u76ee\u90fd\u4f1a\u6709\u8be5\u6587\u4ef6, \u57fa\u672c\u4f1a\u5199\u7740\u9879\u76ee\u7684\u7b80\u4ecb\u548c\u4f7f\u7528\n|   requestment.txt   # \u672c\u5730\u9884\u89c8\u524d\u9700\u8981\u5b89\u88c5\u7684Python\u4f9d\u8d56\n\\---.cache  # Material for MkDocs \u542f\u52a8\u672c\u5730\u9884\u89c8\u65f6, \u4f1a\u751f\u6210\u7684\u7f13\u5b58\u6587\u4ef6\n\\---.github  # Github \u76f8\u5173\u7684\u914d\u7f6e\u6587\u4ef6\n|   \\---workflows   # Github \u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\u914d\u7f6e\u6587\u4ef6\u653e\u7f6e\u7684\u76ee\u5f55\n|           ci.yml   # \u6bd4\u5982\u8fd9\u91cc\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5de5\u4f5c\u6d41, \u57fa\u672c\u529f\u80fd\u5c31\u662f\u5c06\u6700\u65b0\u540c\u6b65\u7684 Markdown \u6784\u5efa\u4e3a HTML \u9875\u9762, \u653e\u7f6e\u5728 gh-pages \u5206\u652f\u4e2d\n\\---docs  # \u8fd9\u91cc\u5b58\u653e\u7740\u5c31\u662f Wiki \u7684\u6b63\u6587\u4e86, \u4f5c\u4e3a\u975e\u8fd0\u7ef4\u7528\u6237, \u4f60\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u4e86, \u4e0b\u6587\u5728\u8be6\u7ec6\u5c55\u5f00\n    \\--- \u8fd9\u91cc\u7701\u7565\u4e00\u5806\u6587\u4ef6\u5939\n    \\---assets  # \u9644\u4ef6\u5b58\u653e\u76ee\u5f55, \u4e0b\u6587\u4f1a\u4ecb\u7ecd\u5b83\u7684\u4f7f\u7528\u89c4\u8303\n    |       NISA_LOGO.svg\n    \\---javascripts  # \u4e00\u4e9b\u914d\u7f6e Wiki \u65f6\u9700\u8981\u7528\u5230\u7684 js \u6587\u4ef6, \u975e\u8fd0\u7ef4\u7528\u6237\u65e0\u9700\u5728\u610f\u5b83\u4eec\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#wiki_1","title":"Wiki \u6b63\u6587\u7ed3\u6784\u4ecb\u7ecd","text":"<p>\u53ef\u4ee5\u67e5\u770b\u8be5\u534f\u4f5c\u6307\u5357\u7684\u6587\u4ef6\u5939\u7ed3\u6784\u8fdb\u884c\u53c2\u8003</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_3","title":"\u9876\u90e8\u5bfc\u822a\u680f","text":"<p>\u9876\u90e8\u5bfc\u822a\u680f\u662f\u6839\u636e ./docs/ \u76ee\u5f55\u4e0b\u7684\u7b2c\u4e00\u5c42\u6587\u4ef6\u5939\u51b3\u5b9a\u7684, \u6587\u4ef6\u5939\u540d\u5c31\u662f\u5bfc\u822a\u680f\u663e\u793a\u7684\u540d\u79f0</p> <p>\u56e0\u4e3a\u9ed8\u8ba4\u91c7\u7528\u5b57\u5178\u5e8f\u6392\u5e8f, \u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u6570\u5b57\u524d\u7f00\u65b9\u4fbf\u6392\u5e8f(\u672c\u5bfc\u822a\u680f\u5404\u5b50\u9879\u987a\u5e8f\u4e0e\u5c5e\u6027\u65e0\u5173)</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_4","title":"\u5de6\u4fa7\u5bfc\u822a\u680f","text":"<p>\u8fdb\u5165 <code>\u9876\u90e8\u5bfc\u822a\u680f\u7684\u5b50\u9879\u4e2d</code>, \u5c31\u4f1a\u5728\u9875\u9762\u5de6\u4fa7\u770b\u5230\u4e00\u4e2a\u8be5\u5b50\u9879\u7684\u66f4\u8be6\u7ec6\u7684\u5bfc\u822a\u680f</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_5","title":"\u6587\u4ef6\u5939","text":"<p>\u8fd9\u4e2a\u5bfc\u822a\u680f\u4e5f\u662f\u7531\u6587\u4ef6\u5939\u76ee\u5f55\u7ed3\u6784\u51b3\u5b9a\u7684, \u5e76\u4e14\u6bcf\u4e00\u5c42\u6587\u4ef6\u5939\u540d\u4f1a\u5728\u5bfc\u822a\u680f\u4e2d\u663e\u793a\u51fa\u6765</p> <p>\u5e76\u4e14\u6392\u5e8f\u5b83\u4eec\u7684\u6392\u5e8f\u662f\u7531\u6587\u4ef6\u5939\u540d\u7684\u5b57\u5178\u5e8f\u8fdb\u884c\u6392\u5217, \u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u987a\u5e8f\u53ef\u4ee5\u91c7\u7528 <code>\u4e24\u4f4d\u5341\u8fdb\u5236\u6570\u5b57-\u6587\u4ef6\u5939\u540d</code> \u7684\u5f62\u5f0f\u547d\u540d\u6587\u4ef6\u5939</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_6","title":"\u6587\u4ef6","text":"<p>\u4e0d\u8fc7\u5982\u679c\u662f Markdown \u6587\u4ef6, \u6587\u4ef6\u540d\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u663e\u793a\u5728\u5bfc\u822a\u680f\u4e2d, \u800c\u662f\u663e\u793a Markdown \u6587\u4ef6\u7684\u4e00\u7ea7\u6807\u9898, \u5982\u679c\u6ca1\u6709\u4e00\u7ea7\u6807\u9898\u7684\u8bdd, \u624d\u4f1a\u663e\u793a\u6587\u4ef6\u540d</p> <p>\u4f46\u662f Markdown \u6587\u4ef6\u540d\u79f0\u5374\u51b3\u5b9a\u7740\u5bfc\u822a\u680f\u7684\u6392\u5217\u987a\u5e8f, \u6240\u4ee5\u5982\u679c\u8981\u6392\u5e8f\u7684\u8bdd, \u4e5f\u662f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 <code>\u4e24\u4f4d\u5341\u8fdb\u5236\u6570\u5b57-\u6587\u4ef6\u540d</code> \u7684\u5f62\u5f0f\u547d\u540d\u8fdb\u884c\u6392\u5e8f</p> <p>\u5c3d\u53ef\u80fd\u4fdd\u6301 Markdown \u6587\u4ef6\u7684\u4e00\u7ea7\u6807\u9898\u5c31\u662f\u6587\u4ef6\u540d(\u4e00\u7ea7\u6807\u9898\u53ef\u4ee5\u7701\u7565\u6570\u5b57\u524d\u7f00)</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_7","title":"\u53f3\u4fa7\u76ee\u5f55","text":"<p>\u53f3\u4fa7\u7684\u76ee\u5f55\u662f\u6839\u636e Markdown \u7684 # \u6807\u9898\u751f\u6210\u7684, \u76ee\u524d\u8bbe\u7f6e\u7684\u6700\u5927\u6df1\u5ea6\u662f 5 \u5c42</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#indexmd","title":"index.md","text":"<p>\u5728\u6bcf\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a <code>index.md</code> \u6587\u4ef6, \u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u4f1a\u4f5c\u4e3a\u70b9\u51fb\u8be5\u6587\u4ef6\u5939\u5bfc\u822a\u680f\u65f6\u65f6, \u4f18\u5148\u663e\u793a\u7684\u5185\u5bb9</p> <p>\u5982\u679c\u6ca1\u6709 <code>index.md</code> \u6587\u4ef6\u7684\u8bdd, \u70b9\u51fb\u8be5\u6587\u4ef6\u5939\u5bfc\u822a\u680f\u65f6, \u5219\u4f1a\u8df3\u8f6c\u5230\u8be5\u6587\u4ef6\u5939\u4e2d\u5b57\u5178\u5e8f\u6392\u5e8f\u7684\u7b2c\u4e00\u4e2a Markdown \u6587\u4ef6</p> <p>\u6ce8\u610f: index.md \u6587\u4ef6\u4e2d, \u8bf7\u7f16\u5199\u8be5\u6587\u4ef6\u5939\u5185\u5bb9\u7684\u603b\u7ed3\u6027\u5185\u5bb9, \u8bf7\u4e0d\u8981\u7f16\u5199\u957f\u7bc7\u6b63\u6587</p> <p>\u5982\u679c\u6587\u4ef6\u5939\u5185\u53ea\u6709\u4e00\u7bc7\u6587\u7ae0, \u53ef\u4ee5\u9009\u62e9\u4e0d\u521b\u5efa <code>index.md</code> \u6587\u4ef6, \u4ec5\u4fdd\u7559\u4e00\u7bc7\u6b63\u6587 Markdown, \u6216\u8005\u53d6\u6d88\u6587\u4ef6\u5939, \u76f4\u63a5\u5c06 Markdown \u6587\u4ef6\u76f4\u63a5\u653e\u5728\u4e0a\u4e00\u5c42\u6587\u4ef6\u5939\u4e2d</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#assets","title":"assets \u6587\u4ef6\u5939","text":"<p>\u5982\u679c\u9700\u8981\u5728\u6b63\u6587\u4e2d\u6dfb\u52a0\u56fe\u7247, \u5177\u4f53\u8bed\u6cd5\u8bf7\u53c2\u770b Markdown \u8bed\u6cd5\u6587\u6863</p> <p>\u800c <code>\u56fe\u7247\u7684\u6e90\u6587\u4ef6</code> \u8bf7\u653e\u7f6e\u5728\u4e0e <code>\u5f15\u7528\u5176\u7684 Markdown \u6587\u4ef6</code> \u540c\u4e00\u5c42\u76ee\u5f55\u7684 <code>assets</code> \u6587\u4ef6\u5939\u4e2d, \u800c\u4e0d\u662f\u5168\u90e8\u653e\u7f6e\u5728 <code>docs</code> \u76ee\u5f55\u7684\u6587\u4ef6\u5939\u4e2d</p> <p>\u5982\u679c\u9700\u8981\u5f15\u7528\u5728\u7ebf\u56fe\u7247, \u6700\u597d\u5c06\u5176\u4e0b\u8f7d\u4fdd\u5b58\u540e\u5f15\u7528, \u4ee5\u514d\u94fe\u63a5\u5931\u6548, \u5bfc\u81f4\u56fe\u7247\u7f3a\u5931</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/03-NISA%20Wiki%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html","title":"NISA Wiki \u5e38\u89c1\u95ee\u9898","text":""},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/03-NISA%20Wiki%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html#latex","title":"\u6709\u5e8f\u5217\u8868\u4e2d\u5d4c\u5957 Latex \u8bed\u6cd5","text":"<p>\u7531\u4e8e\u4e00\u4e9b\u95ee\u9898\u65e0\u6cd5\u89e3\u51b3, \u53ea\u80fd\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u5b9e\u73b0</p> <ol> <li>\u5206\u6570\uff1a \\[ \\frac{a + b}{c} \\] </li> <li>\u5f00\u65b9\uff1a \\[ \\sqrt{a^2 + b^2} \\] </li> </ol> <p>\u8bed\u6cd5\u539f\u6587\uff1a</p> Text Only<pre><code>1. \u5206\u6570\uff1a\n&gt; $$\n&gt; \\frac{a + b}{c}\n&gt; $$\n2. \u5f00\u65b9\uff1a\n&gt; $$\n&gt; \\sqrt{a^2 + b^2}\n&gt; $$\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html","title":"NISA Wiki \u540c\u6b65\u89c4\u8303","text":"<p>\u5982\u679c\u4f60\u662f\u4f5c\u4e3a NISA \u7684\u4e00\u5458, \u4f60\u9996\u5148\u9700\u8981\u7533\u8bf7\u52a0\u5165 NISA \u7684 Github \u7ec4\u7ec7, \u624d\u80fd\u7f16\u8f91\u8be5\u4ed3\u5e93. \u5f53\u7136, \u5982\u679c\u4f60\u4e0d\u662f\u7ec4\u7ec7\u4e00\u5458, \u6211\u4eec\u4e5f\u5f88\u4e50\u610f\u4f60\u4eec\u63d0 PR</p> <p>\u672c\u6587\u4ee5 Windows \u4e0b, \u4f7f\u7528 VScode \u4e3a\u73af\u5883\u6765\u6f14\u793a</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#clone-","title":"Clone-\u514b\u9686","text":"<p>\u5728\u786e\u4fdd\u5b89\u88c5 git \u4e0e\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee Github \u540e, \u5728\u4e00\u4e2a\u5408\u9002\u7684\u5b58\u50a8\u8def\u5f84, \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4</p> Bash<pre><code>git clone https://github.com/FJNU-NISA/NISA-Wiki\n</code></pre> <p>\u5982\u679c\u987a\u5229\u7684\u8bdd, \u8fd9\u65f6\u4f1a\u4e0b\u8f7d\u4e0b\u6765\u4e00\u4e2a <code>NISA-Wiki</code> \u547d\u540d\u7684\u6587\u4ef6\u5939</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#-pull","title":"\u62c9\u53d6-Pull","text":"<p>\u5982\u679c\u4f60\u521a\u521a\u514b\u9686\u4e0b\u4ed3\u5e93, \u90a3\u4e48\u4f60\u672c\u5730\u7684 Wiki \u7248\u672c\u4e0d\u51fa\u610f\u5916\u5c31\u662f\u6700\u65b0\u7684(\u4e0d\u6392\u9664\u4f60\u521a\u514b\u9686\u5c31\u6709\u4eba\u66f4\u65b0\u4ed3\u5e93), \u90a3\u4e48\u4f60\u53ef\u4ee5\u4e0d\u7528\u5728\u6267\u884c\u62c9\u53d6\u64cd\u4f5c</p> <p>\u4f46\u662f\u5f53\u4f60\u957f\u65f6\u95f4\u6ca1\u6709\u540c\u6b65\u4f60\u7684\u672c\u5730 Wiki, \u90a3\u5e94\u8be5\u5148\u6267\u884c Pull \u6307\u4ee4, \u4ee5\u786e\u4fdd\u4f60\u7684\u672c\u5730 Wiki \u4e0e\u4e91\u7aef Wiki \u7248\u672c\u7edf\u4e00</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#_1","title":"\u547d\u4ee4\u64cd\u4f5c","text":"<p>\u4e0b\u9762\u662f\u4e00\u6761\u7b80\u5355\u7684 Pull \u6307\u4ee4\u4f8b\u5b50, \u4f60\u53ef\u4ee5\u76f4\u63a5\u5bf9\u672c\u4ed3\u5e93\u6267\u884c, \u4ee5\u540c\u6b65\u6700\u65b0\u7684\u7248\u672c(\u5982\u679c\u60f3\u5b66\u4e60\u66f4\u8be6\u7ec6\u7684 Git \u547d\u4ee4\u53ef\u4ee5\u524d\u5f80\u76f8\u5e94\u7684\u9875\u9762\u5b66\u4e60)</p> Bash<pre><code>git pull origin main\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#vscode","title":"VScode \u64cd\u4f5c","text":"<p>\u5f53\u7136\u5728 VScode \u4e2d\u4e5f\u662f\u53ef\u4ee5\u56fe\u5f62\u5316\u64cd\u4f5c\u7684, \u5982\u4e0b\u56fe\u6240\u793a</p> <p></p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#-write","title":"\u7f16\u5199-Write","text":"<p>\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528 VScode \u4f5c\u4e3a\u7f16\u8f91\u5de5\u5177, \u5176\u6709\u8f83\u597d\u7f16\u5199 Markdown \u548c \u64cd\u4f5c git \u4ed3\u5e93\u7684\u73af\u5883, \u4e0b\u6587</p> <p>\u5177\u4f53\u5185\u5bb9\u89c4\u8303\u8bf7\u770b NISA Wiki \u7f16\u5199\u89c4\u8303</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#-push","title":"\u4e0a\u4f20-Push","text":"<p>\u5f53\u4f60\u7f16\u5199\u5b8c Wiki \u540e, \u60f3\u8981\u540c\u6b65\u5230\u4e91\u7aef\u5c31\u9700\u8981\u4f7f\u7528 Push \u547d\u4ee4</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#_2","title":"\u547d\u4ee4\u64cd\u4f5c","text":"<p>\u5982\u4e0b, \u8fd9\u4e2a\u662f\u4e00\u4e2a\u7b80\u5355\u7684 push \u547d\u4ee4, \u53ef\u4ee5\u76f4\u63a5\u5c06\u672c\u5730\u7684\u6587\u4ef6\u540c\u6b65\u5230\u4e91\u7aef\u4e2d(\u5982\u679c\u60f3\u5b66\u4e60\u66f4\u8be6\u7ec6\u7684 Git \u547d\u4ee4\u53ef\u4ee5\u524d\u5f80\u76f8\u5e94\u7684\u9875\u9762\u5b66\u4e60)</p> Bash<pre><code>git push origin main\n</code></pre> <p>\u76f4\u63a5\u8fd0\u884c\u8fd9\u6761\u547d\u4ee4, \u4f60\u4f1a\u5f97\u5230 <code>Everything up-to-date</code> \u7684\u56de\u663e</p> <p>\u4f60\u4ee5\u4e3a\u5168\u90e8\u540c\u6b65\u4e0a\u53bb\u4e86? \u5176\u5b9e\u5e76\u6ca1\u6709, \u56e0\u4e3a\u5728 push \u4e4b\u524d, \u4f60\u8fd8\u9700\u8981\u8fd0\u884c add \u548c commit \u547d\u4ee4</p> <p>push \u53ea\u662f\u628a\u5f53\u524d\u672c\u5730\u7684 git \u8282\u70b9\u540c\u6b65\u4e91, \u4f46\u662f\u6ca1\u6709\u8fd0\u884c add \u548c commit \u547d\u4ee4\u4e4b\u524d, \u5e76\u672a\u6709\u65b0\u7684 git \u8282\u70b9</p> <p>\u6240\u4ee5\u8981\u5148\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4, \u5efa\u7acb git \u8282\u70b9</p> Bash<pre><code>git add \u8981\u6dfb\u52a0\u4fee\u6539\u7684\u6587\u4ef6\u540d1\n... \u7701\u7565\u591a\u4e2aadd\u547d\u4ee4\ngit add \u8981\u6dfb\u52a0\u4fee\u6539\u7684\u6587\u4ef6\u540dn\n\ngit commit -m \"\u63d0\u4ea4\u4fe1\u606f\"\n</code></pre> <p>\u5982\u679c\u60f3\u76f4\u63a5 add \u6240\u6709\u7684\u4fee\u6539\u6587\u4ef6, \u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c <code>git add .</code></p> <p>\u5bf9\u4e8e <code>\u63d0\u4ea4\u4fe1\u606f</code> \u586b\u5199\u7684\u5185\u5bb9\u5219\u662f\u5bf9\u4e0a\u8ff0 add \u6587\u4ef6\u4fee\u6539\u4e86\u4ec0\u4e48\u5185\u5bb9\u7684\u603b\u7ed3</p> <p>\u5728 add \u548c commit \u4e4b\u540e, \u5c31\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c push \u547d\u4ee4\u4e86</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#vscode_1","title":"VScode \u64cd\u4f5c","text":"<p>\u800c\u8fd9\u4e9b\u547d\u4ee4, \u5982\u679c\u5728 VSCode \u4e2d\u5c06\u4f1a\u7279\u522b\u7b80\u5355</p> <p>add \u547d\u4ee4\u76f8\u5f53\u4e8e\u70b9\u51fb\u4e0b\u56fe\u4f4d\u7f6e(\u5982\u679c\u662f\u8981\u5355\u72ec add \u4e00\u4e2a\u6587\u4ef6, \u5219\u70b9\u51fb\u6587\u4ef6\u7684 <code>+</code> \u5373\u53ef)</p> <p></p> <p>\u7136\u540e\u5c31\u662f commit \u547d\u4ee4</p> <p></p> <p>\u6700\u540e\u5c31\u662f\u4e0a\u4f20\u4e91\u7aef, \u6ce8\u610f\u4e91\u6735\u7684\u6807\u5fd7, \u662f\u5f53\u65f6\u5df2\u7ecf\u4e0a\u4f20\u4e91\u7aef\u7684\u4f4d\u7f6e</p> <p></p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#_3","title":"\u6700\u540e\u63d0\u793a","text":"<p>\u8bf7\u9075\u5b88\u4ee5\u4e0b\u884c\u4e3a:</p> <ol> <li>\u4e0d\u8981\u9891\u7e41\u7684 commit, \u5c3d\u53ef\u80fd\u786e\u4fdd\u4e00\u6b21\u5b8c\u6574\u7684\u4fee\u6539\u540e\u5728\u8fdb\u884c commit</li> <li>commit \u7684\u6d88\u606f\u8bf7\u8ba4\u771f\u586b\u5199, \u4e0d\u8981\u586b\u5199\u65e0\u610f\u4e49\u7684\u5185\u5bb9</li> </ol>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/index.html","title":"AI\u5927\u6a21\u578b\u4f7f\u7528\u6280\u5de7","text":"<p>\u5408\u7406\u7684\u4f7f\u7528AI\uff0c\u53ef\u4ee5\u6781\u5927\u7684\u63d0\u9ad8\u5b66\u4e60\u6548\u7387</p>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B8%B8%E8%A7%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%8E%A8%E8%8D%90.html","title":"\u5e38\u89c1\u7684\u5927\u8bed\u8a00\u6a21\u578b\u63a8\u8350","text":"<p>AI \u5927\u8bed\u8a00\u6a21\u578b\u53d1\u5c55\u8fed\u4ee3\u5f88\u5feb, \u6ca1\u529e\u6cd5\u8bf4\u54ea\u5bb6\u5927\u8bed\u8a00\u6a21\u578b\u6700\u5f3a, \u5e76\u4e14\u5404\u5bb6\u5927\u8bed\u8a00\u6a21\u578b\u5404\u6709\u4f18\u52a3, \u627e\u5230\u81ea\u5df1\u6700\u559c\u6b22\u7684\u5c31\u597d, \u4e0b\u6587\u7b80\u5355\u5217\u4e3e\u4e00\u4e9b, \u540e\u7eed\u518d\u7ec6\u8bf4\u5404\u4e2a\u7684\u4f18\u52a3</p>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B8%B8%E8%A7%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%8E%A8%E8%8D%90.html#_2","title":"\u56fd\u5185","text":"<p>Deepseek</p> <p>\u8c46\u5305</p>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B8%B8%E8%A7%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%8E%A8%E8%8D%90.html#_3","title":"\u56fd\u5916","text":"<p>ChatGPT</p> <p>Google Gemini &amp; Google AI Studio</p> <p>claude</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html","title":"\u5e38\u7528\u5de5\u5177\u4f7f\u7528\u6307\u5357","text":"<p>\u8fd9\u91cc\u653e\u4e00\u4e9b\u5e38\u89c1\u5de5\u5177\u7684\u6307\u5357\u5427</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/010%20Editor/index.html","title":"010 Editor","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/010%20Editor/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>010 Editor \u662f\u7531 SweetScape Software \u5f00\u53d1\u7684\u4e00\u6b3e\u5f3a\u5927\u7684\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u5206\u6790\u3001\u53cd\u5411\u5de5\u7a0b\u3001\u8c03\u8bd5\u4ee5\u53ca\u6570\u636e\u6062\u590d\u7b49\u9886\u57df</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/010%20Editor/index.html#_2","title":"\u4e0b\u8f7d","text":"<p>\u5b98\u7f51\u4e0b\u8f7d\u5730\u5740: https://www.sweetscape.com/010editor/</p> <p>\u5b66\u4e60\u7248\u8865\u4e01: https://www.52pojie.cn/thread-1821946-1-1.html</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/BurpSuite/index.html","title":"BurpSuite\u4f7f\u7528\u6307\u5357","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/BurpSuite/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>Burp Suite \u662f\u7531 PortSwigger \u516c\u53f8\u5f00\u53d1\u7684\u4e00\u6b3eWeb \u5b89\u5168\u6d4b\u8bd5\u5de5\u5177\u5957\u4ef6\uff0c\u5e7f\u6cdb\u7528\u4e8e\u6e17\u900f\u6d4b\u8bd5\u3001\u5b89\u5168\u5ba1\u8ba1\u3001\u6f0f\u6d1e\u626b\u63cf\u7b49\u9886\u57df\uff0c\u7279\u522b\u9002\u5408\u6d4b\u8bd5 Web \u5e94\u7528\u7684\u5b89\u5168\u6027</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/BurpSuite/index.html#_2","title":"\u4e0b\u8f7d","text":"<p>\u5b66\u4e60\u7248\u4e0b\u8f7d\u5730\u5740: https://www.52pojie.cn/thread-2005151-1-1.html</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Github%E4%BD%BF%E7%94%A8.html","title":"Github \u4f7f\u7528","text":"<p>\u5b98\u7f51\u5730\u5740: https://github.com/</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Github%E4%BD%BF%E7%94%A8.html#_1","title":"\u6ce8\u518c","text":"<p>\u53c2\u8003\u6587\u7ae0 https://www.cnblogs.com/moshuying/p/15367181.html</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html","title":"Git\u57fa\u672c\u4f7f\u7528","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#git_1","title":"\u5b89\u88c5 Git","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#windows","title":"Windows \u4e0a\u5b89\u88c5","text":"<p>CSDN\u4e0a\u7684\u8be6\u7ec6\u6559\u7a0b</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#git_2","title":"\u914d\u7f6e Git","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_1","title":"\u8bbe\u7f6e\u90ae\u7bb1\u548c\u7528\u6237\u540d","text":"Bash<pre><code>git config --global user.name \u7528\u6237\u540d\ngit config --global user.email \u90ae\u7bb1\n</code></pre> <p>\u5176\u4e2d <code>--global</code> \u4ee3\u8868\u5168\u5c40\u914d\u7f6e, \u5982\u679c\u4e0d\u8bbe\u7f6e, \u53ea\u5bf9\u5f53\u524d\u6240\u5904\u4ed3\u5e93\u751f\u6548</p> <p>\u5982\u679c\u60f3\u628a\u4ed3\u5e93\u540c\u6b65\u5230 Github \u4e0a\u540e, \u53ef\u4ee5\u6b63\u786e\u663e\u793a\u81ea\u5df1\u8d26\u53f7\u548c\u5934\u50cf, \u9700\u8981\u6b63\u786e\u8bbe\u7f6e\u4e0e Github \u76f8\u540c\u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1</p> <p>\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u81ea\u5df1\u7684\u90ae\u7bb1, \u5728\u540c\u6b65\u4ed3\u5e93\u65f6, Github \u4f1a\u53d1\u51fa\u8b66\u544a, \u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u628a\u90ae\u7bb1\u6539\u4e3a **@users.noreply.github.com \u7684\u90ae\u7bb1, \u53ef\u4ee5\u524d\u5f80 https://github.com/settings/emails, \u67e5\u770b\u81ea\u5df1\u5bf9\u5e94\u7684\u5730\u5740, \u4ee5\u8d77\u5230\u4fdd\u62a4\u9690\u79c1\u7684\u4f5c\u7528</p> <p></p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#git_3","title":"Git \u5e38\u89c1\u4f7f\u7528\u547d\u4ee4","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_2","title":"\u521d\u59cb\u5316\u4ed3\u5e93","text":"<p>\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684 Git \u4ed3\u5e93\uff1a</p> Bash<pre><code>git init\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_3","title":"\u6dfb\u52a0\u6587\u4ef6\u8fdb\u6682\u5b58\u533a","text":"<p>\u5c06\u6587\u4ef6\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff08staging area\uff09\uff1a</p> Bash<pre><code># \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\ngit add \u6587\u4ef6\u540d\n\n# \u6dfb\u52a0\u6240\u6709\u4fee\u6539\u7684\u6587\u4ef6\ngit add .\n\n# \u6dfb\u52a0\u6240\u6709\u6587\u4ef6\uff08\u5305\u62ec\u65b0\u6587\u4ef6\u548c\u5df2\u5220\u9664\u7684\u6587\u4ef6\uff09\ngit add -A\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_4","title":"\u63d0\u4ea4\u6682\u5b58\u533a\u6587\u4ef6","text":"<p>\u5c06\u6682\u5b58\u533a\u7684\u6587\u4ef6\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\uff1a</p> Bash<pre><code># \u63d0\u4ea4\u5e76\u6dfb\u52a0\u63d0\u4ea4\u4fe1\u606f\ngit commit -m \"\u63d0\u4ea4\u4fe1\u606f\"\n\n# \u6dfb\u52a0\u5e76\u63d0\u4ea4\uff08\u8df3\u8fc7\u6682\u5b58\u533a\uff09\ngit commit -am \"\u63d0\u4ea4\u4fe1\u606f\"\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_5","title":"\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6","text":"<p>\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u83b7\u53d6\u6700\u65b0\u4ee3\u7801\uff1a</p> Bash<pre><code># \u62c9\u53d6\u5e76\u5408\u5e76\u8fdc\u7a0b\u5206\u652f\ngit pull\n\n# \u6307\u5b9a\u8fdc\u7a0b\u4ed3\u5e93\u548c\u5206\u652f\ngit pull origin main\n\n# \u83b7\u53d6\u8fdc\u7a0b\u66f4\u65b0\u4f46\u4e0d\u5408\u5e76\ngit fetch\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_6","title":"\u63a8\u9001\u81f3\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u5c06\u672c\u5730\u63d0\u4ea4\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff1a</p> Bash<pre><code># \u63a8\u9001\u5230\u9ed8\u8ba4\u8fdc\u7a0b\u5206\u652f\ngit push\n\n# \u6307\u5b9a\u8fdc\u7a0b\u4ed3\u5e93\u548c\u5206\u652f\ngit push origin main\n\n# \u9996\u6b21\u63a8\u9001\u5e76\u8bbe\u7f6e\u4e0a\u6e38\u5206\u652f\ngit push -u origin main\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_7","title":"\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u5173\u8054\u672c\u5730\u4ed3\u5e93\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\uff1a</p> Bash<pre><code># \u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93\ngit remote add origin \u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\n\n# \u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93\ngit remote -v\n\n# \u4fee\u6539\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\ngit remote set-url origin \u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_8","title":"\u5176\u4ed6\u5e38\u7528\u547d\u4ee4","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_9","title":"\u67e5\u770b\u72b6\u6001\u548c\u5386\u53f2","text":"Bash<pre><code># \u67e5\u770b\u4ed3\u5e93\u72b6\u6001\ngit status\n\n# \u67e5\u770b\u63d0\u4ea4\u5386\u53f2\ngit log\n\n# \u67e5\u770b\u7b80\u6d01\u7684\u63d0\u4ea4\u5386\u53f2\ngit log --oneline\n\n# \u67e5\u770b\u6587\u4ef6\u5dee\u5f02\ngit diff\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_10","title":"\u5206\u652f\u64cd\u4f5c","text":"Bash<pre><code># \u67e5\u770b\u6240\u6709\u5206\u652f\ngit branch -a\n\n# \u521b\u5efa\u65b0\u5206\u652f\ngit branch \u5206\u652f\u540d\n\n# \u5207\u6362\u5206\u652f\ngit checkout \u5206\u652f\u540d\n\n# \u521b\u5efa\u5e76\u5207\u6362\u5230\u65b0\u5206\u652f\ngit checkout -b \u5206\u652f\u540d\n\n# \u5408\u5e76\u5206\u652f\ngit merge \u5206\u652f\u540d\n\n# \u5220\u9664\u5206\u652f\ngit branch -d \u5206\u652f\u540d\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_11","title":"\u64a4\u9500\u64cd\u4f5c","text":"Bash<pre><code># \u64a4\u9500\u5de5\u4f5c\u533a\u7684\u4fee\u6539\ngit checkout -- \u6587\u4ef6\u540d\n\n# \u64a4\u9500\u6682\u5b58\u533a\u7684\u4fee\u6539\ngit reset HEAD \u6587\u4ef6\u540d\n\n# \u64a4\u9500\u6700\u8fd1\u4e00\u6b21\u63d0\u4ea4\uff08\u4fdd\u7559\u4fee\u6539\uff09\ngit reset --soft HEAD^\n\n# \u64a4\u9500\u6700\u8fd1\u4e00\u6b21\u63d0\u4ea4\uff08\u4e0d\u4fdd\u7559\u4fee\u6539\uff09\ngit reset --hard HEAD^\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/VSCode/index.html","title":"VScode","text":"<p>\u6765\u8c08\u8c08 VSCode \u4f7f\u7528\u6280\u5de7</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Yakit/index.html","title":"Yakit","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Yakit/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>Yakit \u662f\u7531 Yaklang \u56e2\u961f\u5f00\u53d1\u7684\u4e00\u6b3e\u9762\u5411\u5b89\u5168\u6d4b\u8bd5\u4eba\u5458\u7684 \u7f51\u7edc\u534f\u8bae\u52a8\u6001\u4ea4\u4e92\u5e73\u53f0\uff0c\u4e3b\u8981\u7528\u4e8e\u652f\u6301\u6f0f\u6d1e\u9a8c\u8bc1\u4e0e\u5229\u7528\u3002\u5b83\u7684\u76ee\u6807\u662f\u63d0\u9ad8\u7f51\u7edc\u534f\u8bae\u5c42\u9762\u7684\u6d4b\u8bd5\u6548\u7387\uff0c\u7279\u522b\u662f\u5728\u9762\u5bf9\u5404\u79cd\u5b9a\u5236\u534f\u8bae\u3001\u79c1\u6709\u534f\u8bae\u6216\u9700\u8981\u7cbe\u7ec6\u63a7\u5236\u62a5\u6587\u7684\u573a\u666f\u4e0b\u3002\u4e0e BurpSuite \u5f02\u66f2\u540c\u5de5\u4e4b\u5904</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Yakit/index.html#_2","title":"\u4e0b\u8f7d","text":"<p>\u5b98\u7f51: https://www.yaklang.com/</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html","title":"Markdown \u57fa\u672c\u8bed\u6cd5","text":"<p>Markdown \u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u6807\u8bb0\u8bed\u8a00\uff0c\u5e38\u7528\u4e8e\u7f16\u5199\u8bf4\u660e\u6587\u6863\u3001\u6280\u672f\u7b14\u8bb0\u3001\u535a\u5ba2\u7b49\u3002\u5b83\u8bed\u6cd5\u7b80\u6d01\u3001\u6613\u8bfb\u6613\u5199\uff0c\u9002\u5408\u5feb\u901f\u4e66\u5199\u7ed3\u6784\u5316\u5185\u5bb9\u3002</p> <p>\u6700\u65b9\u4fbf\u7684\u7f16\u8f91\u5668\u5c31\u662fvscode\uff0c\u65b0\u5efa\u4e2a <code>.md</code> \u6587\u4ef6\u5c31\u884c</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_1","title":"\u6807\u9898","text":"<p>\u4f7f\u7528 <code>#</code> \u8868\u793a\u6807\u9898\uff0c\u6700\u591a\u652f\u6301\u516d\u7ea7\u6807\u9898\u3002</p> Markdown<pre><code># \u4e00\u7ea7\u6807\u9898\n## \u4e8c\u7ea7\u6807\u9898\n### \u4e09\u7ea7\u6807\u9898\n#### \u56db\u7ea7\u6807\u9898\n##### \u4e94\u7ea7\u6807\u9898\n###### \u516d\u7ea7\u6807\u9898\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_2","title":"\u6bb5\u843d\u4e0e\u6362\u884c","text":"<p>\u6bb5\u843d\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002 \u884c\u672b\u52a0\u4e24\u4e2a\u7a7a\u683c\u53ef\u4ee5\u6362\u884c\u3002</p> Markdown<pre><code>\u8fd9\u662f\u7b2c\u4e00\u884c  \n\u8fd9\u662f\u7b2c\u4e8c\u884c\uff08\u901a\u8fc7\u4e24\u4e2a\u7a7a\u683c\u6362\u884c\uff09\n\n\u8fd9\u662f\u7b2c\u4e09\u884c\uff08\uff09\u901a\u8fc7\u7a7a\u884c\u5207\u6362\u6bb5\u843d\n</code></pre> <p>\u8fd9\u662f\u7b2c\u4e00\u884c \u8fd9\u662f\u7b2c\u4e8c\u884c\uff08\u901a\u8fc7\u4e24\u4e2a\u7a7a\u683c\u6362\u884c\uff09</p> <p>\u8fd9\u662f\u7b2c\u4e09\u884c\uff08\uff09\u901a\u8fc7\u7a7a\u884c\u5207\u6362\u6bb5\u843d</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_3","title":"\u5f3a\u8c03\uff08\u52a0\u7c97 / \u659c\u4f53\uff09","text":"Markdown<pre><code>*\u659c\u4f53* \u6216 _\u659c\u4f53_  \n**\u52a0\u7c97** \u6216 __\u52a0\u7c97__  \n***\u52a0\u7c97\u659c\u4f53***\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p>\u659c\u4f53 \u6216 \u659c\u4f53 \u52a0\u7c97 \u6216 \u52a0\u7c97 \u52a0\u7c97\u659c\u4f53</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_4","title":"\u5f15\u7528","text":"<p>Markdown<pre><code>&gt; \u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6bb5\u843d\n&gt;&gt; \u53ef\u4ee5\u5d4c\u5957\u5f15\u7528\n</code></pre> \u6548\u679c\uff1a</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6bb5\u843d</p> <p>\u53ef\u4ee5\u5d4c\u5957\u5f15\u7528</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_5","title":"\u4ee3\u7801\u5757","text":"<p>\u884c\u5185\u4ee3\u7801\uff1a</p> <p>Markdown<pre><code>\u4f7f\u7528\u5355\u5f15\u53f7`\u62ec\u4f4f\u4f60\u9700\u8981\u7684\u90e8\u5206`\n</code></pre> \u6548\u679c\uff1a</p> <p>\u4f7f\u7528\u5355\u5f15\u53f7<code>\u62ec\u4f4f\u4f60\u9700\u8981\u7684\u90e8\u5206</code></p> <p>\u591a\u884c\u4ee3\u7801\u5757\uff1a</p> <p>\u4f7f\u7528\u4e09\u4e2a\u53cd\u5f15\u53f7\u5305\u88f9\u4ee3\u7801\uff0c\u53ef\u4ee5\u6307\u5b9a\u8bed\u8a00\u9ad8\u4eae\u3002</p> <p>```py</p> <p>print(\"Hello, Markdown!\")</p> <p>```</p> Python<pre><code>print(\"Hello, Markdown!\")\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_6","title":"\u5217\u8868","text":"<p>\u65e0\u5e8f\u5217\u8868\uff0c\u8fd9\u4e09\u8005\u5747\u53ef\uff1a</p> Markdown<pre><code>- \u9879\u76eeA\n* \u9879\u76eeB\n+ \u9879\u76eeC\n</code></pre> <ul> <li>\u9879\u76eeA</li> <li>\u9879\u76eeB</li> <li>\u9879\u76eeC</li> </ul> <p>\u6709\u5e8f\u5217\u8868\uff1a</p> Markdown<pre><code>1. \u7b2c\u4e00\u9879\n2. \u7b2c\u4e8c\u9879\n3. \u7b2c\u4e09\u9879\n</code></pre> <ol> <li>\u7b2c\u4e00\u9879</li> <li>\u7b2c\u4e8c\u9879</li> <li>\u7b2c\u4e09\u9879</li> </ol>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_7","title":"\u5206\u5272\u7ebf","text":"<p>\u4f7f\u7528\u4e09\u4e2a\u6216\u4ee5\u4e0a\u7684 -\u3001* \u6216 _ \u4f5c\u4e3a\u5206\u9694\u7ebf\uff1a</p> Markdown<pre><code>---\n***\n___\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_8","title":"\u94fe\u63a5","text":"<p>\u884c\u5185\u5f0f\u94fe\u63a5\uff1a</p> Markdown<pre><code>[NISA-WIKI](https://fjnu-nisa.github.io/NISA-Wiki)\n</code></pre> <p>NISA-WIKI</p> <p>\u5e26\u6807\u9898\u94fe\u63a5\uff08\u9f20\u6807\u60ac\u6d6e\u63d0\u793a\uff09\uff1a</p> Markdown<pre><code>[NISA-WIKI](https://fjnu-nisa.github.io/NISA-Wiki \"\u8fd9\u662fNISA-WIKI\")\n</code></pre> <p>NISA-WIKI</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_9","title":"\u56fe\u7247","text":"<p>\u8bed\u6cd5\u7c7b\u4f3c\u94fe\u63a5\uff0c\u53ea\u662f\u5728\u524d\u9762\u52a0 !</p> Markdown<pre><code>![\u56fe\u7247\u63cf\u8ff0](https://example.com/image.png)\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_10","title":"\u8868\u683c","text":"Markdown<pre><code>| \u59d3\u540d | \u5b66\u53f7 | \u6210\u7ee9 |\n| :--: | :--: | ---: |\n| \u5f20\u4e09 | 1001 |  90  |\n| \u674e\u56db | 1002 |  85  |\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> \u59d3\u540d \u5b66\u53f7 \u6210\u7ee9 \u5f20\u4e09 1001 90 \u674e\u56db 1002 85 <p>\u8bf4\u660e\uff1a</p> <p>:--: \u8868\u793a\u5c45\u4e2d</p> <p>:-- \u8868\u793a\u5de6\u5bf9\u9f50</p> <p>--: \u8868\u793a\u53f3\u5bf9\u9f50</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_11","title":"\u4efb\u52a1\u5217\u8868","text":"Markdown<pre><code>- [x] \u5b8c\u6210CTF\u9898\u76ee\n- [ ] \u9605\u8bfb\u6e17\u900f\u6d4b\u8bd5\u6587\u6863\n- [ ] \u63d0\u4ea4\u6f0f\u6d1e\u62a5\u544a\n</code></pre> <p>\u6548\u679c\uff1a</p> <ul> <li>[x] \u5b8c\u6210CTF\u9898\u76ee</li> <li>[ ] \u9605\u8bfb\u6e17\u900f\u6d4b\u8bd5\u6587\u6863</li> <li>[ ] \u63d0\u4ea4\u6f0f\u6d1e\u62a5\u544a</li> </ul>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_12","title":"\u8f6c\u4e49\u5b57\u7b26","text":"<p>\u4ee5\u4e0b\u5b57\u7b26\u5982\u9700\u663e\u793a\u539f\u6837\uff0c\u9700\u8981\u52a0\u53cd\u659c\u6760  \u8fdb\u884c\u8f6c\u4e49\uff1a</p> Markdown<pre><code>\\* \\_ \\` \\# \\+ \\- \\. \\!\n</code></pre> <p>* _ ` # + - . !</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/Github%E5%AD%A6%E7%94%9F%E5%8C%85%E7%94%B3%E8%AF%B7%E6%8C%87%E5%8D%97.html","title":"Github\u5b66\u751f\u5305\u7533\u8bf7\u6307\u5357","text":"<p>Github\u5b66\u751f\u5305\u662f\u4ec0\u4e48?</p> <p>GitHub \u5b66\u751f\u5305\uff08GitHub Student Developer Pack\uff09\u662f GitHub \u9762\u5411\u5b66\u751f\u63d0\u4f9b\u7684\u4e00\u7cfb\u5217\u514d\u8d39\u5f00\u53d1\u5de5\u5177\u3001\u670d\u52a1\u548c\u8d44\u6e90\u5408\u96c6\u3002\u4f60\u53ef\u4ee5\u514d\u8d39\u6216\u5927\u5e45\u6298\u6263\u5730\u4f7f\u7528\u4e00\u4e9b\u672c\u6765\u9700\u8981\u4ed8\u8d39\u7684\u5f00\u53d1\u5de5\u5177\u548c\u670d\u52a1, \u5c31\u6bd4\u5982\u6ee1\u8840\u7248Copilot(\u5f3a\u5927\u7684\u4ee3\u7801\u8f85\u52a9AI), \u8fd8\u6709\u5c31\u662fAzure\u670d\u52a1\u5668(\u53ef\u4ee5\u62ff\u6765\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2, \u4ee3\u7406\u7b49)\u3002</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/Github%E5%AD%A6%E7%94%9F%E5%8C%85%E7%94%B3%E8%AF%B7%E6%8C%87%E5%8D%97.html#_1","title":"\u7533\u8bf7\u6307\u5357","text":"<p>\u5b66\u957f\u535a\u5ba2</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html","title":"\u535a\u5ba2&amp;\u77e5\u8bc6\u5e93\u642d\u5efa\u6307\u5357","text":"<p>\u5148\u5927\u81f4\u7ed9\u4e00\u4e2a\u6d41\u7a0b</p> <p>\u5e7f\u6cdb\u4e86\u89e3\u73b0\u6709\u7684\u535a\u5ba2&amp;\u77e5\u8bc6\u5e93\u6846\u67b6 -&gt; \u9009\u62e9\u81ea\u5df1\u4e2d\u610f\u7684\u6846\u67b6 -&gt; \u672c\u5730\u642d\u5efa\u73af\u5883 -&gt; \u90e8\u7f72\u4e91\u7aef\u73af\u5883 -&gt; \u7ef4\u62a4&amp;\u66f4\u65b0</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_2","title":"\u5e7f\u6cdb\u4e86\u89e3\u73b0\u6709\u7684\u535a\u5ba2&amp;\u77e5\u8bc6\u5e93\u6846\u67b6","text":""},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_3","title":"\u535a\u5ba2\u4e0e\u77e5\u8bc6\u5e93\u7684\u533a\u522b","text":"<p>\u535a\u5ba2\u66f4\u50cf\u662f\u201c\u4e2a\u4eba\u65e5\u8bb0+\u516c\u5f00\u6f14\u8bb2\u201d\u3002\u5b83\u901a\u5e38\u662f\u65f6\u95f4\u5e8f\u5217\u7684\u5185\u5bb9\uff0c\u6309\u7167\u53d1\u5e03\u65f6\u95f4\u6765\u7ec4\u7ec7\u3002\u5199\u535a\u5ba2\u65f6\uff0c\u4f5c\u8005\u5f80\u5f80\u5728\u8bb2\u6545\u4e8b\uff0c\u8868\u8fbe\u89c2\u70b9\uff0c\u5206\u4eab\u7ecf\u5386\uff0c\u5e26\u6709\u5f88\u5f3a\u7684\u201c\u6211\u201d\u7684\u8272\u5f69\u3002\u8bfb\u8005\u66f4\u50cf\u662f\u8ddf\u968f\u4f5c\u8005\u7684\u601d\u8def\u8d70\uff0c\u53bb\u611f\u53d7\u4ed6\u7684\u89c1\u89e3\u6216\u7ecf\u5386\u3002\u535a\u5ba2\u9002\u5408\u8bb0\u5f55\u8fc7\u7a0b\u3001\u5fc3\u5f97\u3001\u7075\u611f\uff0c\u4e5f\u6709\u5f88\u5f3a\u7684\u793e\u4ea4\u548c\u4f20\u64ad\u5c5e\u6027\u3002</p> <p>\u77e5\u8bc6\u5e93\u5219\u662f\u201c\u5de5\u5177\u4e66+\u8d44\u6599\u5ba4\u201d\u3002\u5b83\u7684\u76ee\u6807\u662f\u6c89\u6dc0\u3001\u6574\u7406\u3001\u5f52\u6863\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u548c\u77e5\u8bc6\u70b9\uff0c\u901a\u5e38\u6309\u7167\u4e3b\u9898\u6216\u7c7b\u522b\u7ec4\u7ec7\uff0c\u800c\u4e0d\u662f\u65f6\u95f4\u987a\u5e8f\u3002\u5b83\u66f4\u8bb2\u7a76\u7cfb\u7edf\u6027\u3001\u6761\u7406\u6027\u548c\u53ef\u68c0\u7d22\u6027\u3002\u8bfb\u8005\u8fdb\u77e5\u8bc6\u5e93\uff0c\u662f\u4e3a\u4e86\u5feb\u901f\u627e\u5230\u7b54\u6848\u6216\u83b7\u53d6\u67d0\u4e2a\u4e3b\u9898\u7684\u5b8c\u6574\u7406\u89e3\uff0c\u800c\u4e0d\u662f\u8ddf\u7740\u65f6\u95f4\u7ebf\u53bb\u4f53\u9a8c\u4f5c\u8005\u7684\u601d\u8def\u3002</p> <p>\u4e0d\u8fc7\u4e5f\u4e0d\u5fc5\u533a\u5206\u5f88\u6e05\u695a, \u53ea\u8981\u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u53bb\u5199\u5c31\u597d\u4e86, \u4e0d\u8fc7\u5404\u4e2a\u6846\u67b6\u503e\u5411\u4e0d\u540c</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_4","title":"\u9009\u62e9\u6846\u67b6\u53ef\u80fd\u9700\u8981\u8003\u8651\u7684\u70b9","text":""},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_5","title":"\u8f6f\u4ef6\u662f\u5426\u5f00\u6e90","text":"<p>\u5f00\u6e90\u6307\u7684\u662f\u8f6f\u4ef6\u7684\u6e90\u7801\u662f\u5426\u516c\u5f00, \u9009\u62e9\u5f00\u6e90\u8f6f\u4ef6\u7684\u539f\u56e0\u6709\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762:</p> <ul> <li>\u65b9\u4fbf\u4ee3\u7801\u5ba1\u8ba1, \u9632\u6b62\u540e\u95e8\u4ee3\u7801\u7b49</li> <li>\u5982\u679c\u5f00\u53d1\u8005\u505c\u6b62\u7ef4\u62a4, \u4f9d\u65e7\u53ef\u4ee5\u901a\u8fc7\u793e\u533a\u7ee7\u7eed\u66f4\u65b0\u8f6f\u4ef6</li> <li>\u81ea\u5df1\u53ef\u4ee5\u589e\u52a0\u65b0\u7684\u529f\u80fd</li> </ul>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_6","title":"\u6570\u636e\u5b58\u50a8\u4f4d\u7f6e","text":"<ul> <li>\u4e91\u7aef\u5b58\u50a8(\u8fd9\u91cc\u6307\u7684\u662f\u50cf\u8bed\u96c0\u3001\u98de\u4e66\u7b49\u6570\u636e\u76f4\u63a5\u5199\u5728\u4e91\u7aef\u7684\u7b14\u8bb0)\u867d\u7136\u65b9\u4fbf, \u4f46\u662f\u65e0\u6cd5\u4fdd\u8bc1\u6570\u636e\u5b89\u5168(\u800c\u4e14\u8fd8\u8981\u8003\u8651\u662f\u5426\u8fdb\u884c\u7aef\u5230\u7aef\u52a0\u5bc6, \u6d89\u53ca\u9690\u79c1\u4fe1\u606f\u4e0d\u65b9\u4fbf\u516c\u5f00), \u5e76\u4e14\u9700\u8981\u8003\u8651\u5b58\u50a8\u63d0\u4f9b\u5546\u4e0d\u5728\u63d0\u4f9b\u670d\u52a1\u540e\u6570\u636e\u662f\u5426\u53ef\u4ee5\u4fdd\u7559</li> <li>\u672c\u5730\u5b58\u50a8(\u6307\u7684\u662f\u5411 Logseq\u3001Obsidian \u7b49\u4f9d\u9760\u672c\u5730\u6587\u4ef6\u5b58\u50a8\u7684)\u867d\u7136\u8981\u81ea\u5df1\u8003\u8651\u6570\u636e\u5b58\u653e\u5b89\u5168, \u4f46\u662f\u66f4\u52a0\u81ea\u4e3b\u53ef\u63a7, \u600e\u4e48\u52a0\u5bc6, \u600e\u4e48\u5b58\u50a8\u4f9d\u9760\u81ea\u5df1\u51b3\u5b9a</li> </ul>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_7","title":"\u53d1\u5e03\u65b9\u5f0f","text":"<ul> <li>\u9759\u6001\u9875\u9762\u53d1\u5e03(\u6307\u628a\u7eaf\u9759\u6001\u6587\u4ef6\uff08HTML\u3001CSS\u3001JS\u3001\u56fe\u7247\u7b49\uff09\u653e\u5230\u4e00\u4e2a Web \u670d\u52a1\u5668\u6216\u8005 CDN \u4e0a\uff0c\u670d\u52a1\u5668\u53ea\u8d1f\u8d23\u539f\u5c01\u4e0d\u52a8\u5730\u4f20\u6587\u4ef6\u7ed9\u7528\u6237)<ul> <li>\u8fd9\u4e2a\u65b9\u5f0f\u7684\u53d1\u5e03\u6210\u672c\u8f83\u4f4e, \u6709\u5f88\u591a\u652f\u6301\u514d\u8d39\u6302\u8f7d\u9759\u6001\u9875\u9762\u7684\u670d\u52a1, \u6bd4\u5982 GithubPage</li> </ul> </li> <li>\u52a8\u6001\u5e94\u7528\u90e8\u7f72(\u670d\u52a1\u7aef\u76f8\u5bf9\u52a8\u6001\u7684\u751f\u6210\u6570\u636e\u63d0\u4f9b\u7ed9\u524d\u7aef)<ul> <li>\u8fd9\u4e2a\u65b9\u5f0f\u4e00\u822c\u8d44\u91d1\u8d2d\u4e70\u81ea\u5df1\u7684\u670d\u52a1\u5668(\u4e5f\u53ef\u4ee5\u5145\u5206\u5229\u7528\u5404\u4e2a\u5e73\u53f0\u5b66\u751f\u798f\u5229), \u800c\u4e14\u7ef4\u62a4\u670d\u52a1\u5668\u4e5f\u9700\u8981\u4e00\u5b9a\u662f\u6280\u672f\u6210\u672c</li> </ul> </li> <li>\u7b2c\u4e09\u65b9\u63d0\u4f9b\u670d\u52a1<ul> <li>\u6bd4\u5982\u50cf CSDN, \u5fae\u4fe1\u516c\u4f17\u53f7\u8fd9\u79cd\u76f4\u63a5\u63d0\u4f9b\u5e73\u53f0</li> <li>\u4e5f\u6709\u50cf Obsidian \u8fd9\u79cd\u65e2\u6709\u7b2c\u4e09\u65b9\u53d1\u5e03\u4e5f\u6709\u5b98\u65b9\u76f4\u63a5\u63d0\u4f9b\u7684\u53d1\u5e03\u670d\u52a1(\u4e0d\u8fc7\u8981\u5145\u4f1a\u5458\u5c31\u662f\u4e86)</li> </ul> </li> </ul>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_8","title":"\u7b49\u7b49","text":"<p>\u518d\u8005\u5c31\u662f UI \u81ea\u5b9a\u4e49\u7a0b\u5ea6, \u4e3b\u9898\u662f\u5426\u4e30\u5bcc, \u652f\u6301\u8bed\u6cd5\u683c\u5f0f, \u662f\u5426\u53ef\u4ee5\u591a\u7aef\u540c\u6b65, \u662f\u5426\u53ef\u4ee5\u591a\u4eba\u534f\u4f5c...</p> <p>\u8fd9\u4e9b\u5c31\u9760\u81ea\u5df1\u53bb\u8003\u8651\u4e86</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_9","title":"\u7f57\u5217\u51e0\u4e2a\u7b14\u8bb0&amp;\u77e5\u8bc6\u5e93\u6846\u67b6(\u8f6f\u4ef6)","text":"<p>\u4e0b\u9762\u6392\u540d\u6ca1\u6709\u5148\u540e, \u7eaf\u7cb9\u60f3\u5230\u4ec0\u4e48\u5199\u4ec0\u4e48, \u4f18\u7f3a\u70b9\u6b22\u8fce\u8865\u5145\u63d0\u51fa</p> <ul> <li>Logseq<ul> <li>\u4f18\u70b9: \u672c\u5730\u4f18\u5148, \u5757\u6846\u67b6\u5e03\u5c40\u5206\u660e, \u53cc\u94fe\u7b14\u8bb0</li> <li>\u7f3a\u70b9: \u53d1\u5e03 UI \u6781\u5176\u5355\u4e00, \u53d1\u5e03\u914d\u7f6e\u6781\u5176\u590d\u6742</li> </ul> </li> <li>Notion<ul> <li>\u4f18\u70b9: \u529f\u80fd\u6781\u5176\u4e30\u5bcc, \u53cc\u94fe\u7b14\u8bb0</li> <li>\u7f3a\u70b9: \u672c\u5730\u5b58\u50a8\u529f\u80fd\u8fd8\u6ca1\u63a8\u51fa(\u56fd\u5185\u8bbf\u95ee\u4e0d\u662f\u5f88\u53cb\u597d)</li> </ul> </li> <li>Obsidian<ul> <li>\u4f18\u70b9: \u672c\u5730\u4f18\u5148, \u5757\u6846\u67b6\u5e03\u5c40\u5206\u660e, \u53cc\u94fe\u7b14\u8bb0</li> <li>\u7f3a\u70b9: \u4f9d\u65e7\u662f\u53d1\u5e03\u529f\u80fd\u4e5f\u8f83\u4e3a\u590d\u6742</li> </ul> </li> <li>Hexo<ul> <li>\u4f18\u70b9: UI\u81ea\u5b9a\u4e49\u9ad8, \u4e3b\u9898\u4e30\u5bcc, \u63d2\u4ef6\u7cfb\u7edf\u652f\u6301 RSS\u3001SEO\u3001\u5206\u7c7b\u7b49\u529f\u80fd</li> <li>\u7f3a\u70b9: \u7f3a\u4e4f\u5757\u7ea7/\u53cc\u94fe\u652f\u6301</li> </ul> </li> <li>Hugo<ul> <li>\u4f18\u70b9: \u4e3b\u9898\u4e30\u5bcc, \u652f\u6301\u591a\u8bed\u8a00\u3001\u5185\u5bb9\u5206\u7c7b\u3001\u6807\u7b7e\u7cfb\u7edf\u7b49</li> <li>\u7f3a\u70b9: \u7f3a\u4e4f\u5757\u7ea7/\u53cc\u94fe\u652f\u6301, \u4f7f\u7528 Go Template\uff0c\u521d\u5b66\u8005\u53ef\u80fd\u9700\u65f6\u95f4\u9002\u5e94</li> </ul> </li> </ul> <p>\u8fd9\u4e9b\u4e5f\u53ea\u4e0d\u8fc7\u662f\u51b0\u5c71\u4e00\u89d2, \u63a8\u8350\u5927\u5bb6\u53bb\u7f51\u4e0a\u627e\u66f4\u8be6\u7ec6\u7684\u535a\u5ba2&amp;\u77e5\u8bc6\u5e93\u5bf9\u6bd4\u6d4b\u8bc4</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_10","title":"\u9009\u62e9\u81ea\u5df1\u4e2d\u610f\u7684\u6846\u67b6","text":"<p>\u4f60\u4e5f\u4e0d\u60f3\u81ea\u5df1\u5199\u4e86\u597d\u4e45\u7684\u7b14\u8bb0, \u56e0\u4e3a\u8981\u6362\u6846\u67b6\u800c\u4e22\u5f03\u5427</p> <p>\u6216\u8005\u5728\u4e24\u4e2a\u6846\u67b6\u76f4\u63a5\u642c\u7b14\u8bb0\u800c\u75db\u82e6\u5427(\u5927\u90e8\u5206\u6846\u67b6\u4e4b\u95f4\u662f\u95ed\u585e\u7684, \u751a\u81f3\u6709\u7684\u4e0d\u652f\u6301\u6279\u91cf\u5bfc\u51fa)</p> <p>\u6240\u4ee5\u9009\u4e00\u4e2a\u81ea\u5df1\u559c\u6b22\u7684\u6846\u67b6, \u662f\u4e00\u76f4\u4f7f\u7528\u4e0b\u53bb\u7684\u5173\u952e</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_11","title":"\u672c\u5730\u642d\u5efa\u73af\u5883","text":"<p>\u9009\u597d\u4e86\u6846\u67b6\u5c31\u662f\u8981\u642d\u5efa\u672c\u5730\u7684\u5199\u4f5c\u73af\u5883, \u8bb8\u591a\u6846\u67b6\u90fd\u662f\u6709\u96c6\u6210\u597d\u8f6f\u4ef6\u7684, \u57fa\u672c\u5c31\u662f\u5b89\u88c5\u5373\u7528</p> <p>\u4f46\u662f\u60f3 Hugo \u7b49\u6846\u67b6, \u53ea\u662f\u628a Web \u53d1\u5e03\u7aef\u7684\u751f\u6210\u5de5\u5177, \u672c\u8d28\u4e0a\u5b58\u50a8\u7684\u662f Markdwon \u683c\u5f0f\u7684\u6587\u672c\u6587\u4ef6, \u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u5148\u642d\u5efa\u597d\u672c\u5730\u7684\u751f\u6210\u6846\u67b6\u4e86, \u5bf9\u4e8e\u8fd9\u79cd\u6846\u67b6, \u4e00\u822c\u9700\u8981\u4e00\u4e2a Markdown \u6587\u4ef6\u7684\u7f16\u8f91\u5668(\u53ef\u4ee5\u662f\u8bb0\u4e8b\u672c, \u4e5f\u53ef\u4ee5\u662fVScode(\u63a8\u8350), \u6216\u8005\u662f\u5176\u4ed6), \u56e0\u4e3a\u6846\u67b6\u672c\u8eab\u5e76\u4e0d\u63d0\u4f9b\u7f16\u8f91\u5668</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_12","title":"\u90e8\u7f72\u4e91\u7aef\u73af\u5883","text":"<p>\u8fd9\u91cc\u4ec5\u4ec5\u8c08\u8bba\u7684\u662f\u81ea\u5df1\u90e8\u7f72\u4e91\u7aef\u53d1\u5e03\u9875, \u5982\u679c\u662f\u5b98\u65b9\u96c6\u6210\u7684, \u81ea\u5df1\u6839\u672c\u4e0d\u7528\u8003\u8651\u4e86</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_13","title":"\u5bf9\u4e8e\u5177\u6709\u9759\u6001\u9875\u9762\u90e8\u7f72","text":"<p>\u9759\u6001\u90e8\u7f72\u4e5f\u6709\u4e24\u79cd\u65b9\u6cd5</p> <ul> <li>\u672c\u5730\u751f\u6210\u53d1\u5e03\u9875\u4e0a\u4f20\u4e91\u7aef<ul> <li>\u5c06\u672c\u5730\u6e90\u6587\u4ef6\u901a\u8fc7\u53d1\u5e03\u9875\u751f\u6210\u7a0b\u5e8f\u751f\u6210\u9759\u6001\u7684Web\u53d1\u5e03\u9875, \u7136\u540e\u518d\u4e0a\u4f20\u5230\u6258\u7ba1\u5e73\u53f0\u4e0a</li> <li>\u8fd9\u6837\u7684\u597d\u5904\u662f\u65b9\u4fbf\u7ba1\u7406\u54ea\u4e9b\u5185\u5bb9\u4e0d\u4e0a\u4f20\u4e91\u7aef</li> <li>\u4f46\u662f\u5f53\u5185\u5bb9\u591a\u4e86\u4e4b\u540e, \u672c\u5730\u751f\u6210\u7684\u65f6\u95f4\u4e5f\u662f\u633a\u957f\u7684(\u5176\u5b9e\u4e5f\u6ca1\u5f88\u957f, 1-10\u5206\u800c\u5df2)</li> </ul> </li> <li>\u6e90\u6587\u4ef6\u4e0a\u4f20\u4e91\u7aef\u751f\u6210<ul> <li>\u76f4\u63a5\u628a\u539f\u672c\u7684\u6587\u672c\u6587\u4ef6\u4f20\u5165\u6258\u7ba1\u5e73\u53f0, \u5728\u6258\u7ba1\u5e73\u53f0\u751f\u6210Web\u53d1\u5e03\u9875, \u6bd4\u5982 Github Action \u5c31\u652f\u6301\u5927\u90e8\u5206\u6846\u67b6\u7684\u751f\u6210\u53d1\u5e03\u9875</li> <li>\u4f46\u662f\u4e5f\u5c31\u4f34\u968f\u7740\u539f\u6587\u672c\u6587\u4ef6\u7684\u4e0a\u4f20\u4e0e\u516c\u5f00, \u6709\u65f6\u5019\u4ec0\u4e48\u90fd\u516c\u5f00\u4e0d\u662f\u597d\u4e8b\u60c5</li> </ul> </li> </ul>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_14","title":"\u5bf9\u4e8e\u52a8\u6001\u5e94\u7528\u90e8\u7f72","text":"<p>\u8fd9\u4e2a\u6d89\u53ca\u5185\u5bb9\u8f83\u591a, \u5148\u4e0d\u8be6\u7ec6\u4ecb\u7ecd</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%8D%9A%E5%AE%A2%26%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html#_15","title":"\u7ef4\u62a4&amp;\u66f4\u65b0","text":"<p>\u8bb8\u591a\u6846\u67b6\u4e00\u822c\u90fd\u662f\u4f1a\u66f4\u65b0\u7684, \u800c\u4e14\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d, \u53ef\u80fd\u4e5f\u4f1a\u9047\u5230\u60f3\u65b0\u589e\u7684\u529f\u80fd, \u60f3\u4fee\u6539\u7684\u4e3b\u9898, \u6240\u4ee5\u7ef4\u62a4\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684</p> <p>\u5f53\u7136, \u8bb0\u5f97\u4fdd\u6301\u4e00\u4e2a\u6d3b\u8dc3\u7684\u66f4\u65b0\u9891\u7387, \u535a\u5ba2&amp;\u77e5\u8bc6\u5e93\u4e5f\u53ef\u4ee5\u8fd8\u7b97\u662f\u81ea\u5df1\u7684\u6570\u5b57\u8d22\u5bcc\u4e86</p>"},{"location":"02-WEB/index.html","title":"WEB \u5b89\u5168","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/CSRF%E6%94%BB%E5%87%BB/index.html","title":"CSRF\u653b\u51fb","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/SQL%E6%B3%A8%E5%85%A5/index.html","title":"SQL\u6ce8\u5165","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/SSRF%E6%BC%8F%E6%B4%9E/index.html","title":"SSRF\u6f0f\u6d1e","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/index.html","title":"SSTI\u6a21\u677f\u6ce8\u5165","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/XSS%E6%94%BB%E5%87%BB/index.html","title":"XSS\u653b\u51fb","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/XXE%E6%BC%8F%E6%B4%9E/index.html","title":"XXE\u6f0f\u6d1e","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/index.html","title":"\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/index.html","title":"\u6587\u4ef6\u4e0a\u4f20","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/index.html","title":"\u6587\u4ef6\u5305\u542b","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"03-MISC/index.html","title":"MISC-\u6742\u9879","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"04-CRYPTO/index.html","title":"CRYPTO-\u5bc6\u7801\u5b66","text":"<p>\u5bc6\u7801\u5b66\u5728CTF\u4e94\u5927\u65b9\u5411\u4e2d\uff0c\u53ef\u8c13\u662f\u6700\u6df1\u6700\u96be\u7684\u65b9\u5411\uff0c\u60f3\u8981\u5728\u5168\u56fd\u6bd4\u8d5b\u5f97\u5230\u4e00\u5b9a\u7684\u6210\u7ee9\uff0c\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\u53bb\u5b66\u4e60\u7406\u8bba\u77e5\u8bc6\u548c\u8fdb\u884c\u4ee3\u7801\u8bad\u7ec3\u3002\u5c3d\u7ba1\u5f53\u4eca\u5f88\u591a\u4ee3\u7801\u90fd\u53ef\u4ee5\u501f\u52a9AI\u53bb\u5b9e\u73b0\uff0c\u4f46\u5fc5\u8981\u7684\u7ec3\u4e60\u662f\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>\u672cWiki\u4ec5\u4f9b\u8bfb\u8005\u4f5c\u4e3a\u5b66\u4e60\u53c2\u8003\uff0c\u5b66\u4e60\u518d\u591a\u7406\u8bba\u77e5\u8bc6\u4e5f\u4e0d\u5982\u8fdb\u5165NSSCTF\u6216\u8005BUUCTF\u5237\u51e0\u5341\u9898\uff0c\u6216\u8005\u76f4\u63a5\u53c2\u52a0\u51e0\u573a\u6bd4\u8d5b\u5e76\u8fdb\u884c\u8d5b\u540e\u590d\u76d8\u8865\u9898\uff1b\u76f8\u4fe1\u7ecf\u8fc7\u51e0\u4e2a\u6708\u751a\u81f3\u534a\u5e74\u7684\u5b66\u4e60\uff0c\u4f60\u5c06\u4f1a\u7a81\u98de\u731b\u8fdb</p> <p>\u5982\u679c\u4f60\u672a\u6765\u60f3\u4ece\u4e8b\u5bc6\u7801\u5b66\u76f8\u5173\u4e13\u4e1a\u7684\u5de5\u4f5c\uff0c\u8bfb\u535a\u662f\u5f88\u96be\u907f\u514d\u7684\uff1b\u4f46\u540c\u6837\u7684\uff0c\u5982\u679c\u4f60\u6709\u5174\u8da3\u8bfb\u7814\u751a\u81f3\u8bfb\u535a\uff0c\u5bc6\u7801\u5b66\u5c06\u4f1a\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u9009\u62e9\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\u901a\u8fc7CTF\u7ade\u8d5b\u4e86\u89e3\u5e76\u719f\u6089\u5bc6\u7801\u5b66\uff0c\u5c06\u6765\u4ece\u4e8b\u5bc6\u7801\u5b66\u76f8\u5173\u79d1\u7814\u5de5\u4f5c\u5c06\u4f1a\u76f8\u5bf9\u7545\u901a\u65e0\u963b\uff0c\u5e76\u4e14\u5c55\u73b0\u51fa\u5bc6\u7801\u5b66\u666e\u901a\u7814\u7a76\u751f\u96be\u4ee5\u6bd4\u62df\u7684\u4ee3\u7801\u80fd\u529b\uff1b\u5e08\u5927\u7684\u7f51\u5b89\u4e13\u4e1a\u5168\u7701\u7b2c\u4e00\u540d\u6bcb\u5eb8\u7f6e\u7591\uff0c\u5728\u8fd9\u91cc\u4ece\u4e8b\u5bc6\u7801\u5b66\u5b66\u4e60\u548c\u79d1\u7814\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u786e\u5b9e\u662f\u66f4\u9ad8\u7ea7\u522b\u7684\u5e73\u53f0\u3002\u4f46\u662f\u7f51\u5b89\u534f\u4f1a\u7684\u5bc6\u7801\u5b66\uff0c\u5168\u51ed\u81ea\u5b66~</p> <p>\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u76f8\u4e92\u6c9f\u901a\u4ea4\u6d41\uff0c\u4f46\u662f\u5185\u9a71\u529b\u662f\u76f8\u5f53\u91cd\u8981\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u52a0\u6cb9\u5427\uff01</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/index.html","title":"\u5bc6\u7801\u5b66\u5927\u81f4\u5b66\u4e9b\u4ec0\u4e48","text":"<p>\u8d70\u8fc7\u8def\u8fc7\u4e0d\u8981\u9519\u8fc7\uff0c\u6a59\u5473\u5bc6\u7801\u5b66\u7cd5\u5b88\u7684\u7b2c\u4e00\u6b65\u662f\u77e5\u9053\u5b83\u5b66\u4ec0\u4e48\uff0c\u8fd9\u6837\u624d\u80fd\u628a\u57fa\u7840\u638c\u63e1\u55bd\uff0c\u7136\u540e\u4e0d\u65ad\u5b66\u4e60\u65b0\u77e5\u8bc6\u5e76\u7ec3\u4e60\uff0c\u6700\u7ec8\u6a59\u5473\u7cd5\u5b88</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html","title":"\u5bc6\u7801\u5b66\u901a\u7528\u57fa\u7840","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html#_2","title":"\u53e4\u5178\u5bc6\u7801","text":"<p>\u51ef\u6492\u5bc6\u7801</p> <p>\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801</p> <p>\u6805\u680f\u5bc6\u7801</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html#_3","title":"\u6570\u5b66\u57fa\u7840","text":"<p>\u6570\u8bba\uff08\u6a21\u8fd0\u7b97\u3001\u6b27\u62c9\u51fd\u6570\u3001\u8d28\u56e0\u6570\u5206\u89e3\uff09</p> <p>\u4ee3\u6570\uff08\u7fa4\u3001\u73af\u3001\u57df\u7684\u57fa\u672c\u6982\u5ff5\uff09</p> <p>\u6982\u7387\u8bba\uff08\u968f\u673a\u6027\u5206\u6790\u3001\u671f\u671b\u4e0e\u65b9\u5dee\uff09</p> <p>\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\uff08P\u7c7b\u3001NP\u7c7b\u3001NP\u5b8c\u5168\u95ee\u9898\uff09</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html#_4","title":"\u540e\u91cf\u5b50\u5bc6\u7801\u5b66\u524d\u7f6e\u77e5\u8bc6","text":"<p>\u91cf\u5b50\u8ba1\u7b97\u673a\u8ba1\u7b97\u539f\u7406</p> <p>\u521d\u6b65\u5b66\u4e60\u683c\u95ee\u9898\uff08Lattice Problem\uff09</p> <p>\u77e9\u9635\u8bba\u57fa\u7840</p> <p>\u521d\u6b65\u5b66\u4e60\u5b66\u4e60\u5177\u6709\u8bef\u5dee\uff08LWE\uff09\u95ee\u9898</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html","title":"CTF\u4e2d\u7684\u5bc6\u7801\u5b66","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_1","title":"\u73b0\u4ee3\u5bc6\u7801\u5b66\u524d\u7f6e\u77e5\u8bc6","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_2","title":"\u5e38\u7528\u5de5\u5177","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_3","title":"\u901a\u7528\u5de5\u5177","text":"<p>CyberChef</p> <p>Hashcat</p> <p>John the Ripper</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#sage","title":"sage","text":"<p>\u4ee3\u6570\u8fd0\u7b97\u3001\u56e0\u6570\u5206\u89e3\u3001\u692d\u5706\u66f2\u7ebf\u8ba1\u7b97</p> <p>\u7b97\u529b\u4e00\u822c\u4f4e\u4e8e\u5728\u7ebf\u7f51\u7ad9 factordb</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#python","title":"python","text":"<p>\u6700\u5e38\u7528\u7684\u5de5\u5177\uff0c\u4e5f\u6700\u5177\u6709\u666e\u9002\u6027</p> <p>\u5e38\u7528\u51fd\u6570\u5e93\uff1a</p> <ul> <li><code>math</code>\uff1a\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\u3002</li> <li><code>random</code> \u548c <code>secrets</code>\uff1a\u968f\u673a\u6570\u751f\u6210\u3002</li> <li><code>hashlib</code>\uff1a\u8ba1\u7b97\u6563\u5217\u503c\u3002</li> <li><code>pycryptodome</code>\uff1a\u5b9e\u73b0\u5bf9\u79f0\u52a0\u5bc6\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002</li> <li><code>gmpy2</code>\uff1a</li> </ul>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#yafu","title":"yafu","text":"<p>\u57fa\u4e8epython\u7684\u5de5\u5177\uff0c\u5e38\u7528\u6765\u5728\u6574\u6570\u57df\u5185\u8fdb\u884c</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#chatgpt","title":"chatgpt","text":"<p>\u7528\u4e8e\u8f85\u52a9\u4f5c\u7528\uff0c\u800c\u975e\u76f4\u63a5\u53c2\u4e0e\u5bc6\u7801\u5b66\u6838\u5fc3\u8ba1\u7b97</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_4","title":"\u7f16\u7801\u4e0e\u8f6c\u6362","text":"<p>Base64</p> <p>URL\u7f16\u7801</p> <p>Hex\u7f16\u7801</p> <p>\u76f8\u5173\u5de5\u5177</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_5","title":"\u968f\u673a\u6570\u4e0e\u4f2a\u968f\u673a\u6570","text":"<p>\u968f\u673a\u6570\u751f\u6210\u539f\u7406\u4e0e\u4f2a\u968f\u673a\u6570\u9884\u6d4b</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_6","title":"\u5bf9\u79f0\u52a0\u5bc6","text":"<p>\u4f7f\u7528\u76f8\u540c\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\u548c\u89e3\u5bc6</p> <p>\u4f18\u70b9\uff1a\u9ad8\u6548\u5feb\u901f\uff0c\u9002\u5408\u5904\u7406\u5927\u6570\u636e</p> <p>\u7f3a\u70b9\uff1a\u5bc6\u94a5\u7ba1\u7406\u56f0\u96be</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#aes","title":"AES\uff08\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6\uff09","text":"<p>\u52a0\u5bc6\u6a21\u5f0f\uff1aECB\u3001CBC\u3001CFB\u3001OFB\u3001GCM</p> <p>\u5206\u7ec4\u957f\u5ea6\u56fa\u5b9a\u4e3a128\u4f4d\uff0c\u5bc6\u94a5\u957f\u5ea6\u4e3a128\u3001192\u3001256\u4f4d</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#des","title":"DES\uff08\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff09","text":"<p>\u5206\u7ec4\u957f\u5ea6\u4e3a64\u4f4d\uff0c\u5bc6\u94a5\u957f\u5ea6\u4e3a56\u4f4d</p> <p>\u5b89\u5168\u6027\u4e0d\u8db3\uff0c\u6613\u53d7\u66b4\u529b\u7834\u89e3\uff0c\u5e38\u7528\u4e8e\u5386\u53f2\u9057\u7559\u7cfb\u7edf</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#3des","title":"3DES\uff08\u4e09\u91cd\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff09","text":"<p>\u4f7f\u7528\u4e09\u4e2a\u4e0d\u540c\u7684DES\u5bc6\u94a5\uff0c\u63d0\u9ad8\u5b89\u5168\u6027\uff1b\u4f46\u6027\u80fd\u8f83\u5dee</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#blowfish","title":"Blowfish","text":"<p>\u5206\u7ec4\u957f\u5ea6\u4e3a64\u4f4d\uff0c\u5bc6\u94a5\u957f\u5ea61-448\u4f4d\uff0c\u901f\u5ea6\u5feb\u4e14\u7075\u6d3b</p> <p>\u5e38\u7528\u4e8e\u5bc6\u7801\u4fdd\u62a4\u5de5\u5177\u3002</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_7","title":"\u975e\u5bf9\u79f0\u52a0\u5bc6","text":"<p>\u4e00\u5bf9\u5bc6\u94a5\uff0c\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6\u3002</p> <p>\u4f18\u70b9\uff1a\u5bc6\u94a5\u5206\u53d1\u7b80\u5355</p> <p>\u7f3a\u70b9\uff1a\u8ba1\u7b97\u6548\u7387\u8f83\u4f4e</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_8","title":"\u7b97\u6cd5","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsarivestshamiradleman","title":"RSA\uff08Rivest\u2013Shamir\u2013Adleman\uff09","text":"<p>\u57fa\u4e8e\u7684\u6570\u5b66\u56f0\u96be\u95ee\u9898\uff1a\u57fa\u4e8e\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u56f0\u96be\u6027</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#ecc","title":"ECC\uff08\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u5b66\uff09","text":"<p>\u57fa\u4e8e\u7684\u6570\u5b66\u56f0\u96be\u95ee\u9898\uff1a\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\uff08ECDLP\uff09</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#elgamal","title":"ElGamal","text":"<p>\u7531DH\uff08Diffie-Hellman\u5bc6\u94a5\u4ea4\u6362\uff09\u4ea7\u751f\u7684\u52a0\u5bc6\u7b97\u6cd5</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_9","title":"\u5e38\u89c1\u653b\u51fb","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsa-","title":"RSA-\u76f4\u63a5\u5206\u89e3","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsa-_1","title":"RSA-\u4f4e\u5bc6\u5ea6\u6307\u6570\u653b\u51fb","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsa-_2","title":"RSA-\u7ef4\u7eb3\u653b\u51fb","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_10","title":"\u6563\u5217\u5bc6\u7801","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_11","title":"\u524d\u7f6e\u77e5\u8bc6","text":"<p>\u6297\u78b0\u649e\u5b89\u5168\u6027\u548c\u4e0d\u53ef\u9006\u5b89\u5168\u6027</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_12","title":"\u5177\u4f53\u7b97\u6cd5","text":"<p>MD5</p> <p>SHA\u7cfb\u5217</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_13","title":"\u78b0\u649e\u4e0e\u7834\u89e3","text":"<p>\u751f\u65e5\u653b\u51fb\u3001\u5f69\u8679\u8868</p> <p>\u5de5\u5177\u4e0e\u811a\u672c\u5b9e\u73b0</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_14","title":"\u540e\u91cf\u5b50\u5bc6\u7801\u5b66","text":"<p>\u80cc\u666f\uff1a\u91cf\u5b50\u8ba1\u7b97\u5bf9\u4f20\u7edf\u52a0\u5bc6\u7b97\u6cd5\u7684\u5a01\u80c1</p> <p>\u57fa\u4e8e\u683c\u7684\u5bc6\u7801\u5b66\uff08\u5982NTRU\u3001LWE\uff09</p> <p>\u54c8\u5e0c\u7b7e\u540d\u65b9\u6848</p> <p>\u4ee3\u7801\u5bc6\u7801\u5b66</p> <ol> <li> <ul> <li>\u5e38\u7528\u89e3\u5bc6\u5de5\u5177\uff08\u5982CyberChef\u3001Hashcat\u3001John the Ripper\u7b49\uff09</li> </ul> </li> <li>\u7f16\u5199\u81ea\u5df1\u7684\u811a\u672c\uff08Python\u4e0e\u5e38\u7528\u5bc6\u7801\u5e93\uff09</li> <li>\u81ea\u52a8\u5316\u811a\u672c\u5316\u7834\u89e3\u65b9\u6cd5</li> <li>\u6848\u4f8b\u5206\u6790</li> <li>\u56fd\u5185\u5916\u7ecf\u5178CTF\u6bd4\u8d5b\u7684\u5bc6\u7801\u5b66\u9898\u76ee\u89e3\u6790</li> <li>\u89e3\u9898\u6d41\u7a0b\u4e0e\u601d\u7ef4\u5206\u4eab</li> </ol>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html","title":"\u5bc6\u7801\u5b66\u79d1\u7814\u65b9\u5411","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_2","title":"\u5165\u95e8\u8def\u5f84","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_3","title":"\u57fa\u7840\u77e5\u8bc6","text":"<p>\u79d1\u666e\u4e66\u7c4d\u300a\u6570\u5b57\u7b7e\u540d\u5bc6\u53f2 \u4ece\u6025\u9700\u5230\u6709\u8da3\u300b\u90ed\u798f\u6625</p> <p>\u5165\u95e8\u4e66\u7c4d\u300aModern Cryptography: Theory and Practice\u300bMao Wenbo \u6216\u5176\u4e2d\u6587\u7248</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_4","title":"\u5b89\u5168\u89c4\u7ea6","text":"<p>\u5165\u95e8\u4e66\u7c4d\u300aIntroduction to Security Reduction\u300bFuchun Guo \u6216\u5176\u4e2d\u6587\u7248</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#30","title":"\u516c\u94a5\u5bc6\u780130\u7bc7","text":"<p>\u5f3a\u70c8\u63a8\u8350\u300a\u516c\u94a5\u5bc6\u7801\u65b9\u6848\u6784\u9020\u53ca\u5b89\u5168\u8bc1\u660e\u7684\u77e5\u8bc6\u8981\u70b9\u548c\u65b9\u6cd5\u8bba\u300b\u8d75\u81fb  </p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_5","title":"\u5e38\u7528\u8d44\u6e90","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_6","title":"\u8bba\u6587\u68c0\u7d22","text":"<p>\u8c37\u6b4c\u5b66\u672f</p> <p>DBLP</p> <p>\u627e\u5b66\u59d0\u8981</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#big4","title":"\u4e09\u5927\u5bc6\u4e0eBIG4","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_7","title":"\u5bc6\u7801\u5b66\u4e09\u5927\u9876\u4f1a","text":"\u7b80\u79f0 \u540d\u79f0 \u51fa\u7248\u793e \u4f1a\u8bae\u7f51\u5740 \u63a8\u8350\u7b49\u7ea7 Crypto International Cryptology Conference Springer https://iacr.org/meetings/crypto/ A Eurocrypt European Cryptology Conference Springer https://iacr.org/meetings/eurocrypt/ A Asiacrypt Annual International Conferenceon the Theory and Application of Cryptology and Information Security Springer https://iacr.org/meetings/asiacrypt/ A"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_8","title":"\u4fe1\u606f\u5b89\u5168\u56db\u5927\u9876\u4f1a\u4e0e\u5206\u7ea7","text":"\u7f16\u53f7 \u4f1a\u8bae\u7b80\u79f0 \u4f1a\u8bae\u540d\u79f0 \u51fa\u7248\u793e \u4f1a\u8bae\u7f51\u5740 \u63a8\u8350\u7b49\u7ea7 1 CCS ACM Conference on Computer and Communications Security ACM http://dblp.uni-trier.de/db/conf/ccs/ A 2 S&amp;P IEEE Symposium on Security and Phivacy IEEE http://dblp.uni-trier.de/db/conf/sp/ A 3 Usenix Security Usenix Security Symposium USENIX Association http://dblp.uni-trier.de/db/conf/uss/ A 4 NDSS ISOC Network and Disthibuted System SecuritySyumposium ISOC https://www.ndss-symposium.org/ B"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_9","title":"\u8bba\u6587\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#ccf","title":"CCF\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_10","title":"\u4e2d\u79d1\u9662\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sci","title":"SCI\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_11","title":"\u70ed\u95e8\u65b9\u5411","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_12","title":"\u540e\u91cf\u5b50\u5bc6\u7801\u5b66","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_13","title":"\u540c\u6001\u52a0\u5bc6","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_14","title":"\u533a\u5757\u94fe","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#mpc","title":"\u591a\u65b9\u5b89\u5168\u8ba1\u7b97\uff08MPC\uff09","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_15","title":"\u4e0d\u662f\u592a\u70ed\u95e8\u4f46\u662f\u6bd4\u8f83\u5bb9\u6613\u505a\u7684\u65b9\u5411","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_16","title":"\u56fd\u5bc6","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sm2","title":"SM2","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sm3","title":"SM3","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sm9","title":"SM9","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_17","title":"\u7fa4\u7b7e\u540d/\u73af\u7b7e\u540d","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_18","title":"\u53d8\u8272\u9f99\u54c8\u5e0c/\u53ef\u4fee\u6539\u533a\u5757\u94fe","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_19","title":"\u5bc6\u94a5\u6cc4\u9732","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_20","title":"\u5373\u65f6\u9677\u95e8","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_21","title":"\u76f2\u7b7e\u540d","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_22","title":"\u9690\u5199","text":""},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/index.html","title":"SageMath\u7b80\u8981\u6559\u7a0b","text":"<p>SageMath\u662f\u4e00\u4e2aPython\u5728\u6570\u5b66\u5e94\u7528\u4e0a\u7684\u4e00\u4e2a\u6269\u5c55\u7a0b\u5e8f\uff0c\u5728\u638c\u63e1Python\u7684\u57fa\u672c\u8bed\u6cd5\u4e4b\u540eSageMath\u76f8\u5f53\u4e8e\u591a\u4e86\u5f88\u591a\u81ea\u5e26\u6269\u5c55\u5e93</p> <p>\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u5199\u4e86\u4e2a\u7b80\u8981\u7684\u6559\u7a0b</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/01-%E9%AB%98%E7%89%88%E6%9C%ACSageMath%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Aflatter%E9%85%8D%E7%BD%AE.html","title":"\u9ad8\u7248\u672cSageMath\u5b89\u88c5\u4ee5\u53caflatter\u914d\u7f6e","text":"<p>\u7531\u4e8eWindows\u652f\u6301\u7684SageMath\u505c\u7559\u57289.3\uff0c\u5efa\u8bae\u53c2\u8003Shin's Blog\u5b89\u88c5\u66f4\u9ad8\u7248\u672c\u7684SageMath\u548cflatter</p> <p>\u7b80\u5355\u6765\u8bf4flatter\u5c31\u662f\u4e2a\u52a0\u901fLLL\u7b97\u6cd5\u7684\u5de5\u5177\uff0c\u7b80\u4ecb\u53ef\u89c1\uff1ahttps://github.com/keeganryan/flatter</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html","title":"SageMath\u7b80\u4ecb","text":"<p>SageMath\u662f\u4e00\u4e2aPython\u5728\u6570\u5b66\u5e94\u7528\u4e0a\u7684\u4e00\u4e2a\u6269\u5c55\u7a0b\u5e8f\uff0c\u5728\u638c\u63e1Python\u7684\u57fa\u672c\u8bed\u6cd5\u4e4b\u540eSageMath\u76f8\u5f53\u4e8e\u591a\u4e86\u5f88\u591a\u81ea\u5e26\u6269\u5c55\u5e93</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#1-python","title":"1. \u4e0ePython\u7684\u4e0d\u540c\u4e4b\u5904","text":"Bash<pre><code>type(5)\n&lt;class 'sage.rings.integer.Integer'&gt;\n</code></pre> <p>5\u7684\u7c7b\u578b\u4e0d\u662fint\uff0c\u800c\u662f\u6574\u6570\u73af\u4e0a\u7684\u5143\u7d20</p> Bash<pre><code>5**3        # \u8868\u793a5\u7684\u4e09\u6b21\u65b9\n5^3         # \u8868\u793a5\u7684\u4e09\u6b21\u65b9\uff0cpython\u4e2d\u8868\u793a\u5f02\u6216\n5^^3        # \u8868\u793a5\u5f02\u62163\n</code></pre>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#2","title":"2. \u57fa\u672c\u7684\u73af\uff0c\u57df","text":"<ol> <li>\u6574\u6570\u73af\uff1aZZ</li> <li>\u6709\u7406\u6570\u73af\uff1aQQ</li> <li>\u5b9e\u6570\u57df\uff1aRR</li> <li>\u590d\u6570\u57df\uff1aCC</li> <li>\u591a\u9879\u5f0f\u73af\uff1aPolynomialRing()</li> </ol> <p>\u7528\u7684\u6700\u591a\u7684\u662f<code>PolynomialRing()</code></p> Bash<pre><code>PQ.&lt;x&gt; = PolynomialRing(QQ)\n</code></pre> <p>PQ\uff1a\u662f\u591a\u9879\u5f0f\u73af\u81ea\u5b9a\u4e49\u7684\u540d\u5b57</p> <p>x\uff1a\u53d8\u91cf\u540d</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#3","title":"3. \u57fa\u672c\u6570\u8bba\u51fd\u6570","text":"<p>1.\u6c42\u9006\uff1ae\u6a21n\u7684\u9006</p> <p>\u5982\u679c<code>e</code>\u662f\u5b9a\u4e49\u5728\\(Zmod(n)\\)\u4e0a\u7684\u5143\u7d20\uff0c\u76f4\u63a5<code>e^-1</code>\u5373\u53ef\u5f97\u5230\u9006\u5143\u3002 \u5426\u5219\u76f4\u63a5\u4f7f\u7528<code>inverse_mod(e,n)</code>\uff0c\u4e00\u822c\u60c5\u51b5\u90fd\u662f\u7528<code>Crypto.Util.number</code>\u6a21\u5757\u4e2d\u7684<code>inverse(e,n)</code></p> <p>2.\u6700\u5927\u516c\u56e0\u6570\uff1a(a,b)\u7684\u6700\u5927\u516c\u56e0\u6570</p> <p><code>gcd(a,b)</code></p> <p>3.\u6700\u5c0f\u516c\u500d\u6570\uff1a(a,b)\u7684\u6700\u5c0f\u516c\u500d\u6570</p> <p><code>lcm(a,b)</code></p> <p>4.\u6a21\u5e42\uff1a\\(e^x \\mod n\\)</p> <p>\u5982\u679c<code>e</code>\u662f\u5b9a\u4e49\u5728\\(Zmod(n)\\)\u4e0a\u7684\u5143\u7d20\uff0c\u76f4\u63a5<code>e^x</code>\u5373\u53ef\uff0c\u5426\u5219\u4f7f\u7528<code>pow(e,x,n)</code></p> <p>5.\u7d20\u6570\u5224\u65ad\uff1a</p> Bash<pre><code>x = 7\nx.is_prime()\n# True\n</code></pre> <p>\u6211\u4e00\u822c\u7528Crypto.Util.number\u6a21\u5757\u4e2d\u7684<code>isPrime(x)</code></p> <p>6.\u9636\u4e58\uff1a</p> <p><code>factorial(x)</code></p> <p>7.\u6b27\u62c9\u51fd\u6570</p> Bash<pre><code>euler_phi(n)\n</code></pre> <p>\u6c42\\(\\phi(n)\\)</p> <p>8.\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406</p> Bash<pre><code>crt([m1,m2],[n1,n2])\n</code></pre> <p>\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4</p> \\[ \\begin{align} x \\equiv m_1 \\mod n_1 \\\\ x \\equiv m_2 \\mod n_2 \\end{align} \\] <p>9.\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5</p> Bash<pre><code>d,x,y = xgcd(a,b)\n</code></pre> \\[ d = gcd(a,b) = ax + by \\] <p><code>gmpy2.gcdext(a,b)</code></p> <p>10.\u7d20\u6570\u5206\u89e3</p> Bash<pre><code>factor(1024)\n# 2^10 \nprime_divisors(1024)\n# [2]\ndivisors(1024)\n# [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n</code></pre> <p>\\(p_1^{e_1} * p_2^{e_2} ... p_n^{e_n}\\)</p> <p>11.\u5f00\u6839</p> <p>\u6574\u6570\u57df\u5f00\u6839</p> \\[ x^m = y \\] <p>\u5df2\u77e5\\(y,m\\)\u6c42\\(x\\)</p> Bash<pre><code>y = 87^8\ny.nth_root(8)\n# 87\n</code></pre> <p>\u6709\u9650\u57df\u5f00\u6839</p> \\[ x^m \\equiv y \\mod N \\] <p>\u5df2\u77e5\\(y,m,N\\)\u6c42\\(x\\)</p> Bash<pre><code>y = pow(78,888,65537)\nx = Zmod(65537)(y).nth_root(888)\nprint(x)\n# 78\n</code></pre> \\[ c \\equiv m^e \\mod n \\] <p><code>x = Zmod(n)(c).nth_root(e)</code></p> <p>\u6ce8\u610f\uff1a\u5f00\u6839\u6709\u591a\u89e3\uff0c<code>nth_root</code>\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a\u89e3\uff0c\u5982\u679c\u9700\u8981\u5f97\u5230\u6240\u6709\u89e3\uff0c\u53ef\u4ee5\u591a\u52a0\u4e00\u4e2a\u53c2\u6570</p> <p><code>x = Zmod(65537)(y).nth_root(888,all=True)</code></p> Bash<pre><code>y = pow(78,888,65537)\nx = Zmod(65537)(y).nth_root(888,all=True)\nprint(x)\n# [78, 64289, 19968, 8197, 65459, 1248, 45569, 57340]\n</code></pre> <p>12.\u79bb\u6563\u5bf9\u6570 sage\u5b9e\u73b0\u4e86\u591a\u79cd\u79bb\u6563\u5bf9\u6570\u7684\u6c42\u89e3\u65b9\u6cd5</p> \\[ y \\equiv x^m \\mod p \\] <p>\u53c2\u6570\u8bf4\u660e\uff1a\u6c42\u89e3\u4ee5<code>base</code>\u4e3a\u5e95\uff0c<code>a</code>\u7684\u5bf9\u6570\uff1b<code>ord</code>\u4e3a<code>base</code>\u7684\u9636\uff08\u53ef\u4ee5\u7f3a\u7701\uff09\uff0c<code>operation</code>\u53ef\u4ee5\u662f<code>+</code>\uff0c<code>*</code>\uff0c\u9ed8\u8ba4\u662f<code>*</code>\uff1b<code>bound</code>\u662f\u4e00\u4e2a\u533a\u95f4<code>(ld,ud)</code>\uff0c\u9700\u8981\u4fdd\u8bc1\u6240\u8ba1\u7b97\u7684\u5bf9\u6570\u5728\u6b64\u533a\u95f4\u5185</p> <ul> <li><code>discrete_log(a,base,ord,operation)</code>   \u901a\u7528\u7684\u6c42\u79bb\u6563\u5bf9\u6570\u7684\u65b9\u6cd5</li> <li><code>discrete_log_rho(a,base,ord,operation)</code>   \u6c42\u79bb\u6563\u5bf9\u6570\u7684Pollard-Rho\u7b97\u6cd5</li> <li><code>discrete_log_lambda(a,base,bounds,operation)</code> \u200b       \u6c42\u79bb\u6563\u5bf9\u6570\u7684Pollard-kangaroo\u7b97\u6cd5\uff08\u4e5f\u79f0lambda\u7b97\u6cd5\uff09</li> <li>bsgs(base,a,bounds,operation)   \u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5 \u5f53<code>operation</code>\u4e3a<code>+</code>\u65f6\uff0c\u4e00\u822c\u662f\u5e94\u7528\u5728\u692d\u5706\u66f2\u7ebf\u7684\u79bb\u6563\u5bf9\u6570</li> </ul>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#4","title":"4. \u7ebf\u6027\u4ee3\u6570\u76f8\u5173\u51fd\u6570","text":"<ul> <li>\u77e9\u9635\u7684\u5b9a\u4e49\u8fd0\u7b97</li> </ul> <p>1.\u4e00\u822c\u77e9\u9635\u5b9a\u4e49</p> Bash<pre><code># \u5b9a\u4e49\u6574\u6570\u73af\u4e0a\u7684\u77e9\u9635\nA = Matrix(ZZ,[\n[1,2,3],\n[4,5,6],\n[7,8,9]\n])\n# \u6a212\u6709\u9650\u57df\u7684\u77e9\u9635\nB = Matrix(GF(2),A)\nB = Matrix(Zmod(2),A)\n# \u5411\u91cf\u5b9a\u4e49\nv = vector(ZZ,[1,2,3])\nv = vector(GF(2),[1,2,3])\n# \u5b9a\u4e49\u77e9\u9635\u4f46\u4e0d\u521d\u59cb\u5316:GF(2)\u4e0a\u768410 * 10\u77e9\u9635\u9ed8\u8ba4\u6240\u6709\u5143\u7d20\u4e3a0\nM = Matrix(GF(2),10,10)\n</code></pre> <p>2.\u5206\u5757\u77e9\u9635\u5b9a\u4e49\uff1a</p> \\[ M = \\begin{bmatrix} A &amp; B \\\\ C &amp; D \\end{bmatrix} \\] Bash<pre><code>A = Matrix(GF(2),10,10)\nB = Matrix(GF(2),10,30)\nC = Matrix(GF(2),5,10)\nD = Matrix(GF(2),5,30)\nM = block_matrix([\n[A,B],\n[C,D]\n])\n# \u77e9\u9635\u7684\u89c4\u6a21\n</code></pre> <p>3.\u77e9\u9635\u8fd0\u7b97</p> Python<pre><code>M1 = Matrix([\n    [1,2],\n    [1,3]\n])\nM2 = Matrix([\n    [2,1],\n    [2,3]\n])\nM1 + M2\n\"\"\"\n[3 3]\n[3 6]\n\"\"\"\nM1 * M2\n\"\"\"\n[ 6  7]\n[ 8 10]\n\"\"\"\n</code></pre> <p>\u8f6c\u7f6e\uff1a<code>M.transpose()</code></p> <p>\u6c42\u9006\uff1a<code>M.inverse()</code>\u6216\u8005<code>M^(-1)</code></p> <p>\u7279\u5f81\u503c\uff1a<code>M.eigenvalues()</code></p> <p>\u7279\u5f81\u5411\u91cf\uff08\u53f3\uff09\uff1a<code>M.eigenvalues_right()</code></p> <p>\u884c\u5217\u5f0f\uff1a<code>M.det()</code></p> <p>\u6c42\u79e9\uff1a<code>M.rank()</code></p> <ul> <li>\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4</li> </ul> \\[ \\left\\{\\begin{matrix} a_{11}x_1 + a_{12}x_2 + ... + a_{1m}x_m = b_1\\\\ a_{21}x_1 + a_{22}x_2 + ... + a_{2m}x_m = b_2\\\\ \\vdots\\\\ a_{n1}x_1 + a_{n2}x_2 + ... + a_{nm}x_m = b_n\\\\ \\end{matrix}\\right. \\] <p>\u77e9\u9635\u8868\u793a\uff1a\\(Ax = B\\)</p> \\[ A = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; ... &amp; a_{1m}\\\\ a_{21} &amp; a_{22} &amp; ... &amp; a_{2m}\\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\ a_{n1} &amp; a_{n2} &amp; ... &amp; a_{nm} \\end{bmatrix} \\quad  x = \\begin{bmatrix} x_1\\\\ x_2\\\\ \\vdots \\\\ x_m \\end{bmatrix} \\quad  B = \\begin{bmatrix} b_1\\\\ b_2\\\\ \\vdots \\\\ b_n \\end{bmatrix} \\] Python<pre><code>x = A.solve_right(B)\n</code></pre> <p>\u5982\u679c\u662f\u6c42\u89e3\\(xA = B\\)</p> Python<pre><code>x = A.solve_left(B)\n</code></pre> <p>SageMath\u8fd8\u96c6\u6210\u4e86\u53f3\uff08\u5de6\uff09\u6838\u7a7a\u95f4\u7684\u6c42\u89e3\uff0c\u5373\\(AX = 0\\)\u548c\\(XA = 0\\)\u7684\u6240\u6709\u89e3\u7a7a\u95f4</p> Python<pre><code>X = A.left_kernel()     # XA = 0\nX = A.right_kernel()    # AX = 0\n# \u77e9\u9635\u5f62\u5f0f\nX = A.right_kernel_matrix()\n</code></pre> <ul> <li>\u5bf9\u4e00\u822c\u65b9\u7a0b\uff08\u6a21\u65b9\u7a0b\uff09\u7684\u6c42\u89e3</li> </ul> Python<pre><code># \u89e3\u4e00\u822c\u65b9\u7a0b\nx,y = var('x,y')\nf1 = x + y == 10\nf2 = x - y == 0\nsolve([f1,f2],[x,y])\n\"\"\"\n[[x == 5, y == 5]]\n\"\"\"\n\n# \u89e3\u6a21\u65b9\u7a0b\nx,y = var('x,y')\nf1 = x + y == 66\nf2 = x - y == 23\nsolve_mod([f1,f2],97)\n\"\"\"\n[(93, 70)]\n\"\"\"\n</code></pre>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#5","title":"5.\u591a\u9879\u5f0f\u73af\u53ca\u5176\u51fd\u6570","text":"<ul> <li>\u591a\u9879\u5f0f\u73af\u5b9a\u4e49</li> </ul> Python<pre><code># \u5b9a\u4e49\u5728\u6709\u7406\u6570\u73af\u4e0a\u7684\u4e00\u5143\u591a\u9879\u5f0f\u73af\nPQ.&lt;x&gt; = PolynomialRing(QQ)\n# PQ\uff1a\u591a\u9879\u5f0f\u73af\u7684\u540d\u5b57\uff0c\u81ea\u5b9a\u4e49\n# x\uff1a\u53d8\u91cf\u7684\u540d\u5b57\uff0c\u81ea\u5b9a\u4e49\n\n# \u4ee5\u4e0b\u662f\u7b49\u4ef7\u5b9a\u4e49\nPQ = PolynomialRing(QQ,'x')\nx = PQ.gen()\n# \u6216\u8005\nPQ = QQ['t']\n</code></pre> <p>\u4e8c\u5143\u591a\u9879\u5f0f\u73af\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a</p> Python<pre><code>PQ.&lt;x,y&gt; = PolynomialRing(QQ,implementation=\"generic\")\n# \u7b49\u4ef7\u4e8e\nPQ = PolynomialRing(QQ,['x','y'])\nx,y = PQ.gens()\n</code></pre> <ul> <li>\u591a\u9879\u5f0f\u5b9a\u4e49</li> </ul> <p>\u5728\u5b9a\u4e49\u597d\u591a\u9879\u5f0f\u73af\u4e4b\u540e<code>PQ.&lt;x&gt; = PolynomialRing(QQ)</code></p> Python<pre><code>PQ.&lt;x&gt; = PolynomialRing(QQ)\nf = 4*x^3 + 2*x + 1\n\n# \u53ef\u4ee5\u7528\u5217\u8868\u5b9e\u73b0\uff0c\u5217\u8868\u7684\u5143\u7d20\u5c31\u662f\u591a\u9879\u5f0f\u7684\u7cfb\u6570\uff08\u5347\u5e42\uff09\nf1 = PQ([1,2,0,4])\nprint(f1)\n\"\"\"\n4*x^3 + 2*x + 1\n\"\"\"\n</code></pre> <p>\u751f\u6210\u968f\u673a\u591a\u9879\u5f0f</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nS = R.random_element(degree)\nprint(S)\n\"\"\"\n30809*x^7 + 43675*x^6 + 37650*x^5 + 19133*x^4 + 28302*x^3 + 41523*x^2 + 38027*x + 47569\n\"\"\"\n</code></pre> <ul> <li>\u591a\u9879\u5f0f\u76f8\u5173\u8fd0\u7b97\u3001\u51fd\u6570</li> </ul> <p>\u591a\u9879\u5f0f\u5206\u89e3\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nf = R.random_element(degree) * R.random_element(degree)\nprint(f.factor())\n\"\"\"\n(36316) * (x + 11701) * (x + 51377) * (x^6 + 26446*x^5 + 34386*x^4 + 20045*x^3 + 48014*x^2 + 1511*x + 29582) * (x^6 + 28718*x^5 + 5682*x^4 + 36526*x^3 + 24869*x^2 + 16439*x + 26532)\n\"\"\"\n</code></pre> <p>\u591a\u9879\u5f0f\u6700\u5927\u516c\u56e0\u5f0f\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\ng = R.random_element(degree)\nf1 = R.random_element(degree) * g\nf2 = R.random_element(degree) * g\nprint(gcd(f1,f2))\n\"\"\"\nx^7 + 17968*x^6 + 5649*x^5 + 15968*x^4 + 39491*x^3 + 10960*x^2 + 11793*x + 43186\n\"\"\"\n</code></pre> <p>\u9996\u4e00\u591a\u9879\u5f0f\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nf = R.random_element()\nprint(f.monic())\n</code></pre> <p>\u591a\u9879\u5f0f\u7684\u6839\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nf = R.random_element()\nprint(f.roots())\n\"\"\"\n[(49655, 1), (23052, 1)]\n\"\"\"\n</code></pre> <p>Groebner basis\uff1a</p> <p>\u5728\u5df2\u77e5\u6a21\u65b9\u7a0b\u7684\u4e00\u4e9b\u5173\u7cfb\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Groebner basis\u5f97\u5230\u4e00\u4e9b\u65b9\u7a0b\u7684\u6839</p> Python<pre><code>G = GF(next_prime(getrandbits(512)))\na = G(getrandbits(512))\nb = G(getrandbits(512))\nc = a + b + 233\na3 = a^3 \nb3 = b^3\nc3 = c^3\n\nx,y,z = G['x,y,z'].gens()\nI = ideal([z - x - y -233, x^3 - a3, y^3 - b3, z^3 - c3])\nB = I.groebner_basis()\nprint(B)\n\"\"\"\n[x + 2531298875913075551623080047366256605361394651747390176151541916607157452100557045589219380619372113471085086020988642643234366348428408128300737756479339, y + 9415924508923578913613719564884371252781291871935977042763901912456038422181722504308404500554549074832959153436325409624718881868450958162294882284278023, z + 1071131270017849170544175220642133725088124729933657075977649390709780255972543853576917359530421767134795718578905900102821973462764119981798880043620730]\n\"\"\"\n</code></pre> <p>\u5206\u522b\u662fa,b,c\u7684\u503c</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#6","title":"6.\u683c\u76f8\u5173\u51fd\u6570","text":"<p>\u5e38\u7528\u7684\u4e24\u4e2a\uff1a</p> <ul> <li>LLL</li> </ul> Python<pre><code>M = Matrix.random(ZZ,5,5)\nM.LLL()\n</code></pre> <ul> <li>CopperSmith\u7b97\u6cd5</li> </ul>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/index.html","title":"\u5178\u578b\u9898\u76ee","text":"<p>\u7eb8\u4e0a\u5f97\u6765\u7ec8\u89c9\u6d45\uff0c\u7edd\u77e5\u6b64\u4e8b\u8981\u8eac\u884c</p> <p>\u770b\u518d\u591a\u7406\u8bba\uff0c\u4e5f\u4e0d\u5982\u5237\u4e00\u767e\u9898</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/01-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81.html","title":"\u53e4\u5178\u5bc6\u7801","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html","title":"RSA\u5165\u95e8","text":"<p>\u539f\u6587\u94fe\u63a5</p> <p>RSA\u5b66\u4e60\u8fc7\u7a0b\uff0c\u5bf9\u5e38\u89c1\u9898\u578b\u8fdb\u884c\u4e86\u6574\u5408</p> <p>\u53d1\u8868\u4e8e2023\u5e747\u67086\u65e5\u3002\u4e8e2024\u5e747\u670815\u65e5\u8fdb\u884c\u66f4\u65b0\uff0c\u628a\u4ee5\u524d\u4e09\u7bc7\u6709\u5173RSA\u7684\u5185\u5bb9\u6574\u5408\u6210\u4e00\u7bc7\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e9b\u9898\u76ee\uff0c\u5e76\u4e14\u53bb\u9664\u4e86\u5197\u4f59\u7684\u5185\u5bb9</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#rsa_1","title":"\u4e00\u3001RSA\u7b97\u6cd5\u539f\u7406\u7b80\u4ecb","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1","title":"1.\u5bc6\u94a5\u7684\u4ea7\u751f","text":"<ol> <li> <p>\u9009\u62e9\u4e24\u4e2a\u4fdd\u5bc6\u7684\u5927\u7d20\u6570\\(p\\)\u548c\\(q\\)</p> </li> <li> <p>\u8ba1\u7b97\\(n = p \\times q,\\phi(n) = (p-1)(q-1)\\)\uff0c\u5176\u4e2d\\(\\phi(n)\\)\u662fn\u7684\u6b27\u62c9\u51fd\u6570\u503c</p> </li> <li> <p>\u9009\u4e00\u6574\u6570\\(e\\)\uff0c\u6ee1\u8db3\\(1 &lt; e &lt; \\phi(n)\\)\uff0c\u4e14\\(gcd(\\phi(n),e) = 1\\)</p> </li> <li> <p>\u8ba1\u7b97\\(d\\)\uff0c\u6ee1\u8db3\\(ed \\equiv 1 \\mod \\phi(n)\\)\u3002\u5373\\(d\\)\u662fe\u5728\u6a21\\(\\phi(n)\\)\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u56e0\u4e3a\\(e\\)\u548c\\(\\phi(n)\\)\u4e92\u7d20\uff0c\u6240\u4ee5\\(d\\)\u5fc5\u5b9a\u5b58\u5728</p> </li> <li> <p>\u4ee5\\((e,n)\\)\u4e3a\u516c\u5f00\u94a5\uff0c\\((d,n)\\)\u4e3a\u79d8\u5bc6\u94a5</p> </li> </ol>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2","title":"2.\u52a0\u5bc6","text":"<p>\u52a0\u5bc6\u65f6\uff0c\u5148\u628a\u660e\u6587\u6bd4\u7279\u4e32\u5206\u7ec4\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5206\u7ec4\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6570\\(&lt;n\\)\uff0c\u5373\u5206\u7ec4\u957f\u5ea6\u5c0f\u4e8e\\(log_2n\\)\u3002\u5982\u7136\u540e\u5bf9\u6bcf\u4e2a\u660e\u6587\u5206\u7ec4\\(m\\)\uff0c\u4f5c\u52a0\u5bc6\u8fd0\u7b97:</p> \\[ c \\equiv m^e \\mod n \\]"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3","title":"3.\u89e3\u5bc6","text":"<p>\u5bf9\u5bc6\u6587\u5206\u7ec4\u7684\u89e3\u5bc6\u8fd0\u7b97:</p> \\[ m \\equiv c ^d \\mod n \\]"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#4","title":"4.\u8bc1\u660e\u89e3\u5bc6\u7684\u6b63\u786e\u6027","text":"<p>\u60c5\u51b51:\\(m,n\\)\u4e92\u7d20\u3002\u7531\u6b27\u62c9\u5b9a\u7406:</p> \\[ c^d \\equiv m^{ed} \\equiv m^{k\\phi(n)+1} \\equiv m\\times (m^{\\phi(n)})^k \\equiv m \\mod n \\] <p>\u5373\\(c^d \\equiv m \\mod n\\)</p> <p>\u60c5\u51b52:\\(m,n\\)\u4e0d\u4e92\u7d20\u3002</p> <p>\u56e0\u4e3a\\(m,n\\)\u4e0d\u4e92\u7d20\uff0c\u6ce8\u610f\u5230\\(n = pq\\)\uff0c\u6240\u4ee5\u6b64\u65f6\\(m\\)\u662f\\(p\\)\u6216\u8005\\(q\\)\u7684\u500d\u6570\u3002\u5047\u8bbe\\(m\\)\u662f\\(p\\)\u7684\u500d\u6570\uff0c\u5373\\(m = tp\\)</p> <p>\u6b64\u65f6\\(gcd(m,q) = 1\\)\uff0c\u5426\u5219\\(m\\)\u4e5f\u662f\\(q\\)\u7684\u500d\u6570\uff0c\u4ece\u800c\\(m\\)\u662fn\u7684\u500d\u6570\uff0c\u8fd9\u4e0e\u660e\u6587\u5206\u7ec4\\(m &lt; n\\)\u77db\u76fe\u3002\u6240\u4ee5\u4e0d\u53ef\u80fd</p> <p>\u7531\\(gcd(m,q) = 1\\)\u5f97</p> \\[ m ^{\\phi(q)} \\equiv 1 \\mod q  \\] <p>\u6240\u4ee5</p> \\[ m^{k\\phi(p)\\phi(q)} \\equiv (m^{\\phi(q)})^{k\\phi(p)} \\equiv 1\\mod q \\] <p>\u5373\\(m^{k\\phi(n)} \\equiv 1 \\mod q\\)\uff0c\u4e5f\u5c31\u662f\\(m^{k\\phi(n)} = kq + 1\\)</p> <p>\u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a\\(m = tp\\)\uff0c\u5f97\\(m^{k\\phi(n)+1} \\equiv ktpq + m = m+tkn\\)</p> <p>\u4e5f\u5c31\u662f\\(m^{k\\phi(n)+1} \\equiv m \\mod n\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_1","title":"\u4e8c\u3001\u57fa\u7840\u5de5\u5177","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1yafu","title":"1.yafu","text":"<p>\u4f7f\u7528\u65b9\u6cd5:\u8fdb\u5165yafu\u6240\u5728\u7684\u6587\u4ef6\u5939\uff0c\u8f93\u5165\u547d\u4ee4<code>yafu-x64 factor(n)</code></p> <p></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2_1","title":"2.\u7f51\u7ad9\u5206\u89e3","text":"<p>http://www.factordb.com/index.php</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_2","title":"\u4e09\u3001\u5bc6\u94a5\u751f\u6210\u548c\u8bfb\u53d6","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_3","title":"\u5bc6\u94a5\u751f\u6210","text":"<p>\u901a\u8fc7<code>Crypto.PublicKey.RSA</code>\u4e2d\u7684<code>construct</code>\u51fd\u6570\u53ef\u4ee5\u751f\u6210\u516c\u94a5\u548c\u79c1\u94a5\u3002</p> <p>\u5bf9\u4e8e\u751f\u6210\u516c\u94a5\uff0c\u9700\u8981\u4e24\u4e2a\u53c2\u6570\\(n,e\\)\uff0c\u751f\u6210\u79c1\u94a5\u9700\u8981\\(n,e,d\\)</p> <p>\u9700\u8981\u914d\u5408<code>exprot_Key</code>\u4f7f\u7528</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_4","title":"\u751f\u6210\u516c\u94a5","text":"Python<pre><code>from Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\n\np = getPrime(512)\nq = getPrime(512)\nn = p*q\ne = 65537\n\na = (n,e)\npublickey = RSA.construct(a)\nwith open(\"publickey.pem\",\"wb\") as f:\n    f.write(publickey.export_key())\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_5","title":"\u751f\u6210\u79c1\u94a5","text":"<p>\u5fc5\u9700\u53c2\u6570\u662f\\(n,e,d\\)\uff0c\u53ef\u6dfb\u53c2\u6570\u662f\\(p,q\\)</p> Python<pre><code>from Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\nimport gmpy2\n\np = getPrime(512)\nq = getPrime(512)\nn = p*q\ne = 65537\nd = gmpy2.invert(e,(p-1)*(q-1))\n\na = (n,e)\nb = (n,e,int(d))\n\npublickey = RSA.construct(a)\nprivatekey = RSA.construct(b)\n\nwith open(\"publickey.pem\",\"wb\") as f:\n    f.write(publickey.export_key())\n\nwith open(\"privatekey.pem\",\"wb\") as f2:\n    f2.write(privatekey.export_key())\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_6","title":"\u8bfb\u53d6\u5bc6\u94a5","text":"Python<pre><code>from Crypto.PublicKey import RSA\n\nkey = RSA.import_Key(\u6587\u4ef6)\n</code></pre> <p>key\u4e2d\u6709p,q,n,e,d\u4e94\u4e2a\u5c5e\u6027\uff0c\u4e00\u822c\u9898\u76ee\u4e5f\u5c31\u7ed9\u4e86\u516c\u94a5\uff0c\u6240\u4ee5\u53ea\u6709n,e\u662f\u80fd\u8bfb\u53d6\u7684</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_1","title":"\u4f8b\u98981 \u6cc4\u9732\u79c1\u94a5","text":"<p>task</p> Python<pre><code>from Crypto.PublicKey import RSA\nimport libnum\nimport gmpy2\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\n\np = libnum.generate_prime(1024)\nq = gmpy2.next_prime(p)\nn = p * q\ne = 65537\nphi = (p - 1) * (q - 1)\nd = gmpy2.invert(e, phi)\nm = libnum.s2n(flag)\nc = pow(m, e, n)\n#\nc1 = libnum.n2s(int(c))\n\nwith open(\"flag.pem\", \"wb\") as f:\n    f.write(c1)\n## \u751f\u6210\u516c\u94a5\nrsa_components = (int(n), int(e), int(d))\nkeypair = RSA.construct(rsa_components)\nwith open('pubckey.pem', 'wb') as f:\n    f.write(keypair.exportKey())\n</code></pre> <p>\u9898\u76ee\u4e2d\u628ad\u4e5f\u4f20\u5165\u6570\u636e\u4e86\uff0c\u76f4\u63a5\u8bfb\u53d6d\u89e3\u5bc6\u5373\u53ef</p> Python<pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Util.number import *\n\nc = bytes_to_long(open(\"flag.pem\",\"rb\").read())\nkey = RSA.import_key(open(\"publickey.pem\",\"rb\").read())\ne = key.e\nn = key.n\nd = key.d\n\nprint(long_to_bytes(pow(c,d,n)))\n\n## flag{947ce8a3-40ee-46c0-a00e-0026e583f8da}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2-oaep","title":"\u4f8b\u98982 OAEP","text":"<p>task.py</p> Python<pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nimport libnum\nimport gmpy2\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nflag = flag.encode()\n\np = libnum.generate_prime(1024)\nq = gmpy2.next_prime(p)\nn = p * q\ne = 65537\nphi = (p - 1) * (q - 1)\nd = gmpy2.invert(e, phi)\n\n#\n## \u751f\u6210\u516c\u94a5\nrsa_components = (int(n), int(e), int(d))\nkeypair = RSA.construct(rsa_components)\nwith open('prikey2.pem', 'wb') as f:\n    f.write(keypair.exportKey())\n\nrsa_components = (int(n), e,)\narsa = RSA.construct(rsa_components)\nrsakey = RSA.importKey(arsa.exportKey())\nrsakey = PKCS1_OAEP.new(rsakey)\nc = rsakey.encrypt(flag)\nwith open(\"flag2.pem\", \"wb\") as f:\n    f.write(c)\n</code></pre> <p>\u4e86\u89e3\u4e86\u4e00\u4e0b\u51fd\u6570</p> Python<pre><code>PKCS1_OAEP.new(key, hashAlgo=None, mgfunc=None, label=b'')\n</code></pre> <p>\u53c2\u6570\u542b\u4e49\u5982\u4e0b\uff1a</p> <p>key:RSA\u5bc6\u94a5\uff0c\u53ef\u4ee5\u662f\u516c\u94a5\u6216\u79c1\u94a5\uff1b</p> <p>hashAlgo:\u54c8\u5e0c\u7b97\u6cd5\uff0c\u9ed8\u8ba4\u4e3aSHA-1\uff1b</p> <p>myfunc:\u6d88\u606f\u751f\u6210\u51fd\u6570\uff0c\u9ed8\u8ba4\u4e3aMGF1\uff1b</p> <p>label:\u53ef\u9009\u7684\u9644\u52a0\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u3002</p> <p>key\u662f\u5fc5\u9700\u53c2\u6570</p> <p>\u4f7f\u7528<code>PKCS1_OAEP.new</code>\u521d\u59cb\u5316\u540e\uff0c\u53ef\u4ee5\u8c03\u7528\u5176\u5b9e\u4f8b\u65b9\u6cd5<code>encrypt</code>\u548c<code>decrypt</code>\u5b9e\u73b0RSA-OAEP\u7b97\u6cd5\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u64cd\u4f5c</p> <p>exp.py</p> Python<pre><code>from Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.PublicKey.RSA import *\n\nc = open(\"flag2.pem\",\"rb\").read()\nkey = import_key(open(\"prikey2.pem\",\"rb\").read())\n\nnewkey = PKCS1_OAEP.new(key)\nm = newkey.decrypt(c)\nprint(m).\n\n#flag{04bbaad0-9241-42a4-9fd4-7d6e0d8bc5f1}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#cr4-poor-rsa","title":"\u653b\u9632\u4e16\u754c\u2014\u2014cr4-poor-rsa","text":"<p>\u9898\u76ee\u7ed9\u4e86\u4e2a\u65e0\u540e\u7f00\u7684\u6587\u4ef6\uff0c\u62d6\u5230010\u53d1\u73b0\u91cc\u9762\u6709\u85cf\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e8e\u662f\u628a\u540e\u7f00\u6539\u6210\u4e86zip</p> <p>\u6253\u5f00\u540e\u5f97\u5230\u4e24\u4e2a\u6587\u4ef6\uff0c\u5206\u522b\u662fkey.pub\u548cflag.b64</p> <p>key.pub</p> Text Only<pre><code>-----BEGIN PUBLIC KEY-----\nME0wDQYJKoZIhvcNAQEBBQADPAAwOQIyUqmeJJ7nzzwMv5Y6AJZhdyvJzfbh4/v8\nbkSgel4PiURXqfgcOuEyrFaD01soulwyQkMCAwEAAQ==\n-----END PUBLIC KEY-----\n</code></pre> <p>flag.b64</p> Text Only<pre><code>Ni45iH4UnXSttNuf0Oy80+G5J7tm8sBJuDNN7qfTIdEKJow4siF2cpSbP/qIWDjSi+w=\n</code></pre> <p>\u5148\u8bd5\u7740\u8bfb\u53d6\u516c\u94a5\uff0c\u53d1\u73b0n\u53ef\u4ee5\u5206\u89e3\uff0c\u4e8e\u662f\u5c31\u6309\u5e38\u89c4\u6d41\u7a0b\u505a\u4e86</p> <p>exp.py</p> Python<pre><code>import base64\nfrom Crypto.PublicKey.RSA import *\nfrom Crypto.Util.number import *\nimport gmpy2\n\nc = base64.b64decode(open(\"flag.b64\",\"rb\").read())\nc = bytes_to_long(c)\nkey = import_key(open(\"key.pub\",\"rb\").read())\n\np = 863653476616376575308866344984576466644942572246900013156919\nq = 965445304326998194798282228842484732438457170595999523426901\nn = p*q\ne = 65537\nd = gmpy2.invert(e,(p-1)*(q-1))\nprint(long_to_bytes(pow(c,d,n)))\n\n#XCTF{SMALL_PRIMES_ARE_BAD}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_7","title":"\u56db\u3001\u5171\u6a21\u653b\u51fb","text":"<p>\u5171\u6a21\u653b\u51fb\uff1a</p> <p>\u5728\u5bf9\u540c\u4e00\u660e\u6587\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570n\uff0c\u5bf9\u540c\u4e00\u660e\u6587\uff0c\u7528\u4e0d\u540c\u7684\u5bc6\u94a5e\uff08\u4e24\u4e2a\u5bc6\u94a5\u662f\u4e92\u7d20\u7684\uff09\u8fdb\u884c\u52a0\u5bc6</p> <p>\u7ed3\u679c\u662f\u5f97\u5230\u4e24\u4e2a\u4e0d\u540c\u7684c</p> <p>\u539f\u7406\uff1a</p> \\[ \\begin{align} c_1 \\equiv m^{e_1} \\mod n\\\\\\\\ c_2 \\equiv m^{e_2} \\mod n \\end{align} \\] <p>\u901a\u8fc7\u6b27\u51e0\u91cc\u5f97\u6269\u5c55\u7b97\u6cd5\u6211\u4eec\u80fd\u5f97\u5230\\(x,y\\)\u6ee1\u8db3\\(e_1x+e_2y = 1\\)</p> \\[ \\therefore c_1^x \\times c_2^y \\equiv m^{e_1x + e_2y} \\equiv m \\mod n \\]"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_2","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import libnum\nimport gmpy2\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\nn1 = p * q\nn2 = p * q\ne1 = 2333\ne2 = 23333\nm = libnum.s2n(flag)\nc1 = pow(m, e1, n1)\nc2 = pow(m, e2, n2)\nprint(\"n1=\", n1)\nprint(\"n2=\", n2)\nprint(\"e1=\", e1)\nprint(\"e2=\", e2)\nprint(\"c1=\", c1)\nprint(\"c2=\", c2)\n\n#n1 = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779\nn2 = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779\ne1 = 2333\ne2 = 23333\nc1 = 1316116662134770690879814362103839780623420120527248536043840592146479052480574077985474161623763978563721124073172820410730492348846200098142706235343164470686127445583938273863894304189618247054649514955176136464273395879832878841555224421879457659795562326746943199675846414637238040550327393009642569894024250271081839428945999237716296592560124669418322569188493036148885333003876760965512925618500360394774816066758106739359762817644284120811162065280330204951295150904138010974815308787047834776406610525102814356091515999954110712767658162496023213125548829820563945272374105274832862682574678195529192009516\nc2 =6485241395763328009719746130709898541269729483150505308808259329749145687803066648274311801821624527910483266170666538736992203392620205417714840881369386852010836477498279266591695876758050686740322941452286584178315830797555697887040771666991377055060541491757349967338300117181859105577325308779010792879713808168285776399372981366988860647334022480774711504685240194804912592209253106123423232743785805952113875347267336118332317990496240807273787216894980604742600774512296661048914646776553393778079057461747246478299158814839681875752645552215714984659603917168300453505504140987829883479097467840565806608012\n</code></pre> <p><code>m = pow(c1,x,n) * pow(c2,y,n) % n</code></p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nn = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779\ne1 = 2333\ne2 = 23333\nc1 =1316116662134770690879814362103839780623420120527248536043840592146479052480574077985474161623763978563721124073172820410730492348846200098142706235343164470686127445583938273863894304189618247054649514955176136464273395879832878841555224421879457659795562326746943199675846414637238040550327393009642569894024250271081839428945999237716296592560124669418322569188493036148885333003876760965512925618500360394774816066758106739359762817644284120811162065280330204951295150904138010974815308787047834776406610525102814356091515999954110712767658162496023213125548829820563945272374105274832862682574678195529192009516\nc2 =6485241395763328009719746130709898541269729483150505308808259329749145687803066648274311801821624527910483266170666538736992203392620205417714840881369386852010836477498279266591695876758050686740322941452286584178315830797555697887040771666991377055060541491757349967338300117181859105577325308779010792879713808168285776399372981366988860647334022480774711504685240194804912592209253106123423232743785805952113875347267336118332317990496240807273787216894980604742600774512296661048914646776553393778079057461747246478299158814839681875752645552215714984659603917168300453505504140987829883479097467840565806608012\n\ns,x,y = gmpy2.gcdext(e1,e2)\nm = (pow(c1,x,n)*pow(c2,y,n))%n\nprint(long_to_bytes(m))\n\n#flag{01d80670b01b654fe4831a3e81870734}\n</code></pre> <p><code>gcdext(e1,e2)</code>\u8fd4\u56de3\u4e2a\u5143\u7d20</p> <p>\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\\(Boolean\\)\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5224\u65ad\u5b58\u4e0d\u5b58\u5728\\(x,y\\)\u4f7f\u5f97\\(e_1x+e_2y = 1\\)</p> <p>\u8fd4\u56de\u5f97\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\\(x,y\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2_2","title":"\u4f8b\u98982","text":"<p>\u8fd9\u4e2a\u4f8b\u9898\u7684\u60c5\u51b5\u662f\\(gcd(e_1,e_2)\\ne 1\\)</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom random import getrandbits\nimport gmpy2\nimport uuid\n\nwhile 1:\n    flag = \"flag{\" + str(uuid.uuid4()) + \"}\"\n    m = bytes_to_long(flag.encode())\n    p = getPrime(1024)\n    q = getPrime(1024)\n    n = p * q\n    e1 = getrandbits(10)\n    e2 = getrandbits(10)\n    if e1 != e2 and gmpy2.gcd(e1,e2) != 1:\n        break\n\nc1 = pow(m, e1, n)\nc2 = pow(m, e2, n)\nprint(\"e1 =\", e1)\nprint(\"e2 =\", e2)\nprint(\"n =\", n)\nprint(\"c1 =\", c1)\nprint(\"c2 =\", c2)\n</code></pre> <p>\u8fd9\u79cd\u9898\u76ee\u6211\u4eec\u8fd8\u662f\u6b63\u5e38\u63a8\u5bfc\uff0c\u8bbe\\(t = gcd(e_1,e_2)\\)\uff0c\u901a\u8fc7\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff0c\u6709</p> \\[ e_1x + e_2y = t \\] <p>\u5219</p> \\[ c_1^x \\times c_2^y \\equiv m^{e_1x+e_2y} \\equiv m^t \\mod n \\] <p>\u6839\u636et\u7684\u5927\u5c0f\u518d\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\uff0c\u6bd4\u5982t=3\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bd5\u7740\u7528\u4f4e\u52a0\u5bc6\u6307\u6570\u7684\u601d\u8def\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u5982\u679ct\u6bd4\u8f83\u5927\uff0c\u90a3\u4e48\u53ef\u4ee5\u518d\u6b21\u5f53\u4f5c\u4e00\u6b21RSA\u8fdb\u884c\u6c42\u89e3\u3002</p> <p>\u672c\u4f8bt = 2\uff0c\u76f4\u63a5\u5f00\u6839\u5c31\u884c</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\ne1 = 578\ne2 = 392\nn = 21792499489446653209359648268647408248484077502636323240941263512972521642966446318685589383376089358615828479732487823375467576966410911798574546152698546172208644494120844910028661801069139412883722092087841337354582470102991346201250757430966278341015814968426027288609918021263801588485143246793300627932938615206724828284751003817198828431954277335825721403220979778254648036632075276172476930299390290573025768956364488376300510746252434716167769851984446036711610150897081622960442923737196929758209816434803424884970510663599653463189492521652184966337230394292288573277654840483815385709060428243829968709733\nc1 = 1295899105546936416711955776176786556954959764395004520666273768220642845167647126115394711085928049897436984534359683209799926877399786065216458011526399070534983898250382591372240231327810785046739203554803467534631081973525005181861203752320250219830020069663762443152692331055158533035896110900630817135766754326408199206651276750278716441636585609321276880631239079781048185864263400051324827820941692502756433463495216541801444097560942509859140724554853380906157874504969878938634453309110942314571026225239704634981956565844426060346340677136929914119932647724346392582368980017754022031748246759437397697793\nc2 = 6100251841868768392049795926373721745054594119167283623934416754665831830741776139556785242664295441966913393337547165974512844660057299278828165715333417692799802949938590574117892067491764731548261988101287152727657523152041485072722017224763458684855801781252103126948392647769522681887089175624603484575515518773338807587100984947122699045372679023951413797420560947466351031076552444459222063798664625809884979352261000568340687804017980769948161583294444251776973765636460565633962599948356942127522339715718463747197473475842874431177106692482361060930677857750098337273277996678196019443721319477484374253966\n\nt = gmpy2.gcd(e1,e2)\ns,x,y = gmpy2.gcdext(e1,e2)\nm = gmpy2.iroot((pow(c1,x,n)*pow(c2,y,n))%n,t)\nprint(long_to_bytes(m[0]))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_8","title":"\u4e94\u3001\u4f4e\u52a0\u5bc6\u6307\u6570\u653b\u51fb","text":"<p>\u539f\u7406\uff1a</p> <p>\u52a0\u5bc6\u6307\u6570e\u5f88\u5c0f\u4e00\u822c\u662f3\uff0c\u5bfc\u81f4\u51fa\u73b0\u4e24\u4e2a\u60c5\u51b5</p> <p>\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\\(m^e &lt; n\\) \u5219 \\(c \\equiv m^{e} \\mod  n \\longrightarrow c = m^e\\) \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9c\u5f00e\u6b21\u65b9\u5c31\u53ef\u4ee5\u5f97\u5230m\u7684\u503c</p> <p>\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\\(m^e &gt; n\\)(\u7565\u5927\u4e00\u70b9\u70b9)\uff0c\u5219\\(m^e = k*n + c\\)\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u7206\u7834k</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_9","title":"\u4f8b\u9898","text":"<p>task.py</p> Python<pre><code>import libnum\nimport gmpy2\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\nprint(gmpy2.bit_length(m ** 3))\nwhile True:\n    p = libnum.generate_prime(504)\n    q = libnum.generate_prime(504)\n    n = p * q\n    phi_n = (p - 1) * (q - 1)\n    e = 3\n    if gmpy2.gcd(e, phi_n) == 1 and  phi_n%e !=0:\n        break\n\nc = pow(m, e, n)\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\n\n#c= 17567615026662297423639652671128685098763112348521263232850922784902991105809108670614334001294254886850775709702759646022208238160649099765454315761185950859820327234504422026634432251632399712621439201146\n3091635444512796333373451321795475333496092463760390199602320265733668648810943598505902205569125\nn = 1101676297168703265566511587913652821222614528632844563918598090813090976948138058144049294690727841463413972173051671908835164088465174349647584948964206244648736138253802417241570633968307801570794459668533128958442296813160786428069813867034205462528763830205245218089660432399549540588101288362866463\ne = 3\n</code></pre> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nn = 1101676297168703265566511587913652821222614528632844563918598090813090976948138058144049294690727841463413972173051671908835164088465174349647584948964206244648736138253802417241570633968307801570794459668533128958442296813160786428069813867034205462528763830205245218089660432399549540588101288362866463\ne = 3\nc = 175676150266622974236396526711286850987631123485212632328509227849029911058091086706143340012942548868507757097027596460222082381606490997654543157611859508598203272345044220266344322516323997126214392011463091635444512796333373451321795475333496092463760390199602320265733668648810943598505902205569125\nk = 0\n\nt = gmpy2.iroot(c,e)\nif t[1]:\n    print(long_to_bytes(t[0]))\nelse:\n    for i in trange() 1:\n        m = gmpy2.iroot(k*n+c,e)\n        if m[1]:\n            print(long_to_bytes(m[0]))\n            break\n        else:\n            k += 1\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_10","title":"\u516d\u3001\u5e7f\u64ad\u653b\u51fb","text":"<p>\u539f\u7406\uff1a</p> <p>\u660e\u6587\\(m\\)\u7528\u76f8\u540c\u7684\u5bc6\u94a5\\(e\\)\u548c\u4e0d\u540c\u7684\u6a21\\(n\\)\u8fdb\u884c\u52a0\u5bc6</p> <p>\u4e00\u822c\u4f1a\u5f97\u5230\u51e0\u7ec4\u4e0d\u540c\u7684\\(n\\)\u548c\\(c\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#n","title":"\u7b2c\u4e00\u79cd\u60c5\u51b5 \u591a\u7ec4n\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u516c\u56e0\u6570","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#buuctf-rsa5","title":"\u4f8b\u9898 BUUCTF-RSA5","text":"<p>task.txt</p> Text Only<pre><code>m = xxxxxxxx\ne = 65537\n========== n c ==========\nn = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207\nc = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320\n\nn = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759\nc = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855\n\nn = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491\nc = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862\n\nn = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751\nc = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613\n\nn = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067\nc = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357\n\nn = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369\nc = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932\n\nn = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137\nc = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179\n\nn = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191\nc = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006\n\nn = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941\nc = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934\n\nn = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491\nc = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869\n\nn = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019\nc = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467\n\nn = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299\nc = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971\n\nn = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551\nc = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175\n\nn = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987\nc = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457\n\nn = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837\nc = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842\n\nn = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451\nc = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724\n\nn = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499\nc = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024\n\nn = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973\nc = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887\n\nn = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603\nc = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889\n\nn = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659\nc = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_11","title":"\u601d\u8def","text":"<p>\u6bcf\u4e24\u4e2an\u6c42\u4e00\u6b21\u516c\u7ea6\u6570\uff0c\u770b\u770b\u662f\u5426\u6709\u4e0d\u4e3a1\u7684\u4e00\u7ec4n\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0cp\u5c31\u662f\u8fd9\u4e2a\u516c\u7ea6\u6570\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u6c42\u5176\u4ed6\u91cf\u4e86</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\ne = 65537\n\nn = [n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19]\nc = [c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19]\n\nfor i in range(len(n)):\n    for j in range(len(n)):\n        if (i!=j):\n            t = gmpy2.gcd(n[i],n[j])\n            if t != 1:\n                p = t\n                q = n[i] // p\n                d = gmpy2.invert(e,(p-1)*(q-1))\n                m = pow(c[i],d,n[i])\n                print(long_to_bytes(m))\n\n#flag{abdcbe5fd94e23b3de429223ab9c2fdf}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_12","title":"\u7b2c\u4e8c\u79cd\u60c5\u51b5 \u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","text":"<p>\u7b80\u8981\u8bf4\u660e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u7684\u4f5c\u7528\u5c31\u662f\u628a\u4e00\u4e2a\u540c\u4f59\u5f0f\u7ec4\u53d8\u6210\u4e00\u4e2a\u540c\u4f59\u5f0f,eg:</p> \\[ c_1 \\equiv m^e \\mod n_1 \\] \\[ c_2 \\equiv m ^e \\mod n_2 \\] \\[ c_3 \\equiv m ^e \\mod n_3 \\] <p>\u8f6c\u6362\u4e3a\u4e00\u4e2a\\(C \\equiv m ^ e \\mod N\\)\uff0c\\(N = lcm(n_1,n_2,n_3)\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_3","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import libnum\nimport gmpy2\nimport random\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\n\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\nn1 = p * q\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\nn2 = p * q\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\nn3 = p * q\nwhile 1:\n    e = random.randint(10, 20)\n    print(e)\n    if gmpy2.is_prime(e):\n        break\nc1 = pow(m, e, n1)\nc2 = pow(m, e, n2)\nc3 = pow(m, e, n3)\n\nprint(\"n1=\", n1)\nprint(\"n2=\", n2)\nprint(\"n3=\", n3)\n\nprint(\"c1=\", c1)\nprint(\"c2=\", c2)\nprint(\"c3=\", c3)\n</code></pre> <p>\u5148\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u51fa\\(m^e\\)\uff0c\u8fd9\u9898\u7684e\u53ea\u7ed9\u8303\u56f4\uff0c\u8981\u7206\u7834\u4e00\u4e0b</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\ndef Get_Mi(m_list,m):               #\u6c42\u884d\u6570\n    M_list = []\n    for mi in m_list:\n        M_list.append(m // mi)\n    return M_list\n\ndef Get_resMi(M_list,m_list):       #\u6c42\u4e58\u7387\n    resM_list = []\n    for i in range(len(M_list)):\n        resM_list.append(gmpy2.invert(M_list[i],m_list[i]))\n    return resM_list\n\ndef Get_result(a_list):\n    M_list = Get_Mi(m_list,m)\n    resM_list = Get_resMi(M_list,m_list)\n    result = 0\n    for i in range(len(M_list)):\n        result += M_list[i]*resM_list[i]*a_list[i]\n    result %= m\n    return result\n\nn1 = 16655230929893303490818415854457831426545038662809855283873228642358207995734291242944120042612699642460820594813654718158395826755230956722936107927889550129166619245152453353908373751380196656611349200623414836128383308653618062999595622747482867683840133843768870236300348203389275090871132570173650238774275209757683812077533989960172822335488251744796657926473009279723460304257252876756936524918018903158795894385111046938638194925881670388700872760201130485273663156422785999102754192840209476417602399017445296045070405343876349687582470436774316410697773759057621576657298096301937899052773787116133124199739\nn2 = 17197151926745749646602149115445210421300330711044282276861045275221683290586877554048509794473112203880585601275129330843554946888863132721219683639579200702355880529569042889789589005950061966309684759066705732225014741164779016525568884409690021988879475589545329149547046975086877521757237117008484775731784935960191717287332176327498377273179740487245459081737196777751408106728622513560888261855065717079007065635401835089216224111969668029246916986663313301660909538148574652809266532053889578734157117390082522831069594417637550812101652367765364077901612478983024721669687150628356918237152414368862535409859\nn3 = 18719461901666732419189610536735130974364055134601694187780706398369536769336080321122034942831217438281120989017698755904233940669427542442488330152862658754609065361849067002424120904308655036927580582916373684567047102601602588472175947665724244201887952599804681827419266055359412641159981152796138695901074514583606207162167385730873921563442166111892785482387108299191119048884993267729877797586421940344366636285656854837470348603688925980178978612114344024951042846249621559376348599687263736342957456838732355009637030035658212442442824658869094581324944034490700706979663405137522294780606800571433058912041\n\nc1 = 3530761236149189046680124371485374220252032991305088864647979778627799354583229731576585900490173357726425570018182390597284149666834264690795437972634538596441103368165128688664787322126097802985602065455316693754513332761284857157982201975554297034291092099307950246864758375115838291339394148547902128382917596947095456178572561422004708150053706114994560773293625641699691472764190426577272488084620105693964419578988589192873196530900413833531923536786853211065167782657153004342018675666293830194703777994380600060782651326623229047839109994778831432598543154184891096335217588164509636922274833553782288823349\nc2 = 7557835478962501903223351987016911891266554255050134264644805724502475848487138948948076311894495847429608136390014902405718084026208891531815323418707377349405409096779206918831458396991602033494429461919844309109113047361743133772636443322195238900874786548606687215969337920658068807801603115402783849082788527952834594443136756890747461628705174983562847145588532659589787532039981477468881131005056101092222499397893730056830156407331988257383965698358904379729558105489119604343081747549319382873235286788453435066434264212954607441597606413293491628299838317713381567250093086011058119721189087729804152444980\nc3 =8471234074077377509408346140986116360421840978074779990698043926601850838824365885362094731657766299393262223086536737448516669969503891677808275285733096884405583100485903641986516527279324847718603091709062689898441711907846902050004165404073776422495381050861998133576074526490209080137421773440295749900582039873013319584167081936219517593826232230971430937112005615502869367413205660317010303160932970748420125111225082886082306332340892549579826854620461821084886193470846195356695313518639669516456574134135244251956477677377976434266541164893562226872334598362396368708087248848222008201970781942468960022694\n\nm_list= [n1,n2,n3]\na_list= [c1,c2,c3]\n\nm = 1\nfor i in m_list:\n    m *= i\n\nresult = Get_result(a_list)\nfor e in range(10,20):\n    m = gmpy2.iroot(result,e)\n    if m[1]:\n        print(long_to_bytes(m[0]))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2-2021crazy_tech_rsa","title":"\u4f8b\u98982 \u9e64\u57ce\u676f2021\u2014\u2014Crazy_Tech_RSA","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom Crypto.Util.Padding import *\n\nFLAG = bytes_to_long(pad(b\"flag{??????}\",64))\ndef init_key():\n    p, q = getPrime(512), getPrime(512)\n    n = p*q\n    e = 9\n    while(GCD((p-1)*(q-1),e)!=1):\n        p, q = getPrime(512), getPrime(512)\n        n = p*q\n    d = inverse(e,(p-1)*(q-1))\n    return n,e,d\n\nn_list=list()\nc_list=list()\nfor i in range(9):\n    N,e,d=init_key()\n    n_list.append(N)\n    c=pow(FLAG,e,N)\n    c_list.append(pow(FLAG,e,N))\n    assert(pow(c,d,N)==FLAG)\nprint(\"n_list:\",n_list)\nprint(\"c_list:\",c_list)\n</code></pre> <p>\u5148\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u89e3\u51fa\\(m^e\\)</p> <p>\u518d\u5f00\u6839\u53f7</p> <p>\u8fd9\u9053\u9898\u7684e\u662f\u7ed9\u51fa\uff0c\u5982\u679ce\u6ca1\u6709\u7ed9\u51fa\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834e</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\ndef Get_Mi(m_list,m):               #\u6c42\u884d\u6570\n    M_list = []\n    for mi in m_list:\n        M_list.append(m // mi)\n    return M_list\n\ndef Get_resMi(M_list,m_list):       #\u6c42\u4e58\u7387\n    resM_list = []\n    for i in range(len(M_list)):\n        resM_list.append(gmpy2.invert(M_list[i],m_list[i]))\n    return resM_list\n\ndef Get_result(a_list):\n    M_list = Get_Mi(m_list,m)\n    resM_list = Get_resMi(M_list,m_list)\n    result = 0\n    for i in range(len(M_list)):\n        result += M_list[i]*resM_list[i]*a_list[i]\n    result %= m\n    return result\nm_list=[71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799, 92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949, 100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919, 59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847, 66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147, 120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377, 72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281, 69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951, 76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581]\na_list=[62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585, 46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900, 85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198, 14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656, 1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839, 2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981, 16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376, 31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996, 25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515]\n\nm = 1\nfor i in m_list:\n    m *= i\n\nresult = Get_result(a_list)\ne = 9\nm = gmpy2.iroot(result,e)\nif m[1]:\nprint(long_to_bytes(m[0]))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_13","title":"\u4e03\u3001\u7ef4\u7eb3\u653b\u51fb","text":"<p>\u653b\u51fb\u6761\u4ef6:\\(d &lt; \\frac{1}{3}N^{0.25}\\)</p> <p>\u539f\u7406:</p> \\[ ed \\equiv 1 \\mod \\phi(n) \\] <p>\u6709</p> \\[ ed = k\\phi(n) + 1 \\] <p>\u56e0\u4e3a\\(\\phi(n) \\approx n\\)</p> \\[ \\therefore ed \\approx kn + 1 \\] <p>\u4e24\u8fb9\u540c\u9664\\(dn\\)\u6709</p> \\[ \\frac{e}{n} \\approx \\frac{k}{d} + \\frac{1}{dn} \\] <p>\u5219</p> \\[ \\frac{e}{n} - \\frac{k}{d} \\approx \\frac{1}{dn} \\] <p>\u6ee1\u8db3\u52d2\u8ba9\u5fb7\u5b9a\u7406(\u8fd9\u4e2a\u5b9a\u7406\u7f51\u4e0a\u53ef\u4ee5\u641c\u5f97\u5230\uff0c\u6839\u636e\u8fd9\u4e2a\u5b9a\u7406\uff0c\u4e0d\u540c\u5f62\u5f0f\u7684n\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6bd4\u5982\u8bf4\u8fd9\u4e2a\u4f8b\u5b50\u9700\u8981\\(n=p\\times q\\)\u624d\u53ef\u4f7f\u7528)\uff0c\u56e0\u6b64\\(\\frac{e}{n}\\)\u53ef\u4ee5\u4f5c\u4e3a\\(\\frac{k}{d}\\)\u7684\u6536\u655b\u5b50</p> <p>\u8fde\u5206\u6570\u5c55\u5f00\u5373\u53ef</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_14","title":"\u4f8b\u9898","text":"<p>task.py</p> Python<pre><code>import libnum\nimport random\nimport gmpy2\n\n## \u751f\u6210\u968f\u673a\u7d20\u6570\np = libnum.generate_prime(512)\nq = libnum.generate_prime(512)\nm = \"flag{20d6e2da95dcc1fa5f5432a436c4be18}\"\n## \u5b57\u7b26\u4e32\u8f6c\u6570\u5b57\nm = libnum.s2n(m)\nn = p * q\nphi_n = (p - 1) * (q - 1)\n\n## \u8ba1\u7b97d\nwhile True:\n    nbits = 1024\n    d = random.getrandbits(nbits // 4)\n    if (libnum.gcd(d, phi_n) == 1 and 36 * pow(d, 4) &lt; n):\n        break\n## \u8ba1\u7b97e\ne = libnum.invmod(d, phi_n)\n\nc = pow(m, e, n)\n\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\n</code></pre> <p>exp.py</p> Python<pre><code>import gmpy2\nimport libnum\n\n\ndef continuedFra(x, y):\n    \"\"\"\u8ba1\u7b97\u8fde\u5206\u6570\n    :param x: \u5206\u5b50\n    :param y: \u5206\u6bcd\n    :return: \u8fde\u5206\u6570\u5217\u8868\n    \"\"\"\n    cf = []\n    while y:\n        cf.append(x // y)\n        x, y = y, x % y\n    return cf\n\n\ndef gradualFra(cf):\n    \"\"\"\u8ba1\u7b97\u4f20\u5165\u5217\u8868\u6700\u540e\u7684\u6e10\u8fdb\u5206\u6570\n    :param cf: \u8fde\u5206\u6570\u5217\u8868\n    :return: \u8be5\u5217\u8868\u6700\u540e\u7684\u6e10\u8fd1\u5206\u6570\n    \"\"\"\n    numerator = 0\n    denominator = 1\n    for x in cf[::-1]:\n        ## \u8fd9\u91cc\u7684\u6e10\u8fdb\u5206\u6570\u5206\u5b50\u5206\u6bcd\u8981\u5206\u5f00\n        numerator, denominator = denominator, x * denominator + numerator\n    return numerator, denominator\n\n\ndef solve_pq(a, b, c):\n    \"\"\"\u4f7f\u7528\u97e6\u8fbe\u5b9a\u7406\u89e3\u51fapq\uff0cx^2\u2212(p+q)\u2217x+pq=0\n    :param a:x^2\u7684\u7cfb\u6570\n    :param b:x\u7684\u7cfb\u6570\n    :param c:pq\n    :return:p\uff0cq\n    \"\"\"\n    par = gmpy2.isqrt(b * b - 4 * a * c)\n    return (-b + par) // (2 * a), (-b - par) // (2 * a)\n\n\ndef getGradualFra(cf):\n    \"\"\"\u8ba1\u7b97\u5217\u8868\u6240\u6709\u7684\u6e10\u8fd1\u5206\u6570\n    :param cf: \u8fde\u5206\u6570\u5217\u8868\n    :return: \u8be5\u5217\u8868\u6240\u6709\u7684\u6e10\u8fd1\u5206\u6570\n    \"\"\"\n    gf = []\n    for i in range(1, len(cf) + 1):\n        gf.append(gradualFra(cf[:i]))\n    return gf\n\n\ndef wienerAttack(e, n):\n    \"\"\"\n    :param e:\n    :param n:\n    :return: \u79c1\u94a5d\n    \"\"\"\n    cf = continuedFra(e, n)\n    gf = getGradualFra(cf)\n    for d, k in gf:\n        if k == 0: continue\n        if (e * d - 1) % k != 0:\n            continue\n        phi = (e * d - 1) // k\n        p, q = solve_pq(1, n - phi + 1, n)\n        if p * q == n:\n            return d\n\n\nn = 113881698992379349039968368927979997900777221951663104697020683691495129639829918739755194174063944178083527489820939138302751895652076620380510013941997706327553964127612610209509889011613768847759318892303231846117914554931459295347697888260576901354448014917692680573408654658384481284699735788978230690197\ne = 39068960413447607023613035707248214114819409621234801785480423979473767995171860917209502861408393208940683687475760366491413173744775811644295874981290403938714121977201901942939425294427737703229098649131737380098596135730392902019429964095866394165971291108245774407908011073271822915371753470010435225545\nc = 32897925577913728659288168937025744709859960639901500169867896018406263110205704273203287172003057450591000201857719871686024077615520906540631374442504017489026298422189715372129838501090730593164075113452055617571409044743698645392909829425374093273187125709095368164744188182156849031225036001381531504057\n\nd = wienerAttack(e, n)\nprint(d)\nm = pow(c, d, n)\nprint(libnum.n2s(m).decode())\n</code></pre> <p>exp\u4e5f\u53ef\u4ee5\u7528sagemath\u5199\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u793a\u4e86</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_15","title":"\u591a\u56e0\u5b50\u7684\u7ef4\u7eb3\u653b\u51fb","text":"<p>\u4f8b\u9898\u6765\u6e90\uff1a2023NKCTF\u2014\u2014complex_matrix</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2 as gy\nflag = ''\n\nk = 400\np, q = getPrime(741), getPrime(741)\nN = p * q\nphi = (p-1) * (q-1)\n_flag = bytes_to_long(flag)\np, q = getPrime(1024), getPrime(1024)\nd_array = [getPrime(k) for _ in range(4)] \ne_array = [inverse(i, phi) for i in d_array]\nc = pow(_flag, 65537, N)\nprint('N:',N)\nprint('e:',e_array)\nprint('c:',c)\n\n#N: 71841248095369087024928175623295380241516644434969868335504061065977014103487197287619667598363486210886674500469383623511906399909335989202774281795855975972913438448899231650449810696539722877903606541112937729384851506921675290984316325565141178015123381439392534417225128922398194700511937668809140024838070124095703585627058463137549632965723304713166804084673075651182998654091113119667582720831809458721072371364839503563819080226784026253\n#e: [65128799196671634905309494529154568614228788035735808211836905142007976099865571126946706559109393187772126407982007858423859147772762638898854472065889939549916077695303157760259717113616428849798058080633047516455513870697383339784816006154279428812359241282979297285283850338964993773227397528608557211742425548651971558377656644211835094019462699301650412862894391885325969143805924684662849869947172175608502179438901337558870349697233790535, 58756559706647121529575085912021603170286163639572075337348109911506627489265537716060463072086480156516641723700802217411122982693536541892986623158818442274840863016647800896033363360822503445344748132842451806511693779600370832206455202293028402486647422212959763287987847280322100701242139127654031151565924132562837893975505159702015125483479126108892709063135006366792197127007229210558758401679638300464111782814561428899998471531067163715, 34828685390969672139784723764579499920301439564705391196519314224159563070870933754477650614819514127121146216049444888554338415587165719098661141454627820126445291802801256297252654045398330613075575527685542980264993711077876535643646746742646371967302159565887123638001580042027272379341650995728849759541960087953160211696369079708787543303742132161742979856720539914370868829868891655221361545648778590685232034703220732697083024449894197969, 26717968456600556973167180286909817773394160817933525240720067057464671317174201540556176814203780603153696663101158205367554829261808020426363683474848952397963507069306452835776851274959389849223566030857588019845781623271395012194869024566879791449466064832273531795430185178486425688475688634844530106740480643866537205900809400383304665727460014210405339697947582657505028211149470787536144302545259243549176816653560626044921521516818788487]\n#c: 39297018404565022956251803918747154798377576057123078716166221329195959669756819453426741569480551313085435037629493881038383709458043802420338889323233368852331387845200216275712388921820794980987541224782392553528127093154957890356084331463340193478391679540506421250562554424770350351514435220782124981277580072039637811543914983033300225131364246910828188727043248991987332274929827173923543187017105236008487756190002204169623313222748976369\n</code></pre> <p>\u5b58\u4e2a\u811a\u672c\uff0c\u6765\u6e90\u6587\u7ae0\u5217\u8868 | NSSCTF</p> <p>exp.py</p> Python<pre><code>import gmpy2\nimport libnum\nisdigit = lambda x: ord('0') &lt;= ord(x) &lt;= ord('9')\n\ndef my_permutations(g, n):\n    sub = []\n    res = []\n    def dfs(s, prev):\n        if len(s) == n:\n            res.append(s[::])\n        for i in g:\n            if i in s or i &lt; prev:\n                continue\n            s.append(i)\n            dfs(s, max(prev, i))\n            s.remove(i)\n    dfs(sub, 0)\n    return res\n\nclass X3NNY(object):\n    def __init__(self, exp1, exp2):\n        self.exp1 = exp1\n        self.exp2 = exp2\n\n    def __mul__(self, b):\n        return X3NNY(self.exp1 * b.exp1, self.exp2 * b.exp2)\n\n    def __repr__(self):\n        return '%s = %s' % (self.exp1.expand().collect_common_factors(), self.exp2)\n\nclass X_Complex(object):\n    def __init__(self, exp):\n        i = 0\n        s = '%s' % exp\n        while i &lt; len(s):\n            if isdigit(s[i]):\n                num = 0\n                while i &lt; len(s) and isdigit(s[i]):\n                    num = num*10 + int(s[i])\n                    i += 1\n                if i &gt;= len(s):\n                    self.b = num\n                elif s[i] == '*':\n                    self.a = num\n                    i += 2\n                elif s[i] == '/':\n                    i += 1\n                    r = 0\n                    while i &lt; len(s) and isdigit(s[i]):\n                        r = r*10 + int(s[i])\n                        i += 1\n                    self.b = num/r\n            else:\n                i += 1\n        if not hasattr(self, 'a'):\n            self.a = 1\n        if not hasattr(self, 'b'):\n            self.b = 0\n\ndef WW(e, d, k, g, N, s):\n    return X3NNY(e*d*g-k*N, g+k*s)\ndef GG(e1, e2, d1, d2, k1, k2):\n    return X3NNY(e1*d1*k2- e2*d2*k1, k2 - k1)\n\ndef W(i):\n    e = eval(\"e%d\" % i)\n    d = eval(\"d%d\" % i)\n    k = eval(\"k%d\" % i)\n    return WW(e, d, k, g, N, s)\n\ndef G(i, j):\n    e1 = eval(\"e%d\" % i)\n    d1 = eval(\"d%d\" % i)\n    k1 = eval(\"k%d\" % i)\n\n    e2 = eval(\"e%d\" % j)\n    d2 = eval(\"d%d\" % j)\n    k2 = eval(\"k%d\" % j)\n\n    return GG(e1, e2, d1, d2, k1, k2)\n\ndef R(e, sn): ## min u max v\n    ret = X3NNY(1, 1)\n    n = max(e)\n    nn = len(e)\n    l = set(i for i in range(1, n+1))\n    debug = ''\n    u, v = 0, 0\n    for i in e:\n        if i == 1:\n            ret *= W(1)\n            debug += 'W(%d)' % i\n            nn -= 1\n            l.remove(1)\n            u += 1\n        elif i &gt; min(l) and len(l) &gt;= 2*nn:\n            ret *= G(min(l), i)\n            nn -= 1\n            debug += 'G(%d, %d)' % (min(l), i)\n            l.remove(min(l))\n            l.remove(i)\n            v += 1\n        else:\n            ret *= W(i)\n            l.remove(i)\n            debug += 'W(%d)' % i\n            nn -= 1\n            u += 1\n    ## print(debug, end = ' ')\n    return ret, u/2 + (sn - v) * a\n\ndef H(n):\n    if n == 0:\n        return [0]\n    if n == 2:\n        return [(), (1,), (2,), (1, 2)]\n    ret = []\n    for i in range(3, n+1):\n        ret.append((i,))\n        for j in range(1, i):\n            for k in my_permutations(range(1, i), j):\n                ret.append(tuple(k + [i]))\n    return H(2) + ret\n\ndef CC(exp, n):\n    cols = [0 for i in range(1&lt;&lt;n)]\n\n    ## split exp\n    texps = ('%s' % exp.exp1.expand()).strip().split(' - ')\n    ops = []\n    exps = []\n    for i in range(len(texps)):\n        if texps[i].find(' + ') != -1:\n            tmp = texps[i].split(' + ')\n            ops.append(0)\n            exps.append(tmp[0])\n            for i in range(1, len(tmp)):\n                ops.append(1)\n                exps.append(tmp[i])\n        else:\n            ops.append(0)\n            exps.append(texps[i])\n    if exps[0][0] == '-':\n        for i in range(len(exps)):\n            ops[i] = 1-ops[i]\n        exps[0] = exps[0][1:]\n    else:\n        ops[0] = 1\n    ## find e and N\n    l = []\n    for i in range(len(exps)):\n        tmp = 1 if ops[i] else -1\n        en = []\n        j = 0\n        while j &lt; len(exps[i]):\n            if exps[i][j] == 'e':\n                num = 0\n                j += 1\n                while isdigit(exps[i][j]):\n                    num = num*10 + int(exps[i][j])\n                    j += 1\n                tmp *= eval('e%d' % num)\n                en.append(num)\n            elif exps[i][j] == 'N':\n                j += 1\n                num = 0\n                if exps[i][j] == '^':\n                    j += 1\n                    while isdigit(exps[i][j]):\n                        num = num*10 + int(exps[i][j])\n                        j += 1\n                if num == 0:\n                    num = 1\n                tmp *= eval('N**%d' % num)\n            else:\n                j += 1\n        if tmp == 1 or tmp == -1:\n            l.append((0, ()))\n        else:\n            l.append((tmp, tuple(sorted(en))))\n\n    ## construct h\n    mp = H(n)\n    for val, en in l:\n        cols[mp.index(en)] = val\n    ## print(cols)\n    return cols\n\ndef EWA(n, elist, NN, alpha):\n    mp = H(n)\n    var('a')\n    S = [X_Complex(n*a)]\n    cols = [[1 if i == 0 else 0 for i in range(2^n)]]\n    for i in mp[1:]:\n        eL, s = R(i, n)\n        cols.append(CC(eL, n))\n        S.append(X_Complex(s))\n\n    alphaA,alphaB = 0, 0\n    for i in S:\n        alphaA = max(i.a, alphaA)\n        alphaB = max(i.b, alphaB)\n    ## print(alphaA, alphaB)\n    D = []\n    for i in range(len(S)):\n        ## print((alphaA-S[i].a), (alphaB - S[i].b))\n        D.append(\n            int(NN^((alphaA-S[i].a)*alpha + (alphaB - S[i].b)))\n        )\n    kw = {'N': NN}\n    for i in range(len(elist)):\n        kw['e%d' % (i+1)] = elist[i]\n\n    B = Matrix(ZZ, Matrix(cols).T(**kw)) * diagonal_matrix(ZZ, D)\n    L = B.LLL(0.5)\n    v = Matrix(ZZ, L[0])\n    x = v * B**(-1)\n    phi = int(x[0,1]/x[0,0]*elist[0])\n    return phi\n\ndef attack(NN, elist, alpha):\n    phi = EWA(len(elist), elist, NN, alpha)\n    print(phi)\n    return phi\n\n\nNN = 71841248095369087024928175623295380241516644434969868335504061065977014103487197287619667598363486210886674500469383623511906399909335989202774281795855975972913438448899231650449810696539722877903606541112937729384851506921675290984316325565141178015123381439392534417225128922398194700511937668809140024838070124095703585627058463137549632965723304713166804084673075651182998654091113119667582720831809458721072371364839503563819080226784026253\nelist = [65128799196671634905309494529154568614228788035735808211836905142007976099865571126946706559109393187772126407982007858423859147772762638898854472065889939549916077695303157760259717113616428849798058080633047516455513870697383339784816006154279428812359241282979297285283850338964993773227397528608557211742425548651971558377656644211835094019462699301650412862894391885325969143805924684662849869947172175608502179438901337558870349697233790535, 58756559706647121529575085912021603170286163639572075337348109911506627489265537716060463072086480156516641723700802217411122982693536541892986623158818442274840863016647800896033363360822503445344748132842451806511693779600370832206455202293028402486647422212959763287987847280322100701242139127654031151565924132562837893975505159702015125483479126108892709063135006366792197127007229210558758401679638300464111782814561428899998471531067163715, 34828685390969672139784723764579499920301439564705391196519314224159563070870933754477650614819514127121146216049444888554338415587165719098661141454627820126445291802801256297252654045398330613075575527685542980264993711077876535643646746742646371967302159565887123638001580042027272379341650995728849759541960087953160211696369079708787543303742132161742979856720539914370868829868891655221361545648778590685232034703220732697083024449894197969, 26717968456600556973167180286909817773394160817933525240720067057464671317174201540556176814203780603153696663101158205367554829261808020426363683474848952397963507069306452835776851274959389849223566030857588019845781623271395012194869024566879791449466064832273531795430185178486425688475688634844530106740480643866537205900809400383304665727460014210405339697947582657505028211149470787536144302545259243549176816653560626044921521516818788487]\nc = 39297018404565022956251803918747154798377576057123078716166221329195959669756819453426741569480551313085435037629493881038383709458043802420338889323233368852331387845200216275712388921820794980987541224782392553528127093154957890356084331463340193478391679540506421250562554424770350351514435220782124981277580072039637811543914983033300225131364246910828188727043248991987332274929827173923543187017105236008487756190002204169623313222748976369\nalpha = 400 / int(NN).bit_length()              #400\u6307\u7684\u662fd\u7684\u6bd4\u7279\nfor i in range(1, len(elist)+1):\n    var(\"e%d\" % i)\n    var(\"d%d\" % i)\n    var(\"k%d\" % i)\ng, N, s = var('g'), var('N'), var('s')\n\nfor i in range(len(elist)):\n    elist[i] = Integer(elist[i])\nphi = attack(NN, elist, alpha)\n\nd = gmpy2.invert(65537, phi)\nm = int(pow(c, d, NN))\nprint(libnum.n2s(m))\n## NKCTF{F10w3r_Hav3_r3start_Day_N0_Man_iS_Y0ung_Aga1n}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_16","title":"\u516b\u3001\u5171\u4eab\u7d20\u6570","text":"<p>\u4e24\u4e2an\u6709\u76f8\u540c\u7684\u56e0\u5b50\uff0c\u76f4\u63a5\u6c42\u516c\u56e0\u6570\u5c31\u597d\u4e86</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_17","title":"\u4f8b\u9898","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\np = libnum.generate_prime(1024)\nq1 = libnum.generate_prime(1024)\nq2 = libnum.generate_prime(1024)\nn1 = p * q1\nn2 = p * q2\ne = 65537\nc1 = pow(m, e, n1)\nc2 = pow(m, e, n2)\nprint(\"n1=\", n1)\nprint(\"n2=\", n2)\nprint(\"c1=\", c1)\nprint(\"c2=\", c2)\n</code></pre> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nn1 =22036096414750333101406538757625812613248444424049684758772058140377463618250795867832853117902163257003301132932490853355450673043991381637053778653821758783435921283322439267628837074056789021611782010444749024512216306961829453158759193969454712080047205883631153040900193575534288719429526169135614695862857156639195562501217424283401364740789214390377624598500939079307163832197534297642842744345373413423859103414676878739674227554029537817890874031594311152843060524913028526429344172693584167398664817727426767686424415189580527939256633114120720308173788544194669684834369132677253418971615644691719536820433\nn2 =17251653165250011947306159769694143433212298910745609670733920118632739529605426957617875166211610794383631191273183964010346725508667657137931394653419082978603166138439632713627832321960586938891805262605225424775586397813147240201440036009395991700175612039074317131837185920131565272816639771739150718839592250080325774556601865770352479323350280393818365902570673799584200153846520860657815432981116910233453207519365604533077996449249223280685559491369393277114405166293011856168173778428700718404816038991911974902005969923746846815798515831172402122367026339135245751136695128279659872423027539333024854133659\nc1 =1408937404754902028814920445701404613476983383738408959873219805755187459225302977012340464647741276263048769176603562703588286152102079561897286480939341184453940846603761664643956274520695676061184610702912592321357240109665885587701906369214592438887065694062151546241739122722790261888290706296747328780758965559093085406877315628139811554345214347799361309288949307776501119359571116522001853935560023530705364795364624152061166945046882418058831567088890277747158775876953662285842999920594778445526224560016361787941610542255000514402493843548068271595134879195073239601085319795505131267697387692179944010772\nc2 =12175155463891225370775786368564999885751076529394005420368968241428058465831204925081389807872272508968531564921996276054143112205083003561546962102395368677755381589762565680900651699885381615975236663522025080384481537727180649424984636506390139648492522347366656322729441290553251505232488994951243521740296115895651926783520321289129993169836271218322014443396220481361007479796234525990954874013729001502984583162486353287639655447340498584591591009224750835072707121652727119580764546240945763088815277130694950594020142961659318737857067755125666395542079926757603295535345281657293981259718286213812909191174\ne = 65537\n\nt = gmpy2.gcd(n1,n2)\nif t != 1:\n    p = t\n    q = n1 // p\n    d = gmpy2.invert(e,(p-1)*(q-1))\n    print(long_to_bytes(pow(c1,d,n1)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#dp","title":"\u4e5d\u3001dp\u6cc4\u9732","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_18","title":"\u539f\u7406\u63a8\u5bfc","text":"\\[ \\because d_p \\equiv d \\mod (p-1) \\] <p>\u5de6\u53f3\u540c\u4e58e\u5f97</p> \\[ d_p\\times e \\equiv d\\times e \\mod (p-1) \\] <p>\u5373</p> \\[ d\\times e = k_1(p-1) +d_p\\times e \\] \\[ \\because d\\times e \\equiv 1 \\mod \\phi(n) \\] \\[ \\therefore d\\times e = k_2(p-1)(q-1)+1 \\] \\[ \\therefore k_1(p-1)+dp\u00d7e = k_2(p-1)(q-1)+1 \\] <p>\u5316\u7b80\u5f97</p> \\[ d_p\\times e = (p-1)[k_2(q-1)-k_1] + 1 \\] \\[ \\because d_p &lt; p-1 \\] \\[ \\therefore 0&lt; k_2(q-1)-k_1 \\] <p>\u904d\u5386\\(i \\in (0,e)\\)\u7684\u6240\u6709\u503c\uff0c\u5982\u679c\\(d_p\\times e-1\\)\u80fd\u591f\u6574\u9664\\(i\\)\u5219\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\\(p-1\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_4","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\ne = 65537\nn = p * q\nphi = (p - 1) * (q - 1)\nd = gmpy2.invert(e, phi)\nprint(\"d=\",d)\ndp = d % (p - 1)\nc = pow(m, e, n)\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\nprint(\"dp=\", dp)\n</code></pre> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nn = 17954000555185130679232377513216924086370205717680723426279833171815673097846434355592747466782173529597978954062272371758852339605432963940809244445748900431763988392120156128524694217746804744076348205536430811607694098089294013508111154514184079159181563040241302764793111632189829652065825442796716027051750043654503172469553222784393034067341575558782690547449884992414106322578261286526556856377419622164651917718772498388922129465042492616904419638034789576380038341882418547113136903862482397767904921157094396562770484669239932933837196899640811033424030302285885080504355934919967693498648701839252087380477\nc = 1808490145328726635638705291306162339133116115672167390186563455429486046847680827004544020052978814401354685508506555963361065725012891622174617670820924531959433674273579973778657669162210657120785539629874456938159379512635932223403818177582242406964621317531188027900758868453176575753681627336133481701182056262584118645398172089436811174776978418919803975809158758707062473122656821152108292060156091196577573172937093806159669057467094718771367509856968694209472630329096814023864642219783061245777457366202879949123915168571990229277326042767587009623951348541055835347386485900505749475571895673653225741649\ndp =114993440308125678369350484461242628405806013372930792337329972720600942891053460367721272956155528263465552939386621554396883112994907299126303463171544968629898544811159986442249990975328659373544491636958873255689808151391606942912468529923159009459712396428051292828093059494024457367637991626193487727331\ne =65537\n\nfor i in range(1,e):\n    t = (dp * e - 1) % i        #\u8fd9\u662fp-1\u524d\u9762\u7684\u7cfb\u6570\n    if t == 0:\n        p = (dp * e - 1) // i + 1\n        if n % p == 0:\n            q = n // p\n            d = gmpy2.invert(e,(p-1)*(q-1))\n            print(long_to_bytes(pow(c,d,n)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2-e","title":"\u4f8b\u98982 e\u5f88\u5927","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\ne = libnum.generate_prime(128)\nn = p * q\nphi = (p - 1) * (q - 1)\nd = gmpy2.invert(e, phi)\n\ndp = d % (p - 1)\nc = pow(m, e, n)\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\nprint(\"dp=\", dp)\n</code></pre> <p>\u5728e\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7206\u7834\\((0,e)\\)\u7684\u503c\u5c31\u663e\u5f97\u4e0d\u73b0\u5b9e\u3002\u9700\u8981\u7528\u5176\u4ed6\u65b9\u6cd5 $$ \\because d_p \\times e = k(p-1)+1 $$</p> \\[ \\therefore dp \u00d7e \\equiv 1 \\mod (p-1) \\] <p>\u53d6\u4e00\u4e2a\u4e0e\\(p\\)\u4e92\u7d20\u7684\u5e38\u6570\\(a\\)\uff0c\u5219\u6709</p> \\[ a^{d_p\\times e} \\equiv a^{k(p-1)+1} \\equiv a \\mod p \\] \\[ \\therefore a^{dp\u00d7e}-a =kp \\] <p>\u7136\u540e\u4e0en\u6c42\u516c\u56e0\u6570\u5373\u53ef\u5f97\u5230p</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import getPrime,long_to_bytes\nimport gmpy2\n\nn= 18150086749964030204952772593650655354407282168407543480518017821905322058792108409169209539752974177937328703466169798097779231540410352308736251888449285307132274903811942187361234788236374036493935354342502760429195828731474432692281516115002087485890105917067613983079156790015275611914738187418424730456416770000646598861170179898016595068557049151791620868027603590052357726580431487083778514163249201637184318559165989454489485258667170883129099757366657203826319909509544670881866298317938263281638296241860739828567999093491297970389142395080780768892194380031018324855383292685388767246393785705551231780899\ne= 278817530653170259039233683650169866189\nc= 10813189255953686674328168562592345253502176950586624384555229875947895107088800774325110599057171743065073092283651992594106863499561887773348061509184951920329015539552207920010924284253109754443530283215130327152416667309504455641730629770856098336299767661535526880065006664806270833698497579073641076473649621250873969544362062393319711114090739414415757921473984666129110213417578310035188480139392986280529932137364474426391469019554935239234968517869914506321750458197587849623935306068749435995413807906558975073047215241796461878288003366415184144140612947217041288538376514085070670565572628317388808356563\ndp= 25015362092988139281045705051525732988903355826221062953430054346210238749256645995431509510448988062597830708438496723137288693056422683942336451600173722142331077900759633024803467824277121463213906905346623305038031660927650043841899168305106293747254814365869018331032172781810238397508103692878400636333\n\na = getPrime(10)\n\np = gmpy2.gcd(pow(a,dp*e,n)-a,n)    #pow(a,dp*e,n)-a \u5c31\u662fkp\nm = pow(c,dp,p)\nprint(long_to_bytes(m))\n\nq = n // p\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#m-powcdpp","title":"\u5173\u4e8em = pow(c,dp,p)\u7684\u8bc1\u660e","text":"<p>\u5f88\u591a\u9898\u76ee\u4f1a\u51fa\u73b0\u5728mod p\u4e0b\u6c42\u89e3\u7684\u60c5\u51b5\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u524d\u63d0\u6761\u4ef6\u4e3a\\(m &lt; p\\)\uff0c\u8bc1\u660e\u5982\u4e0b</p> \\[ \\because c \\equiv m^e \\mod n \\] \\[ ed \\equiv 1 \\mod \\phi(n) \\] \\[ d_p \\equiv d \\mod p-1 \\] <p>\u6240\u4ee5\u6709</p> \\[ e \\times d_p \\equiv 1 \\mod p-1 \\] <p>\u5373</p> \\[ e\\times d_p = k \\times (p-1) + 1 \\] \\[ \\therefore c ^{d_p} \\equiv m ^{e\\times d_p} \\equiv m ^{k(p-1)+1} \\equiv m \\mod p \\]"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3-dp","title":"\u4f8b\u98983 dp\u9ad8\u4f4d\u6cc4\u9732","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#e","title":"<code>e</code>\u4e0d\u662f\u5f88\u5927","text":"\\[ \\because ed_p \\equiv 1 \\mod p-1 \\] \\[ \\therefore e(d_{phigh} + x) \\equiv 1 \\mod p-1 \\] \\[ \\therefore e(d_{phigh} + x) = k(p-1) + 1 \\] \\[ \\therefore e(d_{phigh}+x) + k - 1\\equiv 0 \\mod p \\] <p>\u5982\u679ce\u4e0d\u5927\u7684\u8bdd\uff0c\u76f4\u63a5\u7206\u7834k\u89e3\u8fd9\u4e2a\u65b9\u7a0b\u5373\u53ef</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#e_1","title":"e\u5f88\u5927","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import flag\n\nm = bytes_to_long(flag)\np = getPrime(512)\nq = getPrime(512)\nn = p * q\ne = getPrime(64)\nd = inverse(e,(p-1)*(q-1))\n\ndp = d % (p-1)\nleak = dp &gt;&gt; 64 &lt;&lt; 64\nc = pow(m,e,n)\nprint(f\"n = {n}\")\nprint(f\"c = {c}\")\nprint(f\"e = {e}\")\nprint(f\"leak = {leak}\")\n\"\"\"\nn = 108867023585283899312601516631596145998654767437612286040742902945694826711187570537876759789643259431350352590412655898964386234903475482280911808566497936037152171435317938413515356868240854632004961172899360272761406519077380255802700944002126599829184693692273637230349297388495886988988512631044494610227\nc = 55610391226438079690691299914193010897347055835338032942001645697966587672596937470425142446679815934940962159432814479063990621696064239924347523289515556844359094065042974221093712989000153444928594999529082105262409273370242062803004814801742763253605838374098344711160380314529928211369000469059015996052\ne = 14257237624892167181\nleak = 2451130625204471881762267484243564297625381377098677997721378436579042927693972537775392209546509688501306219327699327137859174235486735043842710630825984\n\"\"\"\n</code></pre> \\[ \\because ed_p \\equiv 1 \\mod p-1 \\] \\[ \\therefore e(d_{phigh} + x) \\equiv 1 \\mod p-1 \\] \\[ \\therefore e(d_{phigh} + x) = k(p-1) + 1 \\] \\[ \\therefore e(d_{phigh}+x) + k - 1\\equiv 0 \\mod p  \\] <p>k\u548cx\u90fd\u662f64bit\u7684\u503c\uff0c\u7528\u4e8c\u5143copper\u5373\u53ef</p> <p>exp</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\nimport itertools\n\ndef small_roots(f, bounds, m=1, d=None):\n    if not d:\n        d = f.degree()\n        print(d)\n    R = f.base_ring()\n    N = R.cardinality()\n    f /= f.coefficients().pop(0)\n    f = f.change_ring(ZZ)\n    G = Sequence([], f.parent())\n    for i in range(m + 1):\n        base = N ^ (m - i) * f ^ i\n        for shifts in itertools.product(range(d), repeat=f.nvariables()):\n            g = base * prod(map(power, f.variables(), shifts))\n            G.append(g)\n    B, monomials = G.coefficient_matrix()\n    monomials = vector(monomials)\n    factors = [monomial(*bounds) for monomial in monomials]\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, factor)\n    B = B.dense_matrix().LLL()\n    B = B.change_ring(QQ)\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, 1 / factor)\n    H = Sequence([], f.parent().change_ring(QQ))\n    for h in filter(None, B * monomials):\n        H.append(h)\n        I = H.ideal()\n        if I.dimension() == -1:\n            H.pop()\n        elif I.dimension() == 0:\n            roots = []\n            for root in I.variety(ring=ZZ):\n                root = tuple(R(root[var]) for var in f.variables())\n                roots.append(root)\n            return roots\n    return []\n\nn = 108867023585283899312601516631596145998654767437612286040742902945694826711187570537876759789643259431350352590412655898964386234903475482280911808566497936037152171435317938413515356868240854632004961172899360272761406519077380255802700944002126599829184693692273637230349297388495886988988512631044494610227\nc = 55610391226438079690691299914193010897347055835338032942001645697966587672596937470425142446679815934940962159432814479063990621696064239924347523289515556844359094065042974221093712989000153444928594999529082105262409273370242062803004814801742763253605838374098344711160380314529928211369000469059015996052\ne = 14257237624892167181\nleak = 2451130625204471881762267484243564297625381377098677997721378436579042927693972537775392209546509688501306219327699327137859174235486735043842710630825984\n\nR.&lt;x,y&gt; = PolynomialRing(Zmod(n))\nf = e * (leak + x) + (y - 1)\nres = small_roots(f,(2^64,2^64),m=1,d=3)\nfor root in res:\n    dp_low = root[0]\n    dp = leak + dp_low\n    tmp = pow(2,e*dp,n) - 2\n    p = gmpy2.gcd(tmp,n)\n    q = n // p\n    d = inverse(e,(p-1)*(q-1))\n    m = pow(c,d,n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#dpdq","title":"\u5341\u3001dp,dq\u6cc4\u9732","text":"<p>\u5982\u679c\u9898\u76ee\u7ed9\u51fa\\(p,q,d_p,d_q\\)\uff0c\u90a3\u4e48\u76f4\u63a5\u5728\u6a21p\u548c\u6a21q\u4e0b\u6c42\u89e3\u5373\u53ef\uff0c\u5982\u679c\u6a21\u4e0d\u591f\u5927\uff0c\u518d\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u5373\u53ef</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_5","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\np = libnum.generate_prime(256)\nq = libnum.generate_prime(256)\ne = 65537\nn = p * q\nphi = (p - 1) * (q - 1)\nd = gmpy2.invert(e, phi)\nprint(\"d=\", d)\ndp = d % (p - 1)\ndq = d % (q - 1)\nc = pow(m, e, n)\n\nprint(\"p=\", p)\nprint(\"q=\", q)\nprint(\"c=\", c)\nprint(\"dp=\", dp)\nprint(\"dq=\", dq)\n</code></pre> <p>exp.sage</p> Python<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\np = 112454994630978850005784651276022327545786198205744597431888680937657203192943\nq = 111081771780978300442208201256251933100607227308819156491182881723714968913833\nc = 7847140580627012782899798457736961376953768684667159008470556786390887805253326211691923724846808704462396746105331991924048819814322540306282164012066426\ndp = 99016059099144522019375365089687785694029213535292918424815544402513220169503\ndq = 79504900574184798493105575420403885224379864982754477219462523963780735261625\nn = p*q\n\nmp = pow(c,dp,p)\nmq = pow(c,dq,q)\nprint(long_to_bytes(mp))\nprint(long_to_bytes(mq))\n\nm = crt([mp,mq],[p,q])\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_19","title":"\u5341\u4e00\u3001\u8003\u5bdf\u6b27\u62c9\u51fd\u6570\u8ba1\u7b97","text":"<p>\u6b27\u62c9\u51fd\u6570\u8ba1\u7b97\u65b9\u6cd5:</p> <ol> <li> <p>\\(n = 1\\)\uff0c\u5219\\(\\phi(n)= 1\\)</p> </li> <li> <p>\\(n\\)\u662f\u7d20\u6570\uff0c\u5219\\(\\phi(n) = n - 1\\)</p> </li> <li> <p>\\(n = p^r\\)(\\(p\\)\u4e3a\u7d20\u6570\uff0c\\(r\\)\u4e3a\u5927\u4e8e\u7b49\u4e8e1\u7684\u6574\u6570)\uff0c\u5219\\(\\phi(n) = p^{r-1}(p-1)\\)</p> </li> <li> <p>\\(n = \\prod_{i=1}^kp_i\\)\uff0c\u5219\\(\\phi(n) = \\prod_{i=1}^{k}(p_i-1)\\)</p> </li> </ol>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_6","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\np = libnum.generate_prime(512)\nn = p ** 5\ne = 65537\nc = pow(m, e, n)\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\n</code></pre> <p>\u672c\u9898\u8003\u67e5\\(n = p^r\\)</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nn = 109671394618534156590716540772306636060550711465455829526382945168271125218007503161807386153286648328529071790130095763349089936429151343426469415497138306284842512691195220650548494501337831207724397925027651025644976364368511262187227825083865690186591571250267479440100917127211656877566179258870510690665025580200477574123634259670039152125607834855408269848826938902407472374892693266119859709658788565014195766992713646832624001067898323913639712284673673557898135411273837250194079399384826384835709060797351332323930309379071015140548478132323474993964925055399350661600068568602468295748573856804293659942047543032878436316918991716636681116631322082919386178460096115355963882313682994343822128626370850455024905542367255179074441679461101331332093019368492643\ne = 65537\nc = 83166081100602571613112201467626632459949037182633475449066025299006894059443612622701975752551708249083077180755342065457682925338233793688583913228361068561515321097016501900442865692643652803949920987493441500744743553498018003210308290969303190355756775977367324120441564693220728163622472865572357639056734898022442794130514936425334924283145153496702507951466618177405870656868713199816223765264228006032228439676574053839549440372521050502986043855511540855864034336902304414848547480112182226920285820386643015671106933140105835060319823245206934565859078021518312305243997612804935774414840491355098017977514736057368000596388974956265042651277403519473262257945986199408278855335170546242641727930526697102351648388874227840119205560199015181257296591985205818\np = 10186351850605898834333098258639828910824016865517013383611935945131883947448223014077315468253377357594775340263769153442019216205089695821439736926082483\n\nphi = p**5-p**4\nd = gmpy2.invert(e,phi)\nprint(long_to_bytes(pow(c,d,n)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2_3","title":"\u4f8b\u98982","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\np = libnum.generate_prime(512)\nq = libnum.generate_prime(512)\nn = p ** 3 * q\ne = 65537\nc = pow(m, e, n)\nprint(\"q=\", q)\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\n</code></pre> <p>\\(\\because n = p^{3}\u00d7q\\)</p> <p>\\(\\therefore \\phi(n) = (p^{3}-p^{2})\u00d7(q-1)\\)</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nq = 13345672330679418443866848695749753384841350112452462690350565885192764753702964893062035116023096943358384379827500462723016224486435032522188166109529147\nn = 4663711063632671446966617442890809468548735750386480905820144168615122369358088158709822723959108989276525102755551604204514586528122441075489492157644479194671784485228731421500391142158401889177506319977349707503678947872777602384171260874359045585814189677748712566088220734735479518470883541166059233676170283938881683675790979128058243582825012415020019043126740915522571217495119060031729061070896580899732991209113679151755713858497630999746612658308778711613697038750661479517187094033129979714688161348844542070263109259258937863241431480105798790363889436471998002323269704182369356300287043940743500087239\ne = 65537\nc = 4050303218893912343776312253598257474375000778822229482734626960955864773175090306426885201033332266573903303684635688485414725284644108123459136702775991157244389086147955395682206311752151842740679445903864544823592773331496589661187968392779340028173948172003460012051289357755574536619241969492822938688821287700132262703677149526846356206143053559703859606442209340834979412336031660590507709503830013770022485005101363701272279629510056964018618212014677531338026866748075406283893942248599825641124694672878533987994699411744521757385858889763503705242690212615083634186373933214686193717950163215308138805348\n\np = n // q \nphi = (p**3-p**2)*(q-1)\nd = gmpy2.invert(e,phi)\nprint(long_to_bytes(pow(c,d,n)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3_1","title":"\u4f8b\u98983","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\np = libnum.generate_prime(512)\nq = gmpy2.next_prime(p)\nr = libnum.generate_prime(512)\nn = p * q * r\ne = 65537\nc = pow(m, e, n)\nprint(\"r=\", r)\nprint(\"n=\", n)\nprint(\"e=\", e)\nprint(\"c=\", c)\n\nr = 12328943069972158868300333965019293732240349172933398867374450193780676916633106046545397891902123683693837126404908611670219604587587151306224914062663729\nn = 928445951911850156618541782850215900925329423880533465612155142015978599609287623859912813317551629221695490535012732781489396534420011145723987610606038091488823086647363964394753700158320900867101659445170118179077194271099520502633316318889163873291574934282498061117736456183503867870294570083013883365868242889035609602940685335912371326827533418614992221705810476710807373254363162373986374486325350746366851935451369892949745302442034805629514003196071631\ne = 65537\nc = 327716655224470059950709685055600963837116578216483343492948888372401723689223347212508532985781828794786448842515029515358422017875793926582832247025212149474404973170422295165602666360784347416812528617973764432916955654602356835327769633635513894485943553309743509322858937973710628023758816806471875016815994664897320150855163109437521642800230902661034555151514311149333258071668655344069451897282357234220538922127548822361859943829665459953651351620958628\n</code></pre> \\[ \\because n = p\\times q \\times r \\] \\[ \\therefore \\phi(n)=(p-1)\u00d7(q-1)\u00d7(r-1) \\] <p>exp.py</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nr = 12328943069972158868300333965019293732240349172933398867374450193780676916633106046545397891902123683693837126404908611670219604587587151306224914062663729\nn = 928445951911850156618541782850215900925329423880533465612155142015978599609287623859912813317551629221695490535012732781489396534420011145723987610606038091488823086647363964394753700158320900867101659445170118179077194271099520502633316318889163873291574934282498061117736456183503867870294570083013883365868242889035609602940685335912371326827533418614992221705810476710807373254363162373986374486325350746366851935451369892949745302442034805629514003196071631\ne = 65537\nc = 327716655224470059950709685055600963837116578216483343492948888372401723689223347212508532985781828794786448842515029515358422017875793926582832247025212149474404973170422295165602666360784347416812528617973764432916955654602356835327769633635513894485943553309743509322858937973710628023758816806471875016815994664897320150855163109437521642800230902661034555151514311149333258071668655344069451897282357234220538922127548822361859943829665459953651351620958628\n\nt = gmpy2.iroot(n//r,2)[0]\np = gmpy2.next_prime(t)\nq = n // p // r\n\nphi = (p-1)*(q-1)*(r-1)\nd = gmpy2.invert(e,phi)\nprint(long_to_bytes(pow(c,d,n)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#ephi","title":"\u5341\u4e8c\u3001e\u548cphi\u4e0d\u4e92\u7d20","text":"<p>\u8fd9\u79cd\u60c5\u51b5\u5728\u6bd4\u8d5b\u4e2d\u6bd4\u8f83\u5e38\u89c1\u3002\u5728\u505a\u8fd9\u7c7b\u9898\u76ee\u4e4b\u524d\uff0c\u5efa\u8bae\u5148\u4e86\u89e3sagemath\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5</p> <p>\u5f53\\(e\\)\u4e0e\\(\\phi(n)\\)\u4e0d\u4e92\u7d20\u65f6\uff0c\u5219\u4e0d\u5b58\u5728\u6a21\\(\\phi(n)\\)\u7684\u9006\u5143\\(d\\)\u4f7f\u5f97\\(ed \\equiv 1(mod \\quad \\phi(n))\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_7","title":"\u5904\u7406\u65b9\u5f0f1:","text":"<p>\u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u662f\u6700\u7b80\u5355\u4e5f\u662f\u6700\u5e38\u89c4\u7684</p> <p>\u4ee4\\(t = gcd(e,\\phi(n))\\)</p> <p>\u8bbe\\(e = e'\\times t\\)\uff0c\u5219\\(e' = \\frac{e}{t}\\)</p> <p>\u5219\\(c \\equiv m^e \\mod n \\longrightarrow c \\equiv (m ^t)^{e'} \\mod n\\)</p> <p>\u6c42\\(e'\\)\u5bf9\u5e94\u7684\\(d\\)\uff0c\u89e3\u51fa\\(m^t \\equiv c^d \\mod n\\)</p> <p>\u5728\\(m^t &lt; n\\)\u7684\u60c5\u51b5\u4e0b\u5f00\u6839\u5373\u53ef\u83b7\u5f97\\(m\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_8","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport random\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\n\nwhile 1:\n    e = random.randint(100, 1000)\n    p = libnum.generate_prime(1024)\n    q = libnum.generate_prime(1024)\n    phi_n = (p - 1) * (q - 1)\n    t = gmpy2.gcd(e, phi_n)\n    if t == e:\n        continue\n    t1 = e // t\n    if gmpy2.invert(t1, phi_n) and t &gt; 1:\n        break\nn = p * q\nc = pow(m, e, n)\nprint(\"p=\", p)\nprint(\"q=\", q)\nprint(\"e=\", e)\nprint(\"c=\", c)\n</code></pre> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\np = 171854505164939390402295426493389586289972154851849140728417624619463988154808053805729538974688869671559032639921300088271234681410193379381085714252211392886408792711387524667824537369266846649573070209815436507363007636943912350208275895292853801665488228125846058987049326903498661007035974420392738723323\nq = 145951936627745243523384785325963094339728144811023266133546816860787405503371056873662508073284279180417626507724315776654624382665743082805910036891739754019932290977071276850239245644056698685966997752654383650764557358649666141576105936215709831181842086893228254304235678475375978464394818353375373451573\nn = p*q\ne = 830\nc= 4413268199893347044741276120215584703428167052744516280494996526431559720190092261631829389527634625276020346166956540800884139234489942113764564139232948414263452549927818365096023041932432723988241639527832673120924732407691135173154085803338322715604275530735968992726708155724384432557207264839248502158712330572704509492520346044648676055223193900826626346707083590815897507927683083455678855000344499804465073698745769989966769567497677402668725931090596642504740789789740965769347050166069295727209131555338513809368814890255851742010120871635378654904140016065148709710206173069000137023824698858539843753921\n\nphi = (p-1)*(q-1)\nt = gmpy2.gcd(e,phi)\nif t != 1:\n    print(t)\n    e1 = e // t\n    d = gmpy2.invert(e1,phi)\n    m = pow(c,d,n)\n    print(long_to_bytes(gmpy2.iroot(m,t)[0]))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2_4","title":"\u5904\u7406\u65b9\u5f0f2:","text":"<p>\u4f7f\u7528sagemath\uff0c\u5efa\u7acb\u6709\u9650\u57df\uff0c\u7136\u540e\u5f00\u6839\uff0c\u4ee5\u4e00\u4e2a\u4f8b\u9898\u7b80\u8981\u8bf4\u660e</p> <p>task.py</p> Python<pre><code>from secret import flag\nfrom Crypto.Util.number import *\n\nm = bytes_to_long(flag)\ne = 2\np = getPrime(512)\nq = getPrime(512)\nn = p * q\n\nc = pow(m,e,n)\nprint(f\"c = {c}\")\nprint(f\"p = {p}\")\nprint(f\"q = {q}\")\nprint(f\"n = {n}\")\n\n\"\"\"\nc = 3136716033729406787100895984031132591372408032397380657110411936279557864804613451803228203558942365572618855741582340710496951283998288077886684480798840909615843832888291672118118174611935731391325961\np = 6995170125828760803175021463861846748101755707034027896253692749933464491557662142860042836548188827042797130278821285624095121174944527912522028416084887\nq = 12272700813225623560132355056448185486009112345760462061684545263916365691442580749089054915285013385322910087693364777427389347919562222271368766699836367\nn = 85849630091910220195429598000499270755938566349764235961421375317755949910077610512936495968854306764812963460054159547290157103999299511719875933657730205460710045409434205381402766954402709130620384187298033137488697869180531872534818830013412093865496100309052022972165149312556870258314510623053681685529\n\"\"\"\n</code></pre> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\n\nc = 3136716033729406787100895984031132591372408032397380657110411936279557864804613451803228203558942365572618855741582340710496951283998288077886684480798840909615843832888291672118118174611935731391325961\np = 6995170125828760803175021463861846748101755707034027896253692749933464491557662142860042836548188827042797130278821285624095121174944527912522028416084887\nq = 12272700813225623560132355056448185486009112345760462061684545263916365691442580749089054915285013385322910087693364777427389347919562222271368766699836367\nn = 85849630091910220195429598000499270755938566349764235961421375317755949910077610512936495968854306764812963460054159547290157103999299511719875933657730205460710045409434205381402766954402709130620384187298033137488697869180531872534818830013412093865496100309052022972165149312556870258314510623053681685529\n\nR.&lt;x&gt; = PolynomialRing(Zmod(p))\nf = x^2 - c\nres1 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(q))\nf = x^2 - c\nres2 = f.roots()\n\nfor i in res1:\n    for j in res2:\n        m = crt([int(i[0]),int(j[0])],[p,q])\n        print(long_to_bytes(m))\n</code></pre> <p>\u5f53\\(m &lt; p\\)\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u4e5f\u80fd\u51fa</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_20","title":"\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\u7684\u7efc\u5408","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#12022ctfshow","title":"\u4f8b\u98981\u2014\u20142022ctfshow\u5377\u738b\u676f","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import bytes_to_long\nfrom secrets import p,q,r,s,t,flag\n\nn = p * q * r * s * t\ne = 2\nm = bytes_to_long(os.urandom(500) + flag)\nc = pow(m,e,n)\n\nprint(p,q,r,s,t,sep='\\n')\nprint(c)\n\n'''\n145332367700944303747548912160113939198078051436029477960348968315913956664143693347226702600438608693933768134575289286283267810723137895903153829001826223446477799895493265422562348917012216790077395795861238257357035152687833639085415763850743538206986781418939737511715957738982536382066693822159860701263\n116660458253067608044065523310547233337730583902133756095473339390057738510707447906971188577217274861047379404014140178165569604404468897712846876108444468370709141219302291601408652742006268186059762087155933131837323952675627966299810891805398890428420575425160696531236660480933905879208166090591482794763\n157931722402853245421436270609912823260313730941283152856444641969403238646482562190531038393124087232554754746464603598717356255570166081501573727336977292059427220330169044611674973569766966838498453232642731737958791706086957762244686953294662693939604300864961637325536379321027705854708492453330690705531\n100973451687449518854742673778783266158999451072058606348222018797891147675959983616210003484476577612134482311993701677242007759556951494382833070563369964294544839433671087037596159753825249018950693369209927951667775267086896180395776150188902057785214767230658487267587289809918132337927575673868568976679\n93960345071948255233882121683650797512129333868351496468898834736770441398743300745703393838320587998953678254272245400344928586394089488734271897540051673996675973642347859306921527430850673334243441180183460927865980713929789963587608547554858491264614271309608925634272282292964002897650355047792764365447\nn'''\n</code></pre> <p>\u770b\u4f3c\u767d\u7ed9\uff0c\u5176\u5b9e\\(e\\)\u548c\\(\\phi(n)\\)\u4e0d\u4e92\u7d20</p> <p>\u800c\u4e14\u5728flag\u524d\u9762\u586b\u5145\u4e86\u4e00\u4e9b\u6570\u636e\uff0c\u5bfc\u81f4\\(m^e &gt; n\\)\uff0c\u6240\u4ee5\u76f4\u63a5\u5f00\u6839\u53f7\u4e5f\u4e0d\u53ef\u53d6</p> <p>\u672c\u9898\\(c \\equiv m^e \\mod n\\)\uff0c\u7b49\u4ef7\u4e8em\u6ee1\u8db3\u4e0b\u9762\u4e94\u4e2a\u5f0f\u5b50:</p> \\[ m^2 \\equiv c \\mod p \\] \\[ m^2 \\equiv c \\mod q \\] \\[ m^2 \\equiv c \\mod r \\] \\[ m^2 \\equiv c \\mod s \\] \\[ m^2 \\equiv c \\mod t \\] <p>\u6211\u4eec\u57285\u4e2a\u56e0\u5b50\u4e0b\u6c42\u89e3\uff0c\u518d\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u7ec4\u5408\u5373\u53ef</p> <p>exp.sage</p> Python<pre><code>from sympy.ntheory.modular import crt\nimport gmpy2\nfrom Crypto.Util.number import *\n\np = 145332367700944303747548912160113939198078051436029477960348968315913956664143693347226702600438608693933768134575289286283267810723137895903153829001826223446477799895493265422562348917012216790077395795861238257357035152687833639085415763850743538206986781418939737511715957738982536382066693822159860701263\nq = 116660458253067608044065523310547233337730583902133756095473339390057738510707447906971188577217274861047379404014140178165569604404468897712846876108444468370709141219302291601408652742006268186059762087155933131837323952675627966299810891805398890428420575425160696531236660480933905879208166090591482794763\nr = 157931722402853245421436270609912823260313730941283152856444641969403238646482562190531038393124087232554754746464603598717356255570166081501573727336977292059427220330169044611674973569766966838498453232642731737958791706086957762244686953294662693939604300864961637325536379321027705854708492453330690705531\ns = 100973451687449518854742673778783266158999451072058606348222018797891147675959983616210003484476577612134482311993701677242007759556951494382833070563369964294544839433671087037596159753825249018950693369209927951667775267086896180395776150188902057785214767230658487267587289809918132337927575673868568976679\nt = 93960345071948255233882121683650797512129333868351496468898834736770441398743300745703393838320587998953678254272245400344928586394089488734271897540051673996675973642347859306921527430850673334243441180183460927865980713929789963587608547554858491264614271309608925634272282292964002897650355047792764365447\nc = 9144597920381774885442906257311149465702295057238600973973598305004391534618770363098565074541384771979931799878381439264848137810353858418200992191234142740194489573540381681161219332611454834544291634628456257670178843484698324641739324687497388018406214041657278323855749902661752448796122517061920880552011343608609622885787617238758769398972009949575526258430282648817039091284796330585349957724522615105102735930258969562103112238020133587096826386028128471852377225525357348919204333121695432662339443004327748973224423132988376298843862056631045488285859621661802413201793962883794915513510467912312842687601478117040419013468059983777273699192408773551806581458197324620065210523913467414181480875280203580147077789063808832356486197271376615883221558265591069223727607585313240243619515521180600435114131162272519949101464089935441251751426683447701142156416866113627126765919641034042927519834229168536331952275698122511502745177547569813354280565828372968703810158857859460406828090199683324760956105682902577189283246483314689365570862217407333103243336691401424548702387876409228977278498691200028282744239512091373110111792177228979867318546462714521296256938374618636206565791541769138267080789842400796973226733816939794717596194090232425688504890234304977612220790858557639246367437740975495450011676714198668471438814299689325208882261918460708833888406187912527346628912894921059735420931656953236560178909180587372589456926690219114173193202048332172538564489660440225377822914097420807957784201785024166011709377791129\ne = 2\n\nR.&lt;x&gt; = PolynomialRing(Zmod(p))\nf = x^e - c\nf = f.monic()\nres1 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(q))\nf = x^e - c\nf = f.monic()\nres2 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(r))\nf = x^e - c\nf = f.monic()\nres3 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(s))\nf = x^e - c\nf = f.monic()\nres4 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(t))\nf = x^e - c\nf = f.monic()\nres5 = f.roots()\n\n\nfor i in res1:\n    for j in res2:\n        for k in res3:\n            for a in res4:\n                for b in res5:\n                    m_list = [int(i[0]),int(j[0]),int(k[0]),int(a[0]),int(b[0])]\n                    a_list= [p,q,r,s,t]\n                    solve = CRT_list(m_list,a_list)\n                    flag = long_to_bytes(solve)\n                    if b'ctfshow' in flag:\n                        print(flag)\n## ctfshow{D0_y0u_R3aLly_Kn0w_Ra8IN_alg0RI7HM?}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#22018azurersa","title":"\u4f8b\u98982\u2014\u20142018\u9ad8\u6821\u8fd0\u7ef4\u6311\u6218\u8d5bAzureRSA","text":"<p>task.txt</p> Python<pre><code>n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L\ne1=0xfae3aL\nc1=0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbeaL\nn2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L\ne2=0x1f9eaeL\nc2=0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347L\nassert pow(flag,e1,n1)==c1\nassert pow(flag,e2,n2)==c2\nassert gcd(e1,(p1-1)*(q1-1))==14\nassert gcd(e2,(p2-1)*(q2-1))==14\n</code></pre> <p>\u672c\u9898\u4e24\u4e2an\u5747\u53ef\u5206\u89e3</p> <p>\u5206\u89e3\u60c5\u51b5\u5982\u4e0b:</p> Python<pre><code>p1 = 12037827528067911684278967221392433256129944002157200272548317200308481572950474775891360447285969682243206009995242277136633522897723532096467191105943909\nq1 = 12120327527644543811107783655014863098833219936714394976342507913322405566177432644931575840816861543106701611662013978324877080018872656490603706071067111\np2 = 12120327527644543811107783655014863098833219936714394976342507913322405566177432644931575840816861543106701611662013978324877080018872656490603706071067111\nq2 = 12301580698247665838432962460247894405698817646605188562297985838079356879336309758823376086396761749681729993573203954506346863479448531269351981555913253\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\\(n_1,n_2\\)\u4e4b\u95f4\u5b58\u5728\u516c\u56e0\u6570</p> <p>\u8bbe\\(e\\)\u548c\\(\\phi(n)\\)\u7684\u516c\u56e0\u6570\u4e3a\\(t\\)\uff0c\u5219\\(e = e't\\)\uff0c\\(e' = \\frac{e}{t}\\)\uff0c\u6709\\(e'd \\equiv 1 \\mod \\phi(n)\\)</p> <p>\\(\\therefore m^t \\equiv c^d \\mod n\\)</p> <p>\u672c\u9898\\(t = 14\\)\uff0c\u4e8e\u662f\u6211\u4eec\u6709</p> \\[ res_1 \\equiv m^{14} \\mod n_1 \\] \\[ res_2 \\equiv m^{14} \\mod n_2 \\] <p>\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u89e3\u51fa\u5176\u7279\u89e3\\(res\\)\uff0c\u5373\\(res \\equiv m^{14} \\mod lcm(n_1,n_2) \\longrightarrow res \\equiv m^{14} \\mod pq_1q_2\\)</p> <p>\u628a\u5b83\u5f53\u4f5c\u4e00\u4e2a\\(e=14\\)\u7684RSA\u52a0\u5bc6\uff0c\u6b64\u65f6\u6211\u4eec\u8ba1\u7b97\\(\\phi(n) = (p_1 - 1)(q_1-1)(q_2-1)\\)</p> <p>\u6211\u4eec\u5206\u522b\u6c42\\(e = 14\\)\u548c\\(p_1 -1\\),\\(q_1-1\\),\\(q_2-1\\)\u7684\u516c\u56e0\u6570\uff0c\u7ed3\u679c\u5206\u522b\u662f2,14,2</p> <p>\u90a3\u4e48\u6211\u4eec\u8f6c\u6362\u6210\\(res \\equiv m^{14} \\mod p_1q_2\\)</p> <p>\u6211\u4eec\u5206\u522b\u5728\\(\\mod p_1\\)\u548c\\(\\mod q_2\\)\u4e0b\u7528\u6709\u9650\u57df\u5f00\u6839\u6c42\u51fa\u89e3\uff0c\u518d\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406</p> <p>exp.sage</p> Python<pre><code>n1 = 0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723\ne1 = 0xfae3a\nc1 = 0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbea\nn2 = 0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63\ne2 = 0x1f9eae\nc2 = 0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347\n\np1 = 12037827528067911684278967221392433256129944002157200272548317200308481572950474775891360447285969682243206009995242277136633522897723532096467191105943909\nq1 = 12120327527644543811107783655014863098833219936714394976342507913322405566177432644931575840816861543106701611662013978324877080018872656490603706071067111\np2 = 12120327527644543811107783655014863098833219936714394976342507913322405566177432644931575840816861543106701611662013978324877080018872656490603706071067111\nq2 = 12301580698247665838432962460247894405698817646605188562297985838079356879336309758823376086396761749681729993573203954506346863479448531269351981555913253\n\n\nphi1 = (p1-1)*(q1-1)\nphi2 = (p2-1)*(q2-1)\ndef decrypt(c,e,phi,n):\n    t = gmpy2.gcd(e,phi)\n    if t != 1:\n        e1 = e // t\n        d = gmpy2.invert(e1,phi)\n        m = pow(c,d,n)\n        return m\n\nres1 = decrypt(c1,e1,phi1,n1)\nres2 = decrypt(c2,e2,phi2,n2)\n\n\nres = crt([res1,res2],[n1,n2])\nphi = (p1 - 1)*(q2 - 1)\nn = p1 * q2\nm2 = decrypt(res,14,phi,n)\n\nR.&lt;x&gt; = PolynomialRing(Zmod(p1))\nf = x^2 - m2\nsol1 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(q2))\nf = x^2 - m2\nsol2 = f.roots()\n\nfor i in sol1:\n    for j in sol2:\n        m = crt([int(i[0]),int(j[0])],[p1,q2])\n        print(long_to_bytes(m))\n        ## EIS{Comm0n_Div15or_plus_CRT_is_so_easy|cb2733b9e69ab3a9bd526fa1}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3_2","title":"\u5904\u7406\u65b9\u5f0f3\uff1a","text":"<p>AMM\u5f00\u6839\uff0c\u5177\u4f53\u539f\u7406\u53ef\u4ee5\u53c2\u8003:\u5947\u5b89\u4fe1\u653b\u9632\u793e\u533a-\u6709\u9650\u57df\u4e0a\u7684\u9ad8\u6b21\u5f00\u6839AMM\u7b97\u6cd5\u5728RSA\u4e0a\u7684\u5e94\u7528 (butian.net)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2021crypto1","title":"\u4f8b\u9898 2021\u9ed1\u76fe\u676fCrypto1","text":"<p>task.txt</p> Python<pre><code>e = 1801\nc = pow(m,e,p)\n\nc =821562155714228494350968286343241874202753771452745916900616612053610190986294297934462409534126095213198464996196364868528238538372119009517541428785632007137206972918081643841690069171088425923887930051635578719252415693144672179185417101210954906623326286804995637775062840407550493095027500638719998\u00a0\np =19897846550210846565807788524492364050901480736489979129040638436463635149815428186161001280958415730930156556581274966745574164608778242980049611665461488306439665507971670397595035647317930606555771720849158745264269952668944940061576328219674721623208805067371087817766416300084129945316973502412996143\u00a0\n</code></pre> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\nimport time\nimport random\nfrom tqdm import tqdm\n\ne = 1801\nc = 821562155714228494350968286343241874202753771452745916900616612053610190986294297934462409534126095213198464996196364868528238538372119009517541428785632007137206972918081643841690069171088425923887930051635578719252415693144672179185417101210954906623326286804995637775062840407550493095027500638719998\np = 19897846550210846565807788524492364050901480736489979129040638436463635149815428186161001280958415730930156556581274966745574164608778242980049611665461488306439665507971670397595035647317930606555771720849158745264269952668944940061576328219674721623208805067371087817766416300084129945316973502412996143\n\ndef AMM(o, r, q):\n    start = time.time()\n    print('\\n----------------------------------------------------------------------------------')\n    print('Start to run Adleman-Manders-Miller Root Extraction Method')\n    print('Try to find one {:#x}th root of {} modulo {}'.format(r, o, q))\n    g = GF(q)\n    o = g(o)\n    p = g(random.randint(1, q))\n    while p ^ ((q-1) // r) == 1:\n        p = g(random.randint(1, q))\n    print('[+] Find p:{}'.format(p))\n    t = 0\n    s = q - 1\n    while s % r == 0:\n        t += 1\n        s = s // r\n    print('[+] Find s:{}, t:{}'.format(s, t))\n    k = 1\n    while (k * s + 1) % r != 0:\n        k += 1\n    alp = (k * s + 1) // r\n    print('[+] Find alp:{}'.format(alp))\n    a = p ^ (r**(t-1) * s)\n    b = o ^ (r*alp - 1)\n    c = p ^ s\n    h = 1\n    for i in range(1, t):\n        d = b ^ (r^(t-1-i))\n        if d == 1:\n            j = 0\n        else:\n            print('[+] Calculating DLP...')\n            j = - discrete_log(a, d)\n            print('[+] Finish DLP...')\n        b = b * (c^r)^j\n        h = h * c^j\n        c = c ^ r\n    result = o^alp * h\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    print('Find one solution: {}'.format(result))\n    return result\ndef findAllPRoot(p, e):\n    print(\"Start to find all the Primitive {:#x}th root of 1 modulo {}.\".format(e, p))\n    start = time.time()\n    proot = set()\n    while len(proot) &lt; e:\n        proot.add(pow(random.randint(2, p-1), (p-1)//e, p))\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    return proot\n\ndef findAllSolutions(mp, proot, cp, p):\n    print(\"Start to find all the {:#x}th root of {} modulo {}.\".format(e, cp, p))\n    start = time.time()\n    all_mp = set()\n    for root in proot:\n        mp2 = mp * root % p\n        assert(pow(mp2, e, p) == cp)\n        all_mp.add(mp2)\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    return all_mp\n\nmp = AMM(c,e,p)\np_proot = findAllPRoot(p, e)\nmps = findAllSolutions(mp, p_proot, c, p)\n\nfor i in mps:\n    flag = long_to_bytes(int(i))\n    if b'flag' in flag:\n        print(flag)\n        ## flag{Enj01_m1sc_A0d_cr0}\n</code></pre> <p>\u53e6\u4e00\u79cd\u89e3\u6cd5:</p> Python<pre><code>from Crypto.Util.number import *\n\ne = 1801\nc = 821562155714228494350968286343241874202753771452745916900616612053610190986294297934462409534126095213198464996196364868528238538372119009517541428785632007137206972918081643841690069171088425923887930051635578719252415693144672179185417101210954906623326286804995637775062840407550493095027500638719998\np = 19897846550210846565807788524492364050901480736489979129040638436463635149815428186161001280958415730930156556581274966745574164608778242980049611665461488306439665507971670397595035647317930606555771720849158745264269952668944940061576328219674721623208805067371087817766416300084129945316973502412996143\n\ng = pow(2,(p-1) // e,p)\nd0 = inverse(e,(p - 1) // e)\nm0 = pow(c,d0,p)\n\nfor i in range(e):\n    m = m0 * pow(g,i,p) % p\n    flag = long_to_bytes(m)\n    if b\"flag\" in flag:\n        print(flag)\n</code></pre> <p>\u6ca1\u641e\u61c2\u539f\u7406</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#rabin","title":"\u5341\u4e09\u3001Rabin","text":"<p>\u7b80\u5355\u4e86\u89e3\u4e00\u4e0bRabin\u52a0\u5bc6\u4f53\u5236\u6d41\u7a0b</p> <p>\u4e00\u5e74\u540e\u56de\u5934\u518d\u770b\uff0cRabin\u53ea\u662fe=2\u7684RSA</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_21","title":"\u5bc6\u94a5\u751f\u6210","text":"<p>\u9009\u53d6\u4e24\u4e2a\u5927\u7d20\u6570\\(p,q\\)\uff0c\u5e76\u4e14\u6ee1\u8db3</p> \\[ p \\equiv 3 \\mod 4 \\] \\[ q \\equiv 3 \\mod 4 \\] <p>\u5373\\(p,q\\)\u90fd\u662f\\(4k + 3\\)\u5f62\u5f0f\u7684\u7d20\u6570</p> <p>\u63a5\u4e0b\u6765\u8ba1\u7b97\\(n = p\\times q\\)\uff0c\\((p,q)\\)\u4f5c\u4e3a\u79c1\u94a5\uff0c\\(n\\)\u4f5c\u4e3a\u516c\u94a5</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_22","title":"\u52a0\u5bc6\u8fc7\u7a0b","text":"\\[ c \\equiv  m^2(mod \\quad n) \\]"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_23","title":"\u89e3\u5bc6\u8fc7\u7a0b","text":"\\[ \\because c \\equiv m^2 \\mod n \\] <p>\u5373</p> \\[ c \\equiv m ^ 2 \\mod p \\] \\[ c \\equiv m ^ 2 \\mod q \\] <p>\u6839\u636e\u4e8c\u6b21\u5269\u4f59\u5f97</p> <p>\\(c^{\\frac{p-1}{2}} \\equiv 1 \\mod p\\)\u540c\u4e58c\u5f97\uff1a\\(c^{\\frac{p+1}{2}} \\equiv c \\mod p\\)\uff0c\u5f00\u6839\u53f7\u5f97\\(c^{\\frac{p+1}{4}} \\mod p\\)\uff0c\u6240\u4ee5\\(m_p =c^{\\frac{p+1}{4}}\\)</p> <p>\u540c\u7406\\(m_q = c^{\\frac{q+1}{4}}\\)</p> <p>\u6b64\u65f6\u5f97\u5230\u4e24\u4e2a\u540c\u4f59\u5f0f</p> \\[ m \\equiv m_p \\mod p \\] \\[ m \\equiv m_q \\mod q \\] <p>\u518d\u89e3\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u5373\u53ef</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_24","title":"\u4f8b\u9898","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport random\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\np = libnum.generate_prime(512)\nq = libnum.generate_prime(512)\nn = p * q\ne = 2\nc = pow(m, e, n)\nprint(\"p=\", p)\nprint(\"q=\", q)\nprint(\"n=\", n)\nprint(\"c=\", c)\nprint(\"e=\", e)\n</code></pre> <p>exp.py</p> Python<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\np= 13314362720917602133969793252481444316247612541287913579795797774897851142465370812511985605994998073433561235021924708067874236781706611485522371488232623\nq= 10711516497864529822020903304369858958930042711451857859791558135232705853374332295320094676061294774680048276363750484537945067473851592618816785752809803\nn= 142617015943661365869136488949628046624950745436416195175536421279851751774402291519010668496730147866462378904972514253007029491632653461771497495733152729212900224242492221133006321373540619376544526943204146111719397605460529531608654329571698129077171108416638061409327725762114841023226929126272738803269\nc= 3136716033731857617369889733308430982192049734478834150612954276064433287574994581343168243135342097712334250357890492021703404008556737899236668582163912130637742227325170121650071435166332685070232329\ne= 2\n\ninv_p = gmpy2.invert(p, q)\ninv_q = gmpy2.invert(q, p)\nmp = pow(c, (p + 1) // 4, p)\nmq = pow(c, (q + 1) // 4, q)\na = (inv_p * p * mq + inv_q * q * mp) % n\nb = n - int(a)\nc = (inv_p * p * mq - inv_q * q * mp) % n\nd = n - int(c)\n## \u56e0\u4e3arabin \u52a0\u5bc6\u6709\u56db\u79cd\u7ed3\u679c\uff0c\u5168\u90e8\u5217\u51fa\u3002\naa = [a, b, c, d]\nfor i in aa:\n    print(long_to_bytes(int(i)))\n</code></pre> <p>\u4e24\u6b21\u6709\u9650\u57df\u5f00\u6839\u518d\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u4e5f\u53ef\u4ee5\u89e3</p> <p>exp.sage</p> Python<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\np = 13314362720917602133969793252481444316247612541287913579795797774897851142465370812511985605994998073433561235021924708067874236781706611485522371488232623\nq = 10711516497864529822020903304369858958930042711451857859791558135232705853374332295320094676061294774680048276363750484537945067473851592618816785752809803\nn = 142617015943661365869136488949628046624950745436416195175536421279851751774402291519010668496730147866462378904972514253007029491632653461771497495733152729212900224242492221133006321373540619376544526943204146111719397605460529531608654329571698129077171108416638061409327725762114841023226929126272738803269\nc = 3136716033731857617369889733308430982192049734478834150612954276064433287574994581343168243135342097712334250357890492021703404008556737899236668582163912130637742227325170121650071435166332685070232329\ne = 2\n\nR.&lt;x&gt; = PolynomialRing(Zmod(p))\nf = x^2 - c\nres1 = f.roots()\n\nR.&lt;x&gt; = PolynomialRing(Zmod(q))\nf = x^2 - c\nres2 = f.roots()\n\nfor i in res1:\n    for j in res2:\n        m = crt([int(i[0]),int(j[0])],[p,q])\n        print(long_to_bytes(int(m)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#rabin_1","title":"\u591a\u6b21\u89e3Rabin","text":"<p>\u9898\u76ee\u6765\u6e90NSSCTF ROUND#11</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import flag\n\np = getPrime(512)\nq = getPrime(512)\nassert p &gt; q\nn = p*q\ne = 65536\nm = bytes_to_long(flag)\nnum1 = (pow(p,e,n)-pow(q,e,n)) % n\nnum2 = pow(p-q,e,n)\nc = pow(m,e,n)\n\nprint(\"num1=\",num1)\nprint(\"num2=\",num2)\nprint(\"n=\",n)\nprint(\"c=\",c)\n</code></pre> <p>\u5148\u5f53\u811a\u672c\u5c0f\u5b50</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nnum1= 134186458247304184975418956047750205959249518467116558944535042073046353646812210914711656218265319503240074967140027248278994209294869476247136854741631971975560846483033205230015783696055443897579440474585892990793595602095853960468928457703619205343030230201261058516219352855127626321847429189498666288452\nnum2= 142252615203395148320392930915384149783801592719030740337592034613073131106036364733480644482188684184951026866672011061092572389846929838149296357261088256882232316029199097203257003822750826537629358422813658558008420810100860520289261141533787464661186681371090873356089237613080052677646446751824502044253\nn= 154128165952806886790805410291540694477027958542517309121222164274741570806324940112942356615458298064007096476638232940977238598879453357856259085001745763666030177657087772721079761302637352680091939676709372354103177660093164629417313468356185431895723026835950366030712541994019375251534778666996491342313\nc= 9061020000447780498751583220055526057707259079063266050917693522289697419950637286020502996753375864826169562714946009146452528404466989211057548905704856329650955828939737304126685040898740775635547039660982064419976700425595503919207903099686497044429265908046033565745195837408532764433870408185128447965\n\ntmp = num1+num2\n\np = gmpy2.gcd(n,tmp)\nq = n // p\n\ninv_p = gmpy2.invert(p, q)\ninv_q = gmpy2.invert(q, p)\n\ncs = [c]\nfor i in range(16):\n    ps = []\n    for c2 in cs:\n        r = pow(c2, (p + 1) // 4, p)\n        s = pow(c2, (q + 1) // 4, q)\n\n        x = (r * inv_q * q + s * inv_p * p) % n\n        y = (r * inv_q * q - s * inv_p * p) % n\n        if x not in ps:\n            ps.append(x)\n        if n - x not in ps:\n            ps.append(n - x)\n        if y not in ps:\n            ps.append(y)\n        if n - y not in ps:\n            ps.append(n - y)\n    cs = ps\n\nfor m in cs:\n    print(long_to_bytes(m))\n</code></pre> <p>\u4e0b\u9762\u7684\u4e09\u4e2a\u9898\u578b\u5c06\u6d89\u53caCopperSmith\uff0c\u5e08\u5085\u4eec\u53ef\u4ee5\u901a\u8bfb\u4e00\u904d:\u5bc6\u7801\u5b66\u5b66\u4e60\u7b14\u8bb0 \u4e4b Coppersmith\u2019s Method | Van1sh\u7684\u5c0f\u5c4b (jayxv.github.io)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#m","title":"\u5341\u56db\u3001m\u9ad8\u4f4d\u6cc4\u9732","text":"<p>\u8fd9\u7c7b\u9898\u76ee\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u4ee3\u7801\u5f88\u76f4\u767d\u7684\u7ed9\u51fam\u7684\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u5229\u7528flag\u5934\u4e4b\u7c7b\u7684\u4fe1\u606f\u6765\u83b7\u53d6\u9ad8\u4f4d</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1m","title":"\u60c5\u51b51\uff1a\u76f4\u63a5\u7ed9\u51fam\u7684\u9ad8\u4f4d","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_25","title":"\u4f8b\u9898","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\n\nm = libnum.s2n(flag)\np = libnum.generate_prime(512)\nq = libnum.generate_prime(512)\nn = p * q\nm1 = ((m &gt;&gt; 300) &lt;&lt; 300)\ne = 3\nc = pow(m, e, n)\n\nprint(\"n =\", n)\nprint(\"c =\", c)\nprint(\"e =\", e)\nprint(\"m1 =\", m1)\n\"\"\"\nn = 89449659165373664419599666603079125351786161891254199117045952387178298091726343680198833028457552478360463001966084179577576990766724383528486250298768666097882661565765202949881673799125950008229527772973603379916117935790703989917655837756217393025354969853495238961762669326690100145696530290685977278593\nc = 175676150266637032446485438802315236532165610668245377791442524569846934587347877260997089793552024464242407355427955652050327122630649033488529560135042402737218074153101020540979958586399761415542047850951996733997549252310811350769808163958303048261417309757780500291307110596781699418188514782424677\ne = 3\nm1 = 56006392791978632601307849398736624069259692797382051345599538506145258779412417900757721790977933312\n\"\"\"\n</code></pre> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import long_to_bytes\n\nn = 89449659165373664419599666603079125351786161891254199117045952387178298091726343680198833028457552478360463001966084179577576990766724383528486250298768666097882661565765202949881673799125950008229527772973603379916117935790703989917655837756217393025354969853495238961762669326690100145696530290685977278593\nc = 175676150266637032446485438802315236532165610668245377791442524569846934587347877260997089793552024464242407355427955652050327122630649033488529560135042402737218074153101020540979958586399761415542047850951996733997549252310811350769808163958303048261417309757780500291307110596781699418188514782424677\ne = 3\nm1 = 56006392791978632601307849398736624069259692797382051345599538506145258779412417900757721790977933312\n\n\nR.&lt;x&gt; = PolynomialRing(Zmod(n))\nf = (m1 + x)^e - c\nres = f.small_roots(X = 2^300,beta = 1)\nif res != []:\n    m = m1 + res[0]\n    print(long_to_bytes(int(m)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2flag","title":"\u60c5\u51b52:\u5229\u7528flag\u5934\u7b49\u5df2\u77e5\u4fe1\u606f","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2024xyctf","title":"\u4f8b\u9898\u2014\u20142024XYCTF \u53cd\u65b9\u5411\u7684\u5bc6\u7801 \u76f8\u601d","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nimport hashlib\nfrom secrets import flag\n\ndef hash(x):\n    return hashlib.sha256(x.encode()).digest()\n\ndef pad(message):\n    return message + hash(str(len(message)))\n\nm = bytes_to_long(pad(flag))\np = getStrongPrime(512)\nq = getStrongPrime(512)\nn = p * q\ne = 3\nprint(pow(m, e, n))\nprint(n)\n## 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053\n## 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243\n</code></pre> <p>m\u53ef\u4ee5\u770b\u4e3a<code>m = bytes_to_long(b\"XYCTF{xxxxxxxxxxxxxxxxxxxx}\" + pad)</code></p> <p>pad\u53ef\u4ee5\u7206\u7834\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6c42\u89e3\u4e2d\u95f4\u672a\u77e5\u7684\u5b57\u7b26\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2am\u9ad8\u4f4d\u548c\u4f4e\u4f4d\u6cc4\u9732\u7684\u9898</p> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\nimport hashlib\n\nc = 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053\nn = 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243\n\ndef hash(x):\n    return hashlib.sha256(x.encode()).digest()\n\nfor i in range(10,40):                                  #i\u4ee3\u8868{}\u4e2d\u672a\u77e5\u6570\u7684\u4e2a\u6570\n    prefix = bytes_to_long(b\"XYCTF{\") * 256^(32 + 1 + i)\n\n    pad = hash(str(i+7))\n    low = bytes_to_long(b\"}\" + pad)\n\n    R.&lt;x&gt; = PolynomialRing(Zmod(n))\n\n    f = (prefix + x*256^33 + low)^3 - c\n    f = f.monic()\n    res = f.small_roots(X=256^i)\n    if res != []:\n        m = prefix + int(res[0])*256^33 + low\n        print(long_to_bytes(int(m)))\n        ## XYCTF{!__d3ng__hu0__1@n__3h@n__Chu__!}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#p","title":"\u5341\u4e94\u3001p\u9ad8\u4f4d\u6cc4\u9732","text":"<p>\u8fd9\u7c7b\u9898\u76ee\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u4ee3\u7801\u5f88\u76f4\u767d\u7684\u7ed9\u51fap\u7684\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u5229\u7528\u5176\u4ed6\u4fe1\u606f\u83b7\u53d6p\u7684\u9ad8\u4f4d</p> <p>p\u7684\u9ad8\u4f4d\u6cc4\u9732\u662f\u6709\u6761\u4ef6\u7684\uff0c\u7ecf\u8fc7\u6211\u7684\u4e0d\u5b8c\u5168\u51c6\u786e\u7684\u7edf\u8ba1(\u4ee5512bit\u7684p\u4e3a\u4f8b)</p> <p>\u5f53<code>beta=0.4</code>\u65f6\uff0c\u5728\u672a\u77e5\u4f4d\u6570\u5c11\u4e8e\u7b49\u4e8e227bit\u65f6\uff0c\u53ef\u4ee5\u6062\u590dp</p> <p>\u5f53<code>beta=0.4,epsilon=0.01</code>\u65f6\uff0c\u5728\u672a\u77e5\u4f4d\u6570\u5c11\u4e8e\u7b49\u4e8e248bit\u65f6\uff0c\u53ef\u4ee5\u6062\u590dp</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_9","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\np = libnum.generate_prime(1024)\nq = libnum.generate_prime(1024)\nn = p * q\ne = 65537\np1 = ((p &gt;&gt; 256) &lt;&lt; 256)\nc = pow(m, e, n)\nprint(\"n =\", n)\nprint(\"c =\", c)\nprint(\"e =\", e)\nprint(\"p1 =\", p1)\n\"\"\"\nn = 25412529168113241701978154909309452589891277619233574149177682749114694998754065178357796120946044207438029964927062297462478639487054245771692139625849995546462111249773750389956600652870714030563605023702161513442866609937847422556059608499864578170270126239637444959812121589196901129645564580908045557218006330672260617798453633543627607790892960895904087738679492228779277752739734608284915605638138243297198792777112179909034121738317943791638151509031222745851940804609153731748776002638455252820409482251897734211263626398933847861538578761515233197699408866935293343456161438639398890089434015875977218250399\nc = 11832017536820850822990089557724269863899815227776358234936663617587241671432348464674233033185082415100398087268764691266148966050993867487703853445199053612975005945065305992972854436834255574224203980327515867976652513642869374642661621841855735886358661741631500029948344306194937625466742946921106659582316643893949403548828556819907948714983462986507817955376793071143086032085845182853003634916425312911434933416448638808160541352834497686975061092257675653110414264672490891200433992043618040530275350634723043175666891682239033429796170154980192829798607191555482341170827932551423162833473892514972387547888\ne = 65537\np1 = 174553077493661081676268351785469032783476528521014320107330821253075206651723812600343204348306643031578070226902979453793372875180300634043015175074746912397887970195415967163417566827459210112867899640388623940244194079258961165834045219906954836822089775153665401751146892024327963835455414059781203165184\n\"\"\"\n</code></pre> <p>exp.sage</p> Python<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\nn = 25412529168113241701978154909309452589891277619233574149177682749114694998754065178357796120946044207438029964927062297462478639487054245771692139625849995546462111249773750389956600652870714030563605023702161513442866609937847422556059608499864578170270126239637444959812121589196901129645564580908045557218006330672260617798453633543627607790892960895904087738679492228779277752739734608284915605638138243297198792777112179909034121738317943791638151509031222745851940804609153731748776002638455252820409482251897734211263626398933847861538578761515233197699408866935293343456161438639398890089434015875977218250399\nc = 11832017536820850822990089557724269863899815227776358234936663617587241671432348464674233033185082415100398087268764691266148966050993867487703853445199053612975005945065305992972854436834255574224203980327515867976652513642869374642661621841855735886358661741631500029948344306194937625466742946921106659582316643893949403548828556819907948714983462986507817955376793071143086032085845182853003634916425312911434933416448638808160541352834497686975061092257675653110414264672490891200433992043618040530275350634723043175666891682239033429796170154980192829798607191555482341170827932551423162833473892514972387547888\ne = 65537\np_high = 174553077493661081676268351785469032783476528521014320107330821253075206651723812600343204348306643031578070226902979453793372875180300634043015175074746912397887970195415967163417566827459210112867899640388623940244194079258961165834045219906954836822089775153665401751146892024327963835455414059781203165184\n\nR.&lt;x&gt; = PolynomialRing(Zmod(n))\nf = p_high + x\nres = f.small_roots(X = 2^256,beta = 0.4)\nif res != []:\n    p = p_high + int(res[0])\n    q = n // p\n    d = gmpy2.invert(e,(p-1)*(q-1))\n    m = pow(c,d,n)\n    print(long_to_bytes(int(m)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#22023litctf-babyxor","title":"\u4f8b\u98982\u2014\u20142023LitCTF Babyxor","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import flag\n\nm = bytes_to_long(flag)\nassert len(flag)==32\np = getPrime(512)\nq = getPrime(512)\nn = p*q\ne = 65537\nc1 = p^m\nc2 = pow(m,e,n) \nprint(f'n = {n}')\nprint(f'c1 = {c1}')\nprint(f'c2 = {c2}')\n\"\"\"\nn = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407\nc1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996\nc2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601\n\"\"\"\n</code></pre> <p>\u56e0\u4e3aflag\u957f\u5ea6\u4e3a32\uff0c\u8f6c\u4e3aint\u7684\u503c\u4e3a256bit\uff0c\u56e0\u4e3ap\u4e3a512\u7684\u6570\uff0c\u6240\u4ee5<code>p ^ m</code>\u7684\u9ad8256bit\u548cp\u7684\u9ad8256bit\u662f\u4e00\u6837\u7684\uff0c\u95f4\u63a5\u544a\u8bc9\u6211\u4eecp\u7684\u9ad8\u4f4d</p> <p>\u8fd9\u4e2a\u672a\u77e5\u4f4d\u6570\u4e0d\u592a\u6ee1\u8db3\u6211\u4eec\u524d\u9762\u8bf4\u7684\u653b\u51fb\u6761\u4ef6\uff0c\u5dee\u4e868\u4f4d\uff0c\u56e0\u6b64\u9700\u8981\u505a\u4e00\u70b9\u7206\u7834</p> <p>exp.sage</p> Python<pre><code>import gmpy2\nfrom tqdm import *\nfrom Crypto.Util.number import *\n\nn = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407\nc1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996\nc2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601\ne = 65537\npbits = 512\n\np_high = c1 &gt;&gt; 256\nfor i in trange(2**8):\n    p4 = p_high &lt;&lt; 8            #\u8fd9\u91cc\u9700\u8981\u5148\u7206\u78348\u4f4d\uff0c\u4f7f\u5f97\u77e5\u9053264\u4f4d\u4ee5\u540e\u518d\u6062\u590dp\n    p4 = p4 + i\n    kbits = pbits - p4.nbits()\n    p4 = p4 &lt;&lt; kbits\n    R.&lt;x&gt; = PolynomialRing(Zmod(n))\n    f = x + p4\n    res = f.small_roots(X=2^kbits, beta=0.4, epsilon=0.01)\n    if res != []:\n        p = p4 + int(x[0])\n        q = n // p\n        d = gmpy2.invert(e,(p-1)*(q-1))\n        m = pow(c2,d,n)\n        print(long_to_bytes(int(m)))\n        break\n\n#LitCTF{oh!!!!coppersmith_is_fun}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3_3","title":"\u4f8b\u98983","text":"<p>\u6709\u4e9b\u9898\u76ee\u4e0d\u4e00\u5b9a\u7ed9\u51fa\u9ad8\u4f4d\uff0c\u8fd8\u6709\u53ef\u80fd\u7ed9\u51fa\u4f4e\u4f4d\uff0c\u751a\u81f3\u7ed9\u51fa\u90e8\u5206\u9ad8\u4f4d\u548c\u90e8\u5206\u4f4e\u4f4d\u3002\u5176\u672c\u8d28\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6539\u53d8\u591a\u9879\u5f0f\u5373\u53ef</p> <p>task.py</p> Python<pre><code>from secret import flag\nfrom Crypto.Util.number import *\n\n\np, q = getPrime(1024), getPrime(1024)\nN = p * q\np0 = p ^ (bytes_to_long(flag)&lt;&lt;444)     \nm = bytes_to_long(flag)\nc = pow(m, 65537, N)\nprint(len(flag))\nprint('c=',c)\nprint('N=',N)\nprint('p0=',p0)\n\n\n## 54   \n## c= 6187845844052645335477666563187579997555293403110620879123121166924703361821847984760733842049752886698011561451715570810292323756091403783920480396052120046379755571530451812078574368413924390017994278703794257118954968480994077586245800902748815905644287545189605031883291488844527496906890127546594960138582150272568163575590734246290813150131949296550974206595456421136190026954855755623761557179760444906148376433584795779131477110538212742401420633087881506416368853221110426491868881029814841479615979710066371796507692025126150957315754738584387325388998533227577023142894876376702128870643448600352603905149\n## N= 14195810221536708489210274086946022255792382922322850338983263099316341767896809249586174293795778082892237356582757544364274847341220303582304283372889068290282580493623042441421715338444710303281638639785784613434328659529884972238348336971186339482788748316527376410510261228354155806341136524162787121212184386900663470590652770503564816948407257603737938414126069053610568675347826390537145556511048774030823322301932088595499671755944744816524811272617200683384649389274196659297432212847319503330409792704612575414010711158873031786577877685578976140462539734553598745329712188216200905451774357282278403189943\n## p0= 111984935426070810628244029907949697819351004665202173622240566580193974673163315128983603277856218378729883402496424467491406698035050254407170555432448523469880166015507303737468316933545613178461925283040643344197452758878116752692499745309765526523083790825015522124083482964296662782850606081657447935191\n</code></pre> <p>\u56e0\u4e3am\u5de6\u79fb444\u4f4d\uff0c\u8fd9\u6837\u5b50m\u540e\u9762444\u4f4d\u90fd\u662f0\uff0c\u6240\u4ee5\u5f02\u6216\u4e4b\u540e\uff0c\u4e0d\u5f71\u54cdp\u4f4e\u4f4d444\u503c</p> <p>\u6839\u636eflag\u957f\u5ea6\u662f54\uff0c\u8f6c\u6210int\u6570\u636e\u5c31432bit\uff0c\u5de6\u79fb444\u4f4d\u540e\u662f876\u4f4d\uff0c\u5f02\u6216\u4e4b\u540e\uff0cp\u7684\u9ad8(1024 - 876) = 148\u4f4d\u4e5f\u662f\u4e0d\u53d8\u7684\u3002\u6240\u4ee5\u6211\u4eec\u6709\u4e86p\u7684\u90e8\u5206\u9ad8\u4f4d\u548c\u4f4e\u4f4d</p> <p>\u8fd8\u662f\u5229\u7528coppersmith\uff0c\u6539\u4e2a\u591a\u9879\u5f0f\u5373\u53ef</p> <p>exp.sage</p> Python<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\np0 = 111984935426070810628244029907949697819351004665202173622240566580193974673163315128983603277856218378729883402496424467491406698035050254407170555432448523469880166015507303737468316933545613178461925283040643344197452758878116752692499745309765526523083790825015522124083482964296662782850606081657447935191\nc = 6187845844052645335477666563187579997555293403110620879123121166924703361821847984760733842049752886698011561451715570810292323756091403783920480396052120046379755571530451812078574368413924390017994278703794257118954968480994077586245800902748815905644287545189605031883291488844527496906890127546594960138582150272568163575590734246290813150131949296550974206595456421136190026954855755623761557179760444906148376433584795779131477110538212742401420633087881506416368853221110426491868881029814841479615979710066371796507692025126150957315754738584387325388998533227577023142894876376702128870643448600352603905149\nn = 14195810221536708489210274086946022255792382922322850338983263099316341767896809249586174293795778082892237356582757544364274847341220303582304283372889068290282580493623042441421715338444710303281638639785784613434328659529884972238348336971186339482788748316527376410510261228354155806341136524162787121212184386900663470590652770503564816948407257603737938414126069053610568675347826390537145556511048774030823322301932088595499671755944744816524811272617200683384649389274196659297432212847319503330409792704612575414010711158873031786577877685578976140462539734553598745329712188216200905451774357282278403189943\ne = 65537\n\nphigh = p0 &gt;&gt; 876 &lt;&lt;876\ntmp = int(\"1\" * 444,2)\nplow = p0 &amp; tmp\n\nR.&lt;x&gt; = PolynomialRing(Zmod(n))\n\nf = phigh + x*2**444 + plow\nf = f.monic()\nres = f.small_roots(X=2^432,beta=0.4)\nif res != []:\n    p = int(phigh + res[0]*2**444+plow)\n    print(\"p =\",p)\n    q = n // p\n    d = gmpy2.invert(e,(p-1)*(q-1))\n    m = pow(c,d,n)\n    print(long_to_bytes(int(m)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#d","title":"\u5341\u516d\u3001d\u4f4e\u4f4d\u6cc4\u9732","text":"<p>\u653b\u51fb\u6761\u4ef6:e\u5728\u53ef\u7206\u7834\u8303\u56f4\uff0c\u5e76\u4e14\u5df2\u77e5d\u7684\u4f4e\u4f4d</p> <p>\u63a8\u5bfc:</p> \\[ \\because ed \\equiv 1 \\mod \\phi(n) \\] \\[ \\therefore ed = k(p-1)(q-1) + 1 \\] <p>\u5373</p> \\[ ed = kn - kp - kq + k + 1 \\] <p>\u5047\u8bbe\u6211\u4eec\u77e5\u9053d\u7684\u4f4eL\u4f4d\uff0c\u5e76\u4e14\u8bb0\u4e3a\\(d_{low}\\)\uff0c\u6211\u4eec\u5bf9\u4e0a\u5f0f\u540c\u6a21\\(2^L\\)\uff0c\u4e8e\u662f\u6709</p> \\[ ed_{low} \\equiv kn - kp - kq + k + 1 \\mod 2^L \\] <p>\u4e24\u8fb9\u540c\u65f6\u4e58\u4e0ap\u5f97\u5230</p> \\[ ed_{low} \\equiv knp -kp^2 - kn +(k+1)p \\mod 2^L \\] <p>\u6b64\u65f6\u4e0a\u5f0f\u53ea\u6709k\u548cp\u662f\u672a\u77e5\u7684\uff0c\u56e0\u4e3a\\(0 &lt; k &lt; e\\)\uff0c\u6240\u4ee5\u53ef\u5bf9k\u8fdb\u884c\u7206\u7834\uff0c\u89e3\u540c\u4f59\u5f0f\u5f97\u5230p\u7684\u4f4e\u4f4d\uff0c\u518d\u7528coppersmith\u6062\u590dp</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_26","title":"\u4f8b\u9898","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\nwhile True:\n    p = libnum.generate_prime(512)\n    q = libnum.generate_prime(512)\n    n = p * q\n    phi_n = (p - 1) * (q - 1)\n    e = 3\n    if gmpy2.gcd(e, phi_n) == 1:\n        break\n\nd = gmpy2.invert(e, phi_n)\nd1 = d &amp; ((1 &lt;&lt; 486) - 1)\nc = pow(m, e, n)\nprint(\"n =\", n)\nprint(\"e =\", e)\nprint(\"c =\", c)\nprint(\"dlow =\", d1)\n\"\"\"\nn = 52742121495363456830645578439066440260525635701449452038623040460534514676940962601979528301396249463310635013618692939847284377316096998174539886900202801371512846078230196507601167693580439935790730812348102969592553942497201279143623565409782692807615767067494338127711608771029145341503069929345973282553\ne = 3\nc = 175676150266403096249431407570554929021369604168136874268275844375181688894753012319267533769923727863698572157250017689244151605424698000831986135513112136594197978237874400825236288135820643994889528170234514127521418132167932446836545721803621236277931291609749528037915073270452302613264065194049125\ndlow = 8681746171122274095992828774600905650260279086049883317863420271848455130773826835383939352151607850521826888046119078445911475580784484455485323\n\"\"\"\n</code></pre> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import long_to_bytes,inverse\nfrom tqdm import *\n\nn = 52742121495363456830645578439066440260525635701449452038623040460534514676940962601979528301396249463310635013618692939847284377316096998174539886900202801371512846078230196507601167693580439935790730812348102969592553942497201279143623565409782692807615767067494338127711608771029145341503069929345973282553\ne = 3\nc = 175676150266403096249431407570554929021369604168136874268275844375181688894753012319267533769923727863698572157250017689244151605424698000831986135513112136594197978237874400825236288135820643994889528170234514127521418132167932446836545721803621236277931291609749528037915073270452302613264065194049125\ndlow = 8681746171122274095992828774600905650260279086049883317863420271848455130773826835383939352151607850521826888046119078445911475580784484455485323\n\ndef get_full_p(p_low,n,pbits):\n    kbits = p_low.bit_length()\n    R.&lt;x&gt; = PolynomialRing(Zmod(n))\n    f = x * 2^kbits + p_low\n    f = f.monic()\n    res = f.small_roots(X = 2^(pbits-kbits),beta=0.4)\n    if res != []:\n        p = int(res[0]) * 2^kbits + p_low\n        return p\n\nfor k in trange(e):\n    var('p')\n    f1 = e*dlow*p - (k*n*p - k*p^2 - k*n + (k+1)*p)\n    roots = solve_mod(f1,2^486)\n    if roots != []:\n        for root in roots:\n            if int(root[0]).bit_length() == 486:\n                p = get_full_p(int(root[0]),n,512)\n                if p:\n                    q = n // p\n                    d = inverse(3,(p-1)*(q-1))\n                    m = pow(c,d,n)\n                    print(long_to_bytes(m))\n                    break\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2023badrsa","title":"2023\u5f3a\u7f51\u62df\u6001\u51b3\u8d5b\u2014\u2014BadRSA","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\n\nf = open('flag.txt','rb')\nm = bytes_to_long(f.readline().strip())\n\np = getPrime(512)\nq = getPrime(512)\ne = getPrime(8)\nn = p*q\nphi = (p-1)*(q-1)\nd = inverse(e,phi)\nleak = d &amp; ((1&lt;&lt;265) - 1)\n\nprint(f'e = {e}')\nprint(f'leak = {leak}')\nprint(f'n = {n}')\nc = pow(m,e,n)\nprint(f'c = {c}')\n\n'''\ne = 149\nleak = 6001958312144157007304943931113872134090201010357773442954181100786589106572169\nn = 88436063749749362190546240596734626745594171540325086418270903156390958817492063940459108934841028734921718351342152598224670602551497995639921650979296052943953491639892805985538785565357751736799561653032725751622522198746331856539251721033316195306373318196300612386897339425222615697620795751869751705629\nc = 1206332017436789083799133504302957634035030644841294494992108068042941783794804420630684301945366528832108224264145563741764232409333108261614056154508904583078897178425071831580459193200987943565099780857889864631160747321901113496943710282498262354984634755751858251005566753245882185271726628553508627299\n'''\n</code></pre> <p>\u7531\\(ed \\equiv 1 \\mod \\phi(n)\\)</p> <p>\u5373\\(ed = k(p-1)(q-1) + 1\\)</p> <p>\u4e24\u8fb9\u540c\u65f6\u6a21\\(2^{265}\\)\uff0c\u5f97\\(ed_0 \\equiv k(p-1)(q-1) + 1 \\mod 2^{265}\\)\uff0c\u8fd9\u91cc\\(d_0 = leak\\)</p> <p>\\(\\therefore ed_0 \\equiv k(pq - p - q + 1) + 1 \\mod 2^{265}\\)</p> <p>\u518d\u540c\u4e58\\(p\\)\uff0c\u5f97\u5230\\(ed_0p \\equiv knp - kp^2 - kn + kp + p \\mod 2^{265}\\)</p> <p>\u56e0\u4e3a\\(d \\approx 1023bit\\)</p> <p>\u6240\u4ee5\\(k &lt; e\\)</p> <p>\u7206\u7834\\(k\\)\uff0c\u89e3\u65b9\u7a0b\u5f97\u5230\\(p\\)\u7684\u4f4e\u4f4d\uff0c\u7136\u540e\u7528copper\u6062\u590d\\(p\\)</p> <p>\u8981\u8c03copper\u7684\u53c2\u6570\uff0c\u89e3\u65b9\u7a0b\u5f97\u5230\u7684\u53ea\u6709\\(p\\)\u7684\u4f4e265\u4f4d,\u8fd8\u5dee247\u4f4d</p> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\ne = 149\nd0 = 6001958312144157007304943931113872134090201010357773442954181100786589106572169\nn = 88436063749749362190546240596734626745594171540325086418270903156390958817492063940459108934841028734921718351342152598224670602551497995639921650979296052943953491639892805985538785565357751736799561653032725751622522198746331856539251721033316195306373318196300612386897339425222615697620795751869751705629\nc = 1206332017436789083799133504302957634035030644841294494992108068042941783794804420630684301945366528832108224264145563741764232409333108261614056154508904583078897178425071831580459193200987943565099780857889864631160747321901113496943710282498262354984634755751858251005566753245882185271726628553508627299\n\nfor k in range(1,e):\n    var(\"p\")\n    temp = e*d0*p\n    f = (k*n*p - k*p^2 - k*n + k*p + p) - temp  == 0\n\n    roots = solve_mod([f],2^265)\n    if roots != []:\n        for root in roots:\n            plow = int(root[0])\n##             print(plow)\n## 55136429770900518182274612434328885021714880080534773062619965935822096183916139\n            R.&lt;x&gt; = PolynomialRing(Zmod(n))\n\n            f1 = x*2^265 + plow\n            f1 = f1.monic()\n            res = f1.small_roots(X=2^247,beta=0.5,epsilon = 0.01)\n            if res != []:\n                print(res)\n                ## [188210689227294472160085325314952069542671020803828390144430392548173787275]\n                p = int(res[0])*2^265 + plow\n                print(\"p =\",p)\n                ## p = 11158174168280917736979570452068827611755694573672250873587467083259280584739528118050085070475912733864211083865201596017044398008278425498714490994488939\n                q = n // p\n                d = gmpy2.invert(e,(p-1)*(q-1))\n                m = pow(c,d,n)\n                print(long_to_bytes(int(m)))\n                ## flag{827ccb0eea8a706c4c34a16891f84e7b}\n                break\n</code></pre> <p>\u8fd9\u91cc<code>beta = 0.5</code>\u662f\u56e0\u4e3a\uff0c\u5bf9\u4e8e\u5ea6\uff08\u5373\u6700\u5927\u6b21\u65b9\uff09\u4e3a\\(d\\)\u7684\u591a\u9879\u5f0f\uff0c\u8981\u6c42\u6839\u5c0f\u4e8e\\(n^{\\frac{\\beta^2}{d} - \\epsilon}\\)\uff0c\u800c\u4e14\u8981\u6c42\u56e0\u5b50\\(p &gt; n^{\\beta}\\)</p> <p>\u6b64\u9898\\(d = 1\\)\uff0c\u7ecf\u8fc7\u8ba1\u7b97\u6211\u4eec\u8981\u6c42\u7684\u6839\u7684\u4e0a\u754c\u4e3a\\(2^{247}\\)\uff0c\\(\\frac{247}{1024} = 0.2412\\)\uff0c\u6240\u4ee5\u53d6<code>beta = 0.5</code>\u53ef\u4ee5\u6062\u590dp\u3002\u754c\u8fd9\u4e2a\u4e1c\u897f\u611f\u89c9\u6709\u70b9\u7384\u5b66\uff0c\u53ea\u80fd\u591a\u505a\u9898\u591a\u611f\u53d7\u4e86</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#franklin-reiter","title":"\u5341\u4e03\u3001Franklin-Reiter\u76f8\u5173\u6d88\u606f\u653b\u51fb","text":"<p>\u653b\u51fb\u6761\u4ef6:</p> <p>\u5f53Alice\u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f\\(M_1,M_2\\)\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f\\(C_1,C_2\\)\u53d1\u9001\u7ed9\u4e86Bob\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f\\(M_1,M_2\\)\u3002\u5047\u8bbe\u6a21\u6570\u4e3a\\(N\\)\uff0c\\(M_1,M_2\\)\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b\uff1a</p> <p>\\(M_1 \\equiv f(M_2) \\mod N\\)</p> <p>\u5176\u4e2d\\(f\\)\u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\\(f = ax+b\\)</p> <p>\u5b58\u811a\u672c\u5c31\u597d\u4e86</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_10","title":"\u4f8b\u98981","text":"<p>task.py</p> Python<pre><code>from secret import flag\nfrom Crypto.Util.number import *\n\nm1 = bytes_to_long(flag)\nN = getPrime(512)*getPrime(512)\ne = 17\n\nc1 = pow(m1, e, N)\n\na = getRandomNBitInteger(512)\nb = getRandomNBitInteger(512)\nm2 = a * m1 + b\nc2 = pow(m2, e, N)\n\nprint(N, a, b, c1, c2, sep=\"\\n\")\n\n## 51296885372346449295388453471330409021784141081351581975478435681552082076338697136130122011636685327781785488670769096434920591920054441921039812310126089859349902066456998315283909435249794317277620588552441456327265553018986591779396701680997794937951231970194353001576159809798153970829987274504038146741\n## 13256631249970000274738888132534852767685499642889351632072622194777502848070957827974250425805779856662241409663031192870528911932663995606616763982320967\n## 12614470377409090738391280373352373943201882741276992121990944593827605866548572392808272414120477304486154096358852845785437999246453926812759725932442170\n## 18617698095122597355752178584860764221736156139844401400942959000560180868595058572264330257490645079792321778926462300410653970722619332098601515399526245808718518153518824404167374361098424325296872587362792839831578589407441739040578339310283844080111189381106274103089079702496168766831316853664552253142\n## 14091361528414093900688440242152327115109256507133728799758289918462970724109343410464537203689727409590796472177295835710571700501895484300979622506298961999001641059179449655629481072402234965831697915939034769804437452528921599125823412464950939837343822566667533463393026895985173157447434429906021792720\n</code></pre> <p>exp.sage</p> Python<pre><code>import libnum\n\nn = 51296885372346449295388453471330409021784141081351581975478435681552082076338697136130122011636685327781785488670769096434920591920054441921039812310126089859349902066456998315283909435249794317277620588552441456327265553018986591779396701680997794937951231970194353001576159809798153970829987274504038146741\na = 13256631249970000274738888132534852767685499642889351632072622194777502848070957827974250425805779856662241409663031192870528911932663995606616763982320967\nb = 12614470377409090738391280373352373943201882741276992121990944593827605866548572392808272414120477304486154096358852845785437999246453926812759725932442170\nc1 = 18617698095122597355752178584860764221736156139844401400942959000560180868595058572264330257490645079792321778926462300410653970722619332098601515399526245808718518153518824404167374361098424325296872587362792839831578589407441739040578339310283844080111189381106274103089079702496168766831316853664552253142\nc2 = 14091361528414093900688440242152327115109256507133728799758289918462970724109343410464537203689727409590796472177295835710571700501895484300979622506298961999001641059179449655629481072402234965831697915939034769804437452528921599125823412464950939837343822566667533463393026895985173157447434429906021792720\ne = 17\n\ndef franklinReiter(n,e,c1,c2,a,b):\n    PR.&lt;x&gt; = PolynomialRing(Zmod(n))\n    g1 = x^e - c1\n    g2 = (a*x+b)^e - c2\n\n    def gcd(g1, g2):\n        while g2:\n            g1, g2 = g2, g1 % g2\n        return g1.monic() \n    return -gcd(g1, g2)[0]\n\nm = franklinReiter(n,e,c1,c2,a,b)\nprint(libnum.n2s(int(m)))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2sictfround2","title":"\u4f8b\u98982\u2014\u2014SICTFround2 \u7b7e\u5230\u9898\u6765\u54af","text":"<p>task.py</p> Python<pre><code>from secret import flag\nfrom  Crypto.Util.number import *\n\nm = bytes_to_long(flag)\np = getPrime(1024)\nq = getPrime(1024)\ne = getPrime(10)\nn = p*q\nc1 = pow(114*m+2333,e,n)\nc2 = pow(514*m+4555,e,n)\nprint(f'n = {n}')\nprint(f'c1 = {c1}')\nprint(f'c2 = {c2}')\n'''\nn = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883\nc1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520\nc2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931\n'''\n</code></pre> <p>\u672c\u9898\u672a\u77e5e\uff0c\u7206\u7834\u4e00\u4e0be\u5373\u53ef</p> <p>exp.sage</p> Python<pre><code>## sage\nimport libnum\nfrom Crypto.Util.number import *\n\nn = \nc1 = \nc2 = \nE = []\n\nfor i in range(2^9,2^10):\n    if isPrime(i):\n        E.append(i)\n\ndef franklinReiter(n,e,c1,c2):\n    PR.&lt;x&gt; = PolynomialRing(Zmod(n))\n    g1 = (114*x + 2333)^e - c1\n    g2 = (514*x + 4555)^e - c2\n\n    def gcd(g1, g2):\n        while g2:\n            g1, g2 = g2, g1 % g2\n        return g1.monic()\n    return -gcd(g1, g2)[0]\n\n## print(E)\nfor e in E:\n    m = franklinReiter(n,e,c1,c2)\n    flag = long_to_bytes(int(m))\n    if b'SICTF' in flag:\n        print(flag)\n        break\n    else:\n        continue\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#32023-rsa3","title":"\u4f8b\u98983\u2014\u20142023\u9886\u822a\u676f RSA3","text":"<p>\u5728\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u52a0\u5bc6\u6307\u6570\u90fd\u4e0d\u592a\u5927\uff0c\u811a\u672c\u8fd0\u884c\u8d77\u6765\u90fd\u7b97\u5feb\u3002\u63a5\u4e0b\u6765\u8fd9\u9053\u4f8b\u9898\uff0c\u52a0\u5bc6\u6307\u6570e\u4e3a65537\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u66f4\u4f18\u7684\u65b9\u6cd5\uff0c\u4f1a\u5f88\u6d6a\u8d39\u65f6\u95f4</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import flag\nm = bytes_to_long(flag)\np1, q1 = getPrime(512), getPrime(512)\nn1 = p1*q1\ne = 65537\n\np2, q2 = getPrime(512), getPrime(512)\nn2 = p2*q2\n\nprint(f'n1 = {n1}')\nprint(f'n2 = {n2}')\nprint(f'c1 = {pow(m,e,n2)}')\nprint(f'c2 = {pow(n1-m,e,n2)}')\n\n## n1 = 52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767\n## n2 = 68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469\n## c1 = 42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853\n## c2 = 62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005\n</code></pre> <p>\u53c2\u8003\uff1aHALF-GCD\u7b97\u6cd5\u7684\u9610\u8ff0_half gcd_Entropy Increaser\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> <p>\u591a\u9879\u5f0f gcd \u7684\u6b63\u786e\u59ff\u52bf\uff1aHalf-GCD \u7b97\u6cd5 - whx1003 - \u535a\u5ba2\u56ed (cnblogs.com)</p> <p>\u811a\u672c\u6765\u6e90\uff1arkm0959_implements/Half_GCD/code.sage at main \u00b7 rkm0959/rkm0959_implements (github.com)</p> <p>\u6211\u4eec\u5f15\u5165\u4f7f\u7528\u4e86HGCD\u7b97\u6cd5\u7684Franklin-Reiter\u76f8\u5173\u6d88\u606f\u653b\u51fb\u7684\u811a\u672c</p> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\nimport sys\n\ndef HGCD(a, b):\n    if 2 * b.degree() &lt;= a.degree() or a.degree() == 1:\n        return 1, 0, 0, 1\n    m = a.degree() // 2\n    a_top, a_bot = a.quo_rem(x^m)\n    b_top, b_bot = b.quo_rem(x^m)\n    R00, R01, R10, R11 = HGCD(a_top, b_top)\n    c = R00 * a + R01 * b\n    d = R10 * a + R11 * b\n    q, e = c.quo_rem(d)\n    d_top, d_bot = d.quo_rem(x^(m // 2))\n    e_top, e_bot = e.quo_rem(x^(m // 2))\n    S00, S01, S10, S11 = HGCD(d_top, e_top)\n    RET00 = S01 * R00 + (S00 - q * S01) * R10\n    RET01 = S01 * R01 + (S00 - q * S01) * R11\n    RET10 = S11 * R00 + (S10 - q * S11) * R10\n    RET11 = S11 * R01 + (S10 - q * S11) * R11\n    return RET00, RET01, RET10, RET11\n\ndef GCD(a, b):\n    print(a.degree(), b.degree())\n    q, r = a.quo_rem(b)\n    if r == 0:\n        return b\n    R00, R01, R10, R11 = HGCD(a, b)\n    c = R00 * a + R01 * b\n    d = R10 * a + R11 * b\n    if d == 0:\n        return c.monic()\n    q, r = c.quo_rem(d)\n    if r == 0:\n        return d\n    return GCD(d, r)\n\nsys.setrecursionlimit(500000)\n\ne = 65537\nn1 = \nn2 = \nc1 = \nc2 = \nR.&lt;x&gt; = PolynomialRing(Zmod(n2))\nf = x^e - c1\ng = (n1 - x)^e - c2\n\nres = GCD(f,g)\n\nm = -res.monic().coefficients()[0]\nprint(m)\nflag = long_to_bytes(int(m))\nprint(flag)\n#CnHongKe{Fr4nkl1n_R31ter_4nd_gcD}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#boneh-durfee","title":"\u5341\u516b\u3001Boneh-Durfee\u653b\u51fb","text":"<p>\u653b\u51fb\u6761\u4ef6:\\(d &lt; N^{0.292}\\)</p> <p>\u5b58\u811a\u672c\u5373\u53ef</p> <p>exp.sage</p> Python<pre><code>from __future__ import print_function\nimport time\n\n############################################\n## Config\n##########################################\n\n\"\"\"\nSetting debug to true will display more informations\nabout the lattice, the bounds, the vectors...\n\"\"\"\ndebug = True\n\n\"\"\"\nSetting strict to true will stop the algorithm (and\nreturn (-1, -1)) if we don't have a correct\nupperbound on the determinant. Note that this\ndoesn't necesseraly mean that no solutions\nwill be found since the theoretical upperbound is\nusualy far away from actual results. That is why\nyou should probably use `strict = False`\n\"\"\"\nstrict = False\n\n\"\"\"\nThis is experimental, but has provided remarkable results\nso far. It tries to reduce the lattice as much as it can\nwhile keeping its efficiency. I see no reason not to use\nthis option, but if things don't work, you should try\ndisabling it\n\"\"\"\nhelpful_only = True\ndimension_min = 7 ## stop removing if lattice reaches that dimension\n\n############################################\n## Functions\n##########################################\n\n## display stats on helpful vectors\ndef helpful_vectors(BB, modulus):\n    nothelpful = 0\n    for ii in range(BB.dimensions()[0]):\n        if BB[ii,ii] &gt;= modulus:\n            nothelpful += 1\n\n    print(nothelpful, \"/\", BB.dimensions()[0], \" vectors are not helpful\")\n\n## display matrix picture with 0 and X\ndef matrix_overview(BB, bound):\n    for ii in range(BB.dimensions()[0]):\n        a = ('%02d ' % ii)\n        for jj in range(BB.dimensions()[1]):\n            a += '0' if BB[ii,jj] == 0 else 'X'\n            if BB.dimensions()[0] &lt; 60:\n                a += ' '\n        if BB[ii, ii] &gt;= bound:\n            a += '~'\n        print(a)\n\n## tries to remove unhelpful vectors\n## we start at current = n-1 (last vector)\ndef remove_unhelpful(BB, monomials, bound, current):\n    ## end of our recursive function\n    if current == -1 or BB.dimensions()[0] &lt;= dimension_min:\n        return BB\n\n    ## we start by checking from the end\n    for ii in range(current, -1, -1):\n        ## if it is unhelpful:\n        if BB[ii, ii] &gt;= bound:\n            affected_vectors = 0\n            affected_vector_index = 0\n            ## let's check if it affects other vectors\n            for jj in range(ii + 1, BB.dimensions()[0]):\n                ## if another vector is affected:\n                ## we increase the count\n                if BB[jj, ii] != 0:\n                    affected_vectors += 1\n                    affected_vector_index = jj\n\n            ## level:0\n            ## if no other vectors end up affected\n            ## we remove it\n            if affected_vectors == 0:\n                print(\"* removing unhelpful vector\", ii)\n                BB = BB.delete_columns([ii])\n                BB = BB.delete_rows([ii])\n                monomials.pop(ii)\n                BB = remove_unhelpful(BB, monomials, bound, ii-1)\n                return BB\n\n            ## level:1\n            ## if just one was affected we check\n            ## if it is affecting someone else\n            elif affected_vectors == 1:\n                affected_deeper = True\n                for kk in range(affected_vector_index + 1, BB.dimensions()[0]):\n                    ## if it is affecting even one vector\n                    ## we give up on this one\n                    if BB[kk, affected_vector_index] != 0:\n                        affected_deeper = False\n                ## remove both it if no other vector was affected and\n                ## this helpful vector is not helpful enough\n                ## compared to our unhelpful one\n                if affected_deeper and abs(bound - BB[affected_vector_index, affected_vector_index]) &lt; abs(bound - BB[ii, ii]):\n                    print(\"* removing unhelpful vectors\", ii, \"and\", affected_vector_index)\n                    BB = BB.delete_columns([affected_vector_index, ii])\n                    BB = BB.delete_rows([affected_vector_index, ii])\n                    monomials.pop(affected_vector_index)\n                    monomials.pop(ii)\n                    BB = remove_unhelpful(BB, monomials, bound, ii-1)\n                    return BB\n    ## nothing happened\n    return BB\n\n\"\"\" \nReturns:\n* 0,0   if it fails\n* -1,-1 if `strict=true`, and determinant doesn't bound\n* x0,y0 the solutions of `pol`\n\"\"\"\ndef boneh_durfee(pol, modulus, mm, tt, XX, YY):\n    \"\"\"\n    Boneh and Durfee revisited by Herrmann and May\n\n    finds a solution if:\n    * d &lt; N^delta\n    * |x| &lt; e^delta\n    * |y| &lt; e^0.5\n    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292\n    \"\"\"\n\n    ## substitution (Herrman and May)\n    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)\n    Q = PR.quotient(x*y + 1 - u) ## u = xy + 1\n    polZ = Q(pol).lift()\n\n    UU = XX*YY + 1\n\n    ## x-shifts\n    gg = []\n    for kk in range(mm + 1):\n        for ii in range(mm - kk + 1):\n            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk\n            gg.append(xshift)\n    gg.sort()\n\n    ## x-shifts list of monomials\n    monomials = []\n    for polynomial in gg:\n        for monomial in polynomial.monomials():\n            if monomial not in monomials:\n                monomials.append(monomial)\n    monomials.sort()\n\n    ## y-shifts (selected by Herrman and May)\n    for jj in range(1, tt + 1):\n        for kk in range(floor(mm/tt) * jj, mm + 1):\n            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)\n            yshift = Q(yshift).lift()\n            gg.append(yshift) ## substitution\n\n    ## y-shifts list of monomials\n    for jj in range(1, tt + 1):\n        for kk in range(floor(mm/tt) * jj, mm + 1):\n            monomials.append(u^kk * y^jj)\n\n    ## construct lattice B\n    nn = len(monomials)\n    BB = Matrix(ZZ, nn)\n    for ii in range(nn):\n        BB[ii, 0] = gg[ii](0, 0, 0)\n        for jj in range(1, ii + 1):\n            if monomials[jj] in gg[ii].monomials():\n                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)\n\n    ## Prototype to reduce the lattice\n    if helpful_only:\n        ## automatically remove\n        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-1)\n        ## reset dimension\n        nn = BB.dimensions()[0]\n        if nn == 0:\n            print(\"failure\")\n            return 0,0\n\n    ## check if vectors are helpful\n    if debug:\n        helpful_vectors(BB, modulus^mm)\n\n    ## check if determinant is correctly bounded\n    det = BB.det()\n    bound = modulus^(mm*nn)\n    if det &gt;= bound:\n        print(\"We do not have det &lt; bound. Solutions might not be found.\")\n        print(\"Try with highers m and t.\")\n        if debug:\n            diff = (log(det) - log(bound)) / log(2)\n            print(\"size det(L) - size e^(m*n) = \", floor(diff))\n        if strict:\n            return -1, -1\n    else:\n        print(\"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)\")\n\n    ## display the lattice basis\n    if debug:\n        matrix_overview(BB, modulus^mm)\n\n    ## LLL\n    if debug:\n        print(\"optimizing basis of the lattice via LLL, this can take a long time\")\n\n    BB = BB.LLL()\n\n    if debug:\n        print(\"LLL is done!\")\n\n    ## transform vector i &amp; j -&gt; polynomials 1 &amp; 2\n    if debug:\n        print(\"looking for independent vectors in the lattice\")\n    found_polynomials = False\n\n    for pol1_idx in range(nn - 1):\n        for pol2_idx in range(pol1_idx + 1, nn):\n            ## for i and j, create the two polynomials\n            PR.&lt;w,z&gt; = PolynomialRing(ZZ)\n            pol1 = pol2 = 0\n            for jj in range(nn):\n                pol1 += monomials[jj](w*z+1,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)\n                pol2 += monomials[jj](w*z+1,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)\n\n            ## resultant\n            PR.&lt;q&gt; = PolynomialRing(ZZ)\n            rr = pol1.resultant(pol2)\n\n            ## are these good polynomials?\n            if rr.is_zero() or rr.monomials() == [1]:\n                continue\n            else:\n                print(\"found them, using vectors\", pol1_idx, \"and\", pol2_idx)\n                found_polynomials = True\n                break\n        if found_polynomials:\n            break\n\n    if not found_polynomials:\n        print(\"no independant vectors could be found. This should very rarely happen...\")\n        return 0, 0\n\n    rr = rr(q, q)\n\n    ## solutions\n    soly = rr.roots()\n\n    if len(soly) == 0:\n        print(\"Your prediction (delta) is too small\")\n        return 0, 0\n\n    soly = soly[0][0]\n    ss = pol1(q, soly)\n    solx = ss.roots()[0][0]\n\n    #\n    return solx, soly\n\ndef example():\n    ############################################\n    ## How To Use This Script\n    ##########################################\n\n    #\n    ## The problem to solve (edit the following values)\n    #\n\n    ## the modulus\n    N = 0xc2fd2913bae61f845ac94e4ee1bb10d8531dda830d31bb221dac5f179a8f883f15046d7aa179aff848db2734b8f88cc73d09f35c445c74ee35b01a96eb7b0a6ad9cb9ccd6c02c3f8c55ecabb55501bb2c318a38cac2db69d510e152756054aaed064ac2a454e46d9b3b755b67b46906fbff8dd9aeca6755909333f5f81bf74db\n    ## the public exponent\n    e = 0x19441f679c9609f2484eb9b2658d7138252b847b2ed8ad182be7976ed57a3e441af14897ce041f3e07916445b88181c22f510150584eee4b0f776a5a487a4472a99f2ddc95efdd2b380ab4480533808b8c92e63ace57fb42bac8315fa487d03bec86d854314bc2ec4f99b192bb98710be151599d60f224114f6b33f47e357517\n\n    ## the hypothesis on the private exponent (the theoretical maximum is 0.292)\n    delta = .18 ## this means that d &lt; N^delta\n\n    #\n    ## Lattice (tweak those values)\n    #\n\n    ## you should tweak this (after a first run), (e.g. increment it until a solution is found)\n    m = 4 ## size of the lattice (bigger the better/slower)\n\n    ## you need to be a lattice master to tweak these\n    t = int((1-2*delta) * m)  ## optimization from Herrmann and May\n    X = 2*floor(N^delta)  ## this _might_ be too much\n    Y = floor(N^(1/2))    ## correct if p, q are ~ same size\n\n    #\n    ## Don't touch anything below\n    #\n\n    ## Problem put in equation\n    P.&lt;x,y&gt; = PolynomialRing(ZZ)\n    A = int((N+1)/2)\n    pol = 1 + x * (A + y)\n\n    #\n    ## Find the solutions!\n    #\n\n    ## Checking bounds\n    if debug:\n        print(\"=== checking values ===\")\n        print(\"* delta:\", delta)\n        print(\"* delta &lt; 0.292\", delta &lt; 0.292)\n        print(\"* size of e:\", int(log(e)/log(2)))\n        print(\"* size of N:\", int(log(N)/log(2)))\n        print(\"* m:\", m, \", t:\", t)\n\n    ## boneh_durfee\n    if debug:\n        print(\"=== running algorithm ===\")\n        start_time = time.time()\n\n    solx, soly = boneh_durfee(pol, e, m, t, X, Y)\n\n    ## found a solution?\n    if solx &gt; 0:\n        print(\"=== solution found ===\")\n        if False:\n            print(\"x:\", solx)\n            print(\"y:\", soly)\n\n        d = int(pol(solx, soly) / e)\n        print(\"private key found:\", d)\n    else:\n        print(\"=== no solution was found ===\")\n\n    if debug:\n        print((\"=== %s seconds ===\" % (time.time() - start_time)))\n\nif __name__ == \"__main__\":\n    example()\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2023so-large-e","title":"\u4f8b\u9898 2023\u695a\u6167\u676f\u2014\u2014so large e","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\nfrom flag import flag\nimport random\n\nm = bytes_to_long(flag)\n\np = getPrime(512)\nq = getPrime(512)\nn = p*q\ne = random.getrandbits(1024)\nassert size(e)==1024\nphi = (p-1)*(q-1)\nassert GCD(e,phi)==1\nd = inverse(e,phi)\nassert size(d)==269\n\npub = (n, e)\nPublicKey = RSA.construct(pub)\nwith open('pub.pem', 'wb') as f :\n    f.write(PublicKey.exportKey())\n\nc = pow(m,e,n)\nprint('c =',c)\n\nprint(long_to_bytes(pow(c,d,n)))\n\n\n#c = 6838759631922176040297411386959306230064807618456930982742841698524622016849807235726065272136043603027166249075560058232683230155346614429566511309977857815138004298815137913729662337535371277019856193898546849896085411001528569293727010020290576888205244471943227253000727727343731590226737192613447347860\n</code></pre> <p>\u63d0\u53d6\u516c\u94a5\u5f97\u5230n,e</p> <p>\u53d1\u73b0\\(\\frac{d}{n} = 0.26269\\)</p> <p>\u591a\u534a\u5c31\u662fboneh_durfee\u653b\u51fb\u624b\u6bb5</p> <p>\u6539\u6539example()\u51fd\u6570\u7684<code>delta</code>\u548c<code>m</code>\u5373\u53ef</p> <p><code>delta</code>\u5c31\u662f\\(\\frac{d}{n}\\)\u7684\u5927\u5c0f</p> <p>exp</p> Python<pre><code>#sage\nfrom __future__ import print_function\nimport time\n\n############################################\n## Config\n##########################################\n\n\"\"\"\nSetting debug to true will display more informations\nabout the lattice, the bounds, the vectors...\n\"\"\"\ndebug = True\n\n\"\"\"\nSetting strict to true will stop the algorithm (and\nreturn (-1, -1)) if we don't have a correct\nupperbound on the determinant. Note that this\ndoesn't necesseraly mean that no solutions\nwill be found since the theoretical upperbound is\nusualy far away from actual results. That is why\nyou should probably use `strict = False`\n\"\"\"\nstrict = False\n\n\"\"\"\nThis is experimental, but has provided remarkable results\nso far. It tries to reduce the lattice as much as it can\nwhile keeping its efficiency. I see no reason not to use\nthis option, but if things don't work, you should try\ndisabling it\n\"\"\"\nhelpful_only = True\ndimension_min = 7 ## stop removing if lattice reaches that dimension\n\n############################################\n## Functions\n##########################################\n\n## display stats on helpful vectors\ndef helpful_vectors(BB, modulus):\n    nothelpful = 0\n    for ii in range(BB.dimensions()[0]):\n        if BB[ii,ii] &gt;= modulus:\n            nothelpful += 1\n\n    print(nothelpful, \"/\", BB.dimensions()[0], \" vectors are not helpful\")\n\n## display matrix picture with 0 and X\ndef matrix_overview(BB, bound):\n    for ii in range(BB.dimensions()[0]):\n        a = ('%02d ' % ii)\n        for jj in range(BB.dimensions()[1]):\n            a += '0' if BB[ii,jj] == 0 else 'X'\n            if BB.dimensions()[0] &lt; 60:\n                a += ' '\n        if BB[ii, ii] &gt;= bound:\n            a += '~'\n        print(a)\n\n## tries to remove unhelpful vectors\n## we start at current = n-1 (last vector)\ndef remove_unhelpful(BB, monomials, bound, current):\n    ## end of our recursive function\n    if current == -1 or BB.dimensions()[0] &lt;= dimension_min:\n        return BB\n\n    ## we start by checking from the end\n    for ii in range(current, -1, -1):\n        ## if it is unhelpful:\n        if BB[ii, ii] &gt;= bound:\n            affected_vectors = 0\n            affected_vector_index = 0\n            ## let's check if it affects other vectors\n            for jj in range(ii + 1, BB.dimensions()[0]):\n                ## if another vector is affected:\n                ## we increase the count\n                if BB[jj, ii] != 0:\n                    affected_vectors += 1\n                    affected_vector_index = jj\n\n            ## level:0\n            ## if no other vectors end up affected\n            ## we remove it\n            if affected_vectors == 0:\n                print(\"* removing unhelpful vector\", ii)\n                BB = BB.delete_columns([ii])\n                BB = BB.delete_rows([ii])\n                monomials.pop(ii)\n                BB = remove_unhelpful(BB, monomials, bound, ii-1)\n                return BB\n\n            ## level:1\n            ## if just one was affected we check\n            ## if it is affecting someone else\n            elif affected_vectors == 1:\n                affected_deeper = True\n                for kk in range(affected_vector_index + 1, BB.dimensions()[0]):\n                    ## if it is affecting even one vector\n                    ## we give up on this one\n                    if BB[kk, affected_vector_index] != 0:\n                        affected_deeper = False\n                ## remove both it if no other vector was affected and\n                ## this helpful vector is not helpful enough\n                ## compared to our unhelpful one\n                if affected_deeper and abs(bound - BB[affected_vector_index, affected_vector_index]) &lt; abs(bound - BB[ii, ii]):\n                    print(\"* removing unhelpful vectors\", ii, \"and\", affected_vector_index)\n                    BB = BB.delete_columns([affected_vector_index, ii])\n                    BB = BB.delete_rows([affected_vector_index, ii])\n                    monomials.pop(affected_vector_index)\n                    monomials.pop(ii)\n                    BB = remove_unhelpful(BB, monomials, bound, ii-1)\n                    return BB\n    ## nothing happened\n    return BB\n\n\"\"\" \nReturns:\n* 0,0   if it fails\n* -1,-1 if `strict=true`, and determinant doesn't bound\n* x0,y0 the solutions of `pol`\n\"\"\"\ndef boneh_durfee(pol, modulus, mm, tt, XX, YY):\n    \"\"\"\n    Boneh and Durfee revisited by Herrmann and May\n\n    finds a solution if:\n    * d &lt; N^delta\n    * |x| &lt; e^delta\n    * |y| &lt; e^0.5\n    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292\n    \"\"\"\n\n    ## substitution (Herrman and May)\n    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)\n    Q = PR.quotient(x*y + 1 - u) ## u = xy + 1\n    polZ = Q(pol).lift()\n\n    UU = XX*YY + 1\n\n    ## x-shifts\n    gg = []\n    for kk in range(mm + 1):\n        for ii in range(mm - kk + 1):\n            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk\n            gg.append(xshift)\n    gg.sort()\n\n    ## x-shifts list of monomials\n    monomials = []\n    for polynomial in gg:\n        for monomial in polynomial.monomials():\n            if monomial not in monomials:\n                monomials.append(monomial)\n    monomials.sort()\n\n    ## y-shifts (selected by Herrman and May)\n    for jj in range(1, tt + 1):\n        for kk in range(floor(mm/tt) * jj, mm + 1):\n            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)\n            yshift = Q(yshift).lift()\n            gg.append(yshift) ## substitution\n\n    ## y-shifts list of monomials\n    for jj in range(1, tt + 1):\n        for kk in range(floor(mm/tt) * jj, mm + 1):\n            monomials.append(u^kk * y^jj)\n\n    ## construct lattice B\n    nn = len(monomials)\n    BB = Matrix(ZZ, nn)\n    for ii in range(nn):\n        BB[ii, 0] = gg[ii](0, 0, 0)\n        for jj in range(1, ii + 1):\n            if monomials[jj] in gg[ii].monomials():\n                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)\n\n    ## Prototype to reduce the lattice\n    if helpful_only:\n        ## automatically remove\n        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-1)\n        ## reset dimension\n        nn = BB.dimensions()[0]\n        if nn == 0:\n            print(\"failure\")\n            return 0,0\n\n    ## check if vectors are helpful\n    if debug:\n        helpful_vectors(BB, modulus^mm)\n\n    ## check if determinant is correctly bounded\n    det = BB.det()\n    bound = modulus^(mm*nn)\n    if det &gt;= bound:\n        print(\"We do not have det &lt; bound. Solutions might not be found.\")\n        print(\"Try with highers m and t.\")\n        if debug:\n            diff = (log(det) - log(bound)) / log(2)\n            print(\"size det(L) - size e^(m*n) = \", floor(diff))\n        if strict:\n            return -1, -1\n    else:\n        print(\"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)\")\n\n    ## display the lattice basis\n    if debug:\n        matrix_overview(BB, modulus^mm)\n\n    ## LLL\n    if debug:\n        print(\"optimizing basis of the lattice via LLL, this can take a long time\")\n\n    BB = BB.LLL()\n\n    if debug:\n        print(\"LLL is done!\")\n\n    ## transform vector i &amp; j -&gt; polynomials 1 &amp; 2\n    if debug:\n        print(\"looking for independent vectors in the lattice\")\n    found_polynomials = False\n\n    for pol1_idx in range(nn - 1):\n        for pol2_idx in range(pol1_idx + 1, nn):\n            ## for i and j, create the two polynomials\n            PR.&lt;w,z&gt; = PolynomialRing(ZZ)\n            pol1 = pol2 = 0\n            for jj in range(nn):\n                pol1 += monomials[jj](w*z+1,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)\n                pol2 += monomials[jj](w*z+1,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)\n\n            ## resultant\n            PR.&lt;q&gt; = PolynomialRing(ZZ)\n            rr = pol1.resultant(pol2)\n\n            ## are these good polynomials?\n            if rr.is_zero() or rr.monomials() == [1]:\n                continue\n            else:\n                print(\"found them, using vectors\", pol1_idx, \"and\", pol2_idx)\n                found_polynomials = True\n                break\n        if found_polynomials:\n            break\n\n    if not found_polynomials:\n        print(\"no independant vectors could be found. This should very rarely happen...\")\n        return 0, 0\n\n    rr = rr(q, q)\n\n    ## solutions\n    soly = rr.roots()\n\n    if len(soly) == 0:\n        print(\"Your prediction (delta) is too small\")\n        return 0, 0\n\n    soly = soly[0][0]\n    ss = pol1(q, soly)\n    solx = ss.roots()[0][0]\n\n    #\n    return solx, soly\n\ndef example():\n    ############################################\n    ## How To Use This Script\n    ##########################################\n\n    #\n    ## The problem to solve (edit the following values)\n    #\n\n    ## the modulus\n    N = 116518679305515263290840706715579691213922169271634579327519562902613543582623449606741546472920401997930041388553141909069487589461948798111698856100819163407893673249162209631978914843896272256274862501461321020961958367098759183487116417487922645782638510876609728886007680825340200888068103951956139343723\n    e = 113449247876071397911206070019495939088171696712182747502133063172021565345788627261740950665891922659340020397229619329204520999096535909867327960323598168596664323692312516466648588320607291284630435682282630745947689431909998401389566081966753438869725583665294310689820290368901166811028660086977458571233\n    ## the public exponent\n    ## the hypothesis on the private exponent (the theoretical maximum is 0.292)\n    delta = .27 ## this means that d &lt; N^delta\n\n    #\n    ## Lattice (tweak those values)\n    #\n\n    ## you should tweak this (after a first run), (e.g. increment it until a solution is found)\n    m = 5 ## size of the lattice (bigger the better/slower)\n\n    ## you need to be a lattice master to tweak these\n    t = int((1-2*delta) * m)  ## optimization from Herrmann and May\n    X = 2*floor(N^delta)  ## this _might_ be too much\n    Y = floor(N^(1/2))    ## correct if p, q are ~ same size\n\n    #\n    ## Don't touch anything below\n    #\n\n    ## Problem put in equation\n    P.&lt;x,y&gt; = PolynomialRing(ZZ)\n    A = int((N+1)/2)\n    pol = 1 + x * (A + y)\n\n    #\n    ## Find the solutions!\n    #\n\n    ## Checking bounds\n    if debug:\n        print(\"=== checking values ===\")\n        print(\"* delta:\", delta)\n        print(\"* delta &lt; 0.292\", delta &lt; 0.292)\n        print(\"* size of e:\", int(log(e)/log(2)))\n        print(\"* size of N:\", int(log(N)/log(2)))\n        print(\"* m:\", m, \", t:\", t)\n\n    ## boneh_durfee\n    if debug:\n        print(\"=== running algorithm ===\")\n        start_time = time.time()\n\n    solx, soly = boneh_durfee(pol, e, m, t, X, Y)\n\n    ## found a solution?\n    if solx &gt; 0:\n        print(\"=== solution found ===\")\n        if False:\n            print(\"x:\", solx)\n            print(\"y:\", soly)\n\n        d = int(pol(solx, soly) / e)\n        print(\"private key found:\", d)\n    else:\n        print(\"=== no solution was found ===\")\n\n    if debug:\n        print((\"=== %s seconds ===\" % (time.time() - start_time)))\n\nif __name__ == \"__main__\":\n    example()\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2023-bd","title":"\u4f8b\u9898 2023\u9886\u822a\u676f bd","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import flag\n\np = getPrime(512)\nq = getPrime(512)\nn = p * q\nd = getPrime(299)\ne = inverse(d,(p-1)*(q-1))\nm = bytes_to_long(flag)\nc = pow(m,e,n)\nhint1 = p &gt;&gt; (512-70)\nhint2 = q &gt;&gt; (512-70)\n\n\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"c = {c}\")\nprint(f\"hint1 = {hint1}\")\nprint(f\"hint2 = {hint2}\")\n\n\"\"\"\nn = 73337798113265277242402875272164983073482378701520700321577706460042584510776095519204866950129951930143711572581533177043149866218358557626070702546982947219557280493881836314492046745063916644418320245218549690820002504737756133747743286301499039227014032044403571945455215839074583290324966069724343874361\ne = 42681919079074901709680276679968298324860328305878264036188155781983964226653746568102282190906458519960811259171162918944726137301701132135900454469634110653076655027353831375989861927565774719655974876907429954299669710134188543166679161864800926130527741511760447090995444554722545165685959110788876766283\nc = 35616516401097721876690503261383371143934066789806504179229622323608172352486702183654617788750099596415052166506074598646146147151595929618406796332682042252530491640781065608144381326123387506000855818316664510273026302748073274714692374375426255513608075674924804166600192903250052744024508330641045908599\nhint1 = 740477612377832718425\nhint2 = 767891335159501447918\n\"\"\"\n</code></pre> <p>\u8fd9\u662f\u4e00\u79cd\u5229\u7528\u4e0ap,q\u9ad8\u4f4d\u7684boneh-durfee\uff0c\u8bba\u6587:367.pdf (iacr.org)</p> <p>\u5bf9\u5927\u4f6c\u5b9e\u9a8c\u7684\u811a\u672c\u8fdb\u884c\u4fee\u6539\uff1aCodes of the manuscript---Practical Attacks on Small Private Exponent RSA---New Records and New Insi - Pastebin.com</p> <p>\u8fd9\u7c7b\u9898\u6ca1\u592a\u641e\u61c2\u539f\u7406\uff0c\u53ea\u80fd\u5f53\u4e2a\u811a\u672c\u5c0f\u5b50\u5148</p> <p>exp</p> Python<pre><code>import time\ntime.clock = time.time\n\ndebug = True\n\nstrict = False\n\nhelpful_only = True\ndimension_min = 7 ## \u5982\u679c\u6676\u683c\u8fbe\u5230\u8be5\u5c3a\u5bf8\uff0c\u5219\u505c\u6b62\u79fb\u9664\n## \u663e\u793a\u6709\u7528\u77e2\u91cf\u7684\u7edf\u8ba1\u6570\u636e\ndef helpful_vectors(BB, modulus):\n    nothelpful = 0\n    for ii in range(BB.dimensions()[0]):\n        if BB[ii,ii] &gt;= modulus:\n            nothelpful += 1\n\n    print(nothelpful, \"/\", BB.dimensions()[0], \" vectors are not helpful\")\n\n## \u663e\u793a\u5e26\u6709 0 \u548c X \u7684\u77e9\u9635\ndef matrix_overview(BB, bound):\n    for ii in range(BB.dimensions()[0]):\n        a = ('%02d ' % ii)\n        for jj in range(BB.dimensions()[1]):\n            a += '0' if BB[ii,jj] == 0 else 'X'\n            if BB.dimensions()[0] &lt; 60: \n                a += ' '\n        if BB[ii, ii] &gt;= bound:\n            a += '~'\n        #print (a)\n\n## \u5c1d\u8bd5\u5220\u9664\u65e0\u7528\u7684\u5411\u91cf\n## \u4ece\u5f53\u524d = n-1\uff08\u6700\u540e\u4e00\u4e2a\u5411\u91cf\uff09\u5f00\u59cb\ndef remove_unhelpful(BB, monomials, bound, current):\n    ## \u6211\u4eec\u4ece\u5f53\u524d = n-1\uff08\u6700\u540e\u4e00\u4e2a\u5411\u91cf\uff09\u5f00\u59cb\n    if current == -1 or BB.dimensions()[0] &lt;= dimension_min:\n        return BB\n\n    ## \u5f00\u59cb\u4ece\u540e\u9762\u68c0\u67e5\n    for ii in range(current, -1, -1):\n        ##  \u5982\u679c\u5b83\u6ca1\u6709\u7528\n        if BB[ii, ii] &gt;= bound:\n            affected_vectors = 0\n            affected_vector_index = 0\n             ## \u8ba9\u6211\u4eec\u68c0\u67e5\u5b83\u662f\u5426\u5f71\u54cd\u5176\u4ed6\u5411\u91cf\n            for jj in range(ii + 1, BB.dimensions()[0]):\n                ## \u5982\u679c\u53e6\u4e00\u4e2a\u5411\u91cf\u53d7\u5230\u5f71\u54cd\uff1a\n                ## \u6211\u4eec\u589e\u52a0\u8ba1\u6570\n                if BB[jj, ii] != 0:\n                    affected_vectors += 1\n                    affected_vector_index = jj\n\n            ## \u7b49\u7ea7\uff1a0\n            ## \u5982\u679c\u6ca1\u6709\u5176\u4ed6\u8f7d\u4f53\u6700\u7ec8\u53d7\u5230\u5f71\u54cd\n            ## \u6211\u4eec\u5220\u9664\u5b83\n            if affected_vectors == 0:\n                #print (\"* removing unhelpful vector\", ii)\n                BB = BB.delete_columns([ii])\n                BB = BB.delete_rows([ii])\n                monomials.pop(ii)\n                BB = remove_unhelpful(BB, monomials, bound, ii-1)\n                return BB\n\n           ## \u7b49\u7ea7\uff1a1\n            #\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u53d7\u5230\u5f71\u54cd\uff0c\u6211\u4eec\u4f1a\u68c0\u67e5\n            ## \u5982\u679c\u5b83\u6b63\u5728\u5f71\u54cd\u522b\u7684\u5411\u91cf\n            elif affected_vectors == 1:\n                affected_deeper = True\n                for kk in range(affected_vector_index + 1, BB.dimensions()[0]):\n                    ## \u5982\u679c\u5b83\u5f71\u54cd\u54ea\u6015\u4e00\u4e2a\u5411\u91cf\n                    ## \u6211\u4eec\u653e\u5f03\u8fd9\u4e2a\n                    if BB[kk, affected_vector_index] != 0:\n                        affected_deeper = False\n                ## \u5982\u679c\u6ca1\u6709\u5176\u4ed6\u5411\u91cf\u53d7\u5230\u5f71\u54cd\uff0c\u5219\u5c06\u5176\u5220\u9664\uff0c\u5e76\u4e14\n                ## \u8fd9\u4e2a\u6709\u7528\u7684\u5411\u91cf\u4e0d\u591f\u6709\u7528\n                #\u4e0e\u6211\u4eec\u65e0\u7528\u7684\u76f8\u6bd4\n                if affected_deeper and abs(bound - BB[affected_vector_index, affected_vector_index]) &lt; abs(bound - BB[ii, ii]):\n                    #print (\"* removing unhelpful vectors\", ii, \"and\", affected_vector_index)\n                    BB = BB.delete_columns([affected_vector_index, ii])\n                    BB = BB.delete_rows([affected_vector_index, ii])\n                    monomials.pop(affected_vector_index)\n                    monomials.pop(ii)\n                    BB = remove_unhelpful(BB, monomials, bound, ii-1)\n                    return BB\n    ## nothing happened\n    return BB\n\n\"\"\" \nReturns:\n* 0,0   if it fails\n* -1,-1 \u5982\u679c \"strict=true\"\uff0c\u5e76\u4e14\u884c\u5217\u5f0f\u4e0d\u53d7\u7ea6\u675f\n* x0,y0 the solutions of `pol`\n\"\"\"\ndef boneh_durfee(pol, modulus, mm, tt, XX, YY):\n    \"\"\"\n    Boneh and Durfee revisited by Herrmann and May\n\n \u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u627e\u5230\u89e3\u51b3\u65b9\u6848\uff1a\n* d &lt; N^delta\n* |x|&lt; e^delta\n* |y|&lt; e^0.5\n\u6bcf\u5f53 delta &lt; 1 - sqrt(2)/2 ~ 0.292\n    \"\"\"\n\n    ## substitution (Herrman and May)\n    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)   #\u591a\u9879\u5f0f\u73af\n    Q = PR.quotient(x*y + 1 - u)        ##  u = xy + 1\n    polZ = Q(pol).lift()\n\n    UU = XX*YY + 1\n\n    ## x-\u79fb\u4f4d\n    gg = []\n    for kk in range(mm + 1):\n        for ii in range(mm - kk + 1):\n            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk\n            gg.append(xshift)\n    gg.sort()\n\n    ## \u5355\u9879\u5f0f x \u79fb\u4f4d\u5217\u8868\n    monomials = []\n    for polynomial in gg:\n        for monomial in polynomial.monomials(): #\u5bf9\u4e8e\u591a\u9879\u5f0f\u4e2d\u7684\u5355\u9879\u5f0f\u3002\u5355\u9879\u5f0f\uff08\uff09\uff1a\n            if monomial not in monomials:  ## \u5982\u679c\u5355\u9879\u4e0d\u5728\u5355\u9879\u4e2d\n                monomials.append(monomial)\n    monomials.sort()\n\n    ## y-\u79fb\u4f4d\n    for jj in range(1, tt + 1):\n        for kk in range(floor(mm/tt) * jj, mm + 1):\n            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)\n            yshift = Q(yshift).lift()\n            gg.append(yshift) ## substitution\n\n    ## \u5355\u9879\u5f0f y \u79fb\u4f4d\u5217\u8868\n    for jj in range(1, tt + 1):\n        for kk in range(floor(mm/tt) * jj, mm + 1):\n            monomials.append(u^kk * y^jj)\n\n    ## \u6784\u9020\u683c B\n    nn = len(monomials)\n    BB = Matrix(ZZ, nn)\n    for ii in range(nn):\n        BB[ii, 0] = gg[ii](0, 0, 0)\n        for jj in range(1, ii + 1):\n            if monomials[jj] in gg[ii].monomials():\n                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)\n\n    #\u7ea6\u5316\u683c\u7684\u539f\u578b\n    if helpful_only:\n        ##  #\u81ea\u52a8\u5220\u9664\n        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-1)\n        ## \u91cd\u7f6e\u7ef4\u5ea6\n        nn = BB.dimensions()[0]\n        if nn == 0:\n            print (\"failure\")\n            return 0,0\n\n    ## \u68c0\u67e5\u5411\u91cf\u662f\u5426\u6709\u5e2e\u52a9\n    if debug:\n        helpful_vectors(BB, modulus^mm)\n\n    ## \u68c0\u67e5\u884c\u5217\u5f0f\u662f\u5426\u6b63\u786e\u754c\u5b9a\n    det = BB.det()\n    bound = modulus^(mm*nn)\n    if det &gt;= bound:\n        print (\"We do not have det &lt; bound. Solutions might not be found.\")\n        print (\"Try with highers m and t.\")\n        if debug:\n            diff = (log(det) - log(bound)) / log(2)\n            print (\"size det(L) - size e^(m*n) = \", floor(diff))\n        if strict:\n            return -1, -1\n    else:\n        print (\"det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)\")\n\n    ## display the lattice basis\n    if debug:\n        matrix_overview(BB, modulus^mm)\n\n    ## LLL\n    if debug:\n        print (\"optimizing basis of the lattice via LLL, this can take a long time\")\n\n    #BB = BB.BKZ(block_size=25)\n    BB = BB.LLL()\n\n    if debug:\n        print (\"LLL is done!\")\n\n    ## \u66ff\u6362\u5411\u91cf i \u548c j -&gt;\u591a\u9879\u5f0f 1 \u548c 2\n    if debug:\n        print (\"\u5728\u683c\u4e2d\u5bfb\u627e\u7ebf\u6027\u65e0\u5173\u5411\u91cf\")\n    found_polynomials = False\n\n    for pol1_idx in range(nn - 1):\n        for pol2_idx in range(pol1_idx + 1, nn):\n\n            ## \u5bf9\u4e8ei and j, \u6784\u9020\u4e24\u4e2a\u591a\u9879\u5f0f\n\n            PR.&lt;w,z&gt; = PolynomialRing(ZZ)\n            pol1 = pol2 = 0\n            for jj in range(nn):\n                pol1 += monomials[jj](w*z+1,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)\n                pol2 += monomials[jj](w*z+1,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)\n\n            ## \u7ed3\u679c\n            PR.&lt;q&gt; = PolynomialRing(ZZ)\n            rr = pol1.resultant(pol2)\n\n\n            if rr.is_zero() or rr.monomials() == [1]:\n                continue\n            else:\n                print (\"found them, using vectors\", pol1_idx, \"and\", pol2_idx)\n                found_polynomials = True\n                break\n        if found_polynomials:\n            break\n\n    if not found_polynomials:\n        print (\"no independant vectors could be found. This should very rarely happen...\")\n        return 0, 0\n\n    rr = rr(q, q)\n\n    ## solutions\n    soly = rr.roots()\n\n    if len(soly) == 0:\n        print (\"Your prediction (delta) is too small\")\n        return 0, 0\n\n    soly = soly[0][0]\n    ss = pol1(q, soly)\n    solx = ss.roots()[0][0]\n    return solx, soly\n\ndef example():\n    ############################################\n    ## \u968f\u673a\u751f\u6210\u6570\u636e\n    ##########################################\n    #start_time =time.perf_counter\n    start =time.clock()\n    size = 512\n    length_N = 2*size\n    ss = 0\n    s = 70\n    M = 1   ## the number of experiments\n    delta = 299/1024\n\n    for i in range(M):\n##         p =  random_prime(2^size,None,2^(size-1))\n##         q =  random_prime(2^size,None,2^(size-1))\n##         if(p&lt;q):\n##             temp=p\n##             p=q\n##             q=temp\n        N = 73337798113265277242402875272164983073482378701520700321577706460042584510776095519204866950129951930143711572581533177043149866218358557626070702546982947219557280493881836314492046745063916644418320245218549690820002504737756133747743286301499039227014032044403571945455215839074583290324966069724343874361\n        e = 42681919079074901709680276679968298324860328305878264036188155781983964226653746568102282190906458519960811259171162918944726137301701132135900454469634110653076655027353831375989861927565774719655974876907429954299669710134188543166679161864800926130527741511760447090995444554722545165685959110788876766283\n        hint1 = 740477612377832718425   ## p\u9ad8\u4f4d\n        hint2 = 767891335159501447918  ## q\u9ad8\u4f4d\n##         print (\"p\u771f\u5b9e\u9ad8\",s,\"\u6bd4\u7279\uff1a\", int(p/2^(512-s)))\n##         print (\"q\u771f\u5b9e\u9ad8\",s,\"\u6bd4\u7279\uff1a\", int(q/2^(512-s)))\n##         N = p*q;\n\n\n    ## \u89e3\u5bc6\u6307\u6570d\u7684\u6307\u6570( \u6700\u59270.292)  \n\n        m = 7   ## \u683c\u5927\u5c0f\uff08\u8d8a\u5927\u8d8a\u597d/\u8d8a\u6162\uff09\n        t = round(((1-2*delta) * m))  ## \u6765\u81ea Herrmann \u548c May \u7684\u4f18\u5316\n        X = floor(N^delta)  ## \n        Y = floor(N^(1/2)/2^s)    ## \u5982\u679c p\u3001 q \u5927\u5c0f\u76f8\u540c\uff0c\u5219\u6b63\u786e\n        for l in range(int(hint1),int(hint1)+1):\n            print('\\n\\n\\n l=',l)\n            pM=l;\n            p0=pM*2^(size-s)+2^(size-s)-1;\n            q0=N/p0;\n            qM=int(q0/2^(size-s))\n            A = N + 1-pM*2^(size-s)-qM*2^(size-s);\n        #A = N+1\n            P.&lt;x,y&gt; = PolynomialRing(ZZ)\n            pol = 1 + x * (A + y)  #\u6784\u5efa\u7684\u65b9\u7a0b\n\n            ## Checking bounds\n            #if debug:\n                #print (\"=== \u6838\u5bf9\u6570\u636e ===\")\n                #print (\"* delta:\", delta)\n                #print (\"* delta &lt; 0.292\", delta &lt; 0.292)\n                #print (\"* size of e:\", ceil(log(e)/log(2)))  ## e\u7684bit\u6570\n                ## print (\"* size of N:\", len(bin(N)))          ## N\u7684bit\u6570\n                #print (\"* size of N:\", ceil(log(N)/log(2)))  ## N\u7684bit\u6570\n                #print (\"* m:\", m, \", t:\", t)\n\n            ## boneh_durfee\n            if debug:\n                ##print (\"=== running algorithm ===\")\n                start_time = time.time()\n\n\n            solx, soly = boneh_durfee(pol, e, m, t, X, Y)\n\n\n            if solx &gt; 0:\n                #print (\"=== solution found ===\")\n                if False:\n                    print (\"x:\", solx)\n                    print (\"y:\", soly)\n\n                d_sol = int(pol(solx, soly) / e)\n                ss=ss+1\n\n                print (\"=== solution found ===\")\n                print (\"p\u7684\u9ad8\u6bd4\u7279\u4e3a\uff1a\",l)\n                print (\"q\u7684\u9ad8\u6bd4\u7279\u4e3a\uff1a\",qM)\n                print (\"d=\",d_sol) \n\n            if debug:\n                print(\"=== %s seconds ===\" % (time.time() - start_time))\n            #break\n        print(\"ss=\",ss)\n                            #end=time.process_time\n        end=time.clock()\n        print('Running time: %s Seconds'%(end-start))\nif __name__ == \"__main__\":\n    example()  \n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_27","title":"\u5341\u4e5d\u3001\u4e00\u4e9b\u548c\u6570\u8bba\u63a8\u5bfc\u76f8\u5173\u7684\u9898\u76ee","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1hint-powapbqn","title":"1.hint = pow(ap+b,q,n)","text":"<p>task.py</p> Python<pre><code>import libnum\nimport gmpy2\nimport uuid\nfrom Crypto.Util.number import *\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\n\ne = 65537\np = getPrime(1024)\nq = getPrime(1024\nn = p * q\nc = pow(m, e, n)\nhint = pow(2020 * p + 2021, q, n)\nprint(f'n={n}')\nprint(f'c={c}')\nprint(f'hint={hint}')\n</code></pre> <p>\u628ahint\u5c55\u5f00</p> \\[ hint \\equiv (2020p + 2021)^q \\mod n \\] <p>\u6a21\\(p\\)\u80fd\u5f97\u5230</p> \\[ hint \\equiv 2021^q \\mod p \\] <p>\u4e24\u8fb9\u540c\u65f6\u53d6p\u6b21\u65b9</p> \\[ hint^p \\equiv 2021^n \\mod p \\] <p>\u5373</p> \\[ hint \\equiv 2021^n \\mod p \\] <p><code>p = gcd(pow(2021,n,n) - hint,n)</code></p> <p>exp</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nn = 27020725261160598541077357737650775795182555998856810737571508044949928734067444441660366270392732456051807439301564552672200975582350577967001486740668193835704559129378410828266554536148151615878808327988333060924165410762016082268322936465413880236634083213834739549234631742766416876749808978934944262651307600621868854944164060642189749365967978497831698002669974744487926082412272998646851047638183126945784060957075393737537570645086672473571281053798891685646561828588448040073373363454584468753860529849749093081434144360661566815886630699933232263079413562069476421802192735693386029862725050469209845710383\nc = 10188807385387617708190575473905502994151677148079820873886980571555051900701810208218351138721306416600688313703084580808183634201231599134123549448962443376514560489130860694363901933597676373555599555647232128717993571185822894818704143675318690577221330618533739592165564396729937983659337232822442555504262694675199751730664450120569727835850996566436129543730932040989365233424791093843941154003052950306359994891955336607690065213304872738280674213630736611351982705373394299097653653497017756036211550125607093109216729483090391729134062236908282557149575812220142872855836932590459512028618076264332235518829\nhint = 15179972145975733285419381814235528011288991423484121653543845156913121513320504879647666067298415751234264897435338898933073713420024176276221164394369781676781604128149168834126855517212300158864797800121336042194751965268493010327202598446572764475343894613152062609436699715193914479572113800212525965140106015838636914979735618606768207651697548364440806425770871133439416876157686985836939255598747973339866125864303982956813846287509191028829738926404992619459242904729015823730553526572575372668559669124599614613391797015393641171177282129497503752370800088634017972208535899870704612274473042064675033593148\ne = 65537\n\np = gmpy2.gcd(pow(2021,n,n)-hint,n)\nq = n // p\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2hint-powapben","title":"2.hint = pow(ap+b,e,n)","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nprint(flag)\nm = libnum.s2n(flag)\np = libnum.generate_prime(512)\nq = libnum.generate_prime(512)\ne = 65537\nn = p * q\nh = 20211102\nhc = pow(h + p * 1111, e, n)\nc = pow(m, e, n)\nprint(\"hc=\", hc)\nprint(\"n=\", n)\nprint(\"c=\", c)\nhc = 71505320953946158049530109094654497075489963071106175336722892393493112481336409391299522595724154571954223093317880494307263262649833222750675105885636892419350501821324979706283867758665536771783209816719106279467902518895579024290387800216711663670572861182058425925280993190282267615052256942516011995207\nn = 76856511192427852645963041043072791148703422665129663050712492700760489247788743818199589072069758934570218804936479267319288093436111548055922916898782764333246946326823653877357695179165138863843657328764265204547147092074499832221138997131011222722917338444675582832114206750168113207646100633238664244737\nc = 39246179387125192271554620313966311736032348078183121707012959204367908070472764506984235827179206718838172586811066682034907967943722841257765922283692526422653916506577810629430853963448057701574209912936660396486847365579797147723437378122880075493171892191049105237005801787649587080840600670585409293046\n</code></pre> \\[ hint \\equiv (ap + b)^e \\mod n \\] <p>\u4e24\u8fb9\u6a21p\u5f97\u5230</p> \\[ hint \\equiv b^e \\mod p \\] <p><code>p = gcd(pow(b,e,n)-hint,n)</code></p> <p>exp</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nhint = 71505320953946158049530109094654497075489963071106175336722892393493112481336409391299522595724154571954223093317880494307263262649833222750675105885636892419350501821324979706283867758665536771783209816719106279467902518895579024290387800216711663670572861182058425925280993190282267615052256942516011995207\nn = 76856511192427852645963041043072791148703422665129663050712492700760489247788743818199589072069758934570218804936479267319288093436111548055922916898782764333246946326823653877357695179165138863843657328764265204547147092074499832221138997131011222722917338444675582832114206750168113207646100633238664244737\nc = 39246179387125192271554620313966311736032348078183121707012959204367908070472764506984235827179206718838172586811066682034907967943722841257765922283692526422653916506577810629430853963448057701574209912936660396486847365579797147723437378122880075493171892191049105237005801787649587080840600670585409293046\ne = 65537\nb = 20211102\n\np = gmpy2.gcd(pow(b,e,n)-hint,n)\nq = n // p\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3q-inverseep","title":"3.q = inverse(e,p)","text":"<p>task.py</p> Python<pre><code>import gmpy2\nimport libnum\nimport uuid\n\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm = libnum.s2n(flag)\ne = 65537\n\nwhile 1:\n    p = libnum.generate_prime(512)\n    q = libnum.invmod(e, p)\n    if gmpy2.is_prime(q):\n        break\nn=p*q\nc=pow(m,e,n)\nprint(\"n=\",n)\nprint(\"c=\",c)\n</code></pre> \\[ eq \\equiv 1 \\mod p \\] <p>\u6240\u4ee5\u6709</p> \\[ eq = kp + 1 \\] <p>\u4e24\u8fb9\u540c\u65f6\u4e58\\(p\\)</p> \\[ en = kp^2 + 1 \\] <p>\u8fd9\u4e2ak\u548ce\u5dee\u4e0d\u591a\u5927\uff0c\u5728e\u4e0d\u592a\u5927\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u679a\u4e3ek\u89e3\u8fd9\u4e2a\u65b9\u7a0b</p> <p>\u8fd8\u6709\u4e2a\u65b9\u6cd5\u5c31\u662f</p> <p>\u4ece\\(en = kp^2 + 1\\)\uff0c\u51d1\u51fa\\(4ken + 1 = (2kp+1)^2\\)</p> <p>\u6240\u4ee5\\(p = \\frac{(4ken+1)^{\\frac{1}{2}}-1}{2k}\\)</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nn = 58204114420266684815970658378327773998564393394613074044159240444415512492622689982761518905542522328879289101538953676661805875053162972893258897360344016406294652339343767887745752686437325346837603712186500309908703326587069304255508650910107794737000566778637055164127273830551001009133332601839918695739\nc = 43430611858598126654595145883807180034546121754009334579568652220639483233618841529702503298293207886941913478597477904682701187000781983315547295293641024286170190626012102497319037012751300959255076727985925313853559910457404758461819072120343343943528618993507783981659418177044469142912677141806591464788\ne = 65537\n\nfor k in range(1,e):\n    t = gmpy2.iroot((4*k*e*n + 1),2)\n    if t[1]:\n        p = (t[0]-1) // (2*k)\n        q = n // p\n        d = gmpy2.invert(e,(p-1)*(q-1))\n        m = pow(c,d,n)\n        print(long_to_bytes(m))\n        break\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#4powmpnpowmqn","title":"4.pow(m,p,n)\u548cpow(m,q,n)","text":"<p>task.py</p> Python<pre><code>import libnum\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm=libnum.s2n(flag)\np=libnum.generate_prime(512)\nq=libnum.generate_prime(512)\nn=p*q\nx=pow(m,p,n)\ny=pow(m,q,n)\nprint(\"n=\",n)\nprint(\"x=\",x)\nprint(\"y=\",y)\n</code></pre> \\[ x \\equiv m ^ p \\mod n \\] <p>\u7531\u8d39\u9a6c\u5c0f\u5b9a\u7406\u5f97</p> \\[ x \\equiv m \\mod p \\] <p>\u540c\u7406</p> \\[ y \\equiv m \\mod q \\] <p>\u5373</p> \\[ x = k_1p + m \\] \\[ y = k_2q + m \\] <p>\u76f8\u4e58\u4e4b\u540e\u5f97\u5230</p> \\[ xy = m^2 + (k_1p+k_2q)m + k_1k_2n \\] <p>\u518d\u6b21\u5316\u7b80</p> \\[ xy \\equiv m^2 + (x-m + y - m)m \\mod n \\] <p>\u7136\u540e\u7528copper\u89e3</p> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\n\nn = 119168018353396473071220326930634033296857570351877525203349067654228903288865563346158289110924833018314600851680403536994000145188490252887831026813814036968773088160020677568623347649228357482873911613625537196000702331852604517461327776409524836030721808860499640682583008287503643735346752806150919473547\nx = 20889450245206188360163017466832661797042512279294313816641964974342193835127401896327018708629718120262511077145232274218469726065543657294173612852238031375768722870519066517281989421725687761586428233882899166319861093186744865410310768961853709659722549327714475931676224727563796969392665870925936060875\ny = 32080707538492572190029237251694217148237404571842762312567934187316746458298295007401945958852986479911593108750816992042333214302313415615710205763277908672519589955718578006218124903939275787171888825356704546781455848117466648569999021535956085557973651213126679157398458139672913801297571585910183741493\n\nR.&lt;m&gt; = PolynomialRing(Zmod(n))\n\nf = x*y - m^2 - m*(x - m + y - m)\nf = f.monic()\nroot = f.small_roots(X=2^336)\nif root != []:\n    print(long_to_bytes(int(root[0])))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#5leak-d-p","title":"5.leak = d + p","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\n\nm = bytes_to_long(flag.encode())\np = getPrime(512)\nq = getPrime(512)\nn = p * q\ne = 65537\nd = inverse(e,(p-1)*(q-1))\n\nleak = d + p\nc = pow(m,e,n)\nprint(f\"leak = {leak}\")\nprint(f\"c = {c}\")\nprint(f\"n = {n}\")\n</code></pre> \\[ leak = d + p \\] <p>\u540c\u65f6\u4e58\u4e0ae</p> \\[ leak \\times e = ed + ep \\] \\[ \\because ed = k(p-1)(q-1) + 1 \\] \\[ \\therefore leak \\times e = k(p-1)(q-1) + ep + 1 = (k_1 + e)(p-1) + e + 1 \\] <p>\u5219</p> \\[ 2^{leak\\times e} \\equiv 2^{(p-1)(k_1+e)+e+1} \\equiv 2^{e+1} \\mod p \\] <p><code>p = gcd(pow(2,e*leak,n) - pow(2,e+1,n),n)</code></p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nleak = 43773730595208010615167769243389712919043986781372553925103531305753192121900940758872887224717935746491356121136709395293427821519713664465479239343568683512805566797519940659245386786069452631897152582632812964236464253538638932777814445952543179981728372597574240011522586022744496408528369815424689627714\nc = 32609109759602838902299290553935199233727818772965249106067660946940666082748851189532358246129713630287421754985189526470019256048805899987261287835158990237267846168718587057488187109882012577904592602367187436017302897260666096753156638501800052563311351183911829268477864436682312113353547663292164618797\nn = 73687428902140845363357908478989818544523419338611246958530518113252515978963884581173646615800353308789787478447973996695401703969420384980841285031836556985268236880854319562700104921035182736733530699304849659644263120110205601793351720111745179867010541532557489688430577820860370652773129870929371931513\ne = 65537\n\np = gmpy2.gcd(pow(2,leak * e,n) - pow(2,e + 1,n),n)\nq = n // p\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre> <p>\u63a5\u4e0b\u6765\u4e09\u4e2a\u9898\u578b\u6765\u6e90\u4e8e2023 \u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u4eba\u624d\u80fd\u529b\u6311\u6218\u8d5b---math_exam</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#6leak-n-p-q-1","title":"6.leak = (n + p) % (q-1)","text":"<p>task.py</p> Python<pre><code>import libnum\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm=libnum.s2n(flag)\np=libnum.generate_prime(512)\nq=libnum.generate_prime(512)\nif p &lt;= q:\n    p, q = q, p\ne = 0x10001\nn = p * q\nc = pow(m, e, n)\nleak = (n + p) % (q-1)\nprint(f'{e = }')\nprint(f'{c = }')\nprint(f'{n = }')\nprint(f'{leak = }')\n\n#e = 65537\n#c = 846622880180923496523897101093587388412673197929101816777894080453907929979417582433675846206418833989406082027835614960931951892393700870678469052366477889491688459558189367255658278968722099012534045477993924284003153851171132420751750724394405070269223797513951991873714156884423926582172189394011114952\n#n = 159452716285492879108396025652299064897348745847754101475050126796260046052685162344131542880739092630022413124977374334652652450809186959288635651980201026825896903174847709657312399801033678426271413442323084354665643010763178857967804623680894444913369256168333223214048037661178587978535722147091129404833\n#leak = 2669103705669857828725305123419482758456336465207378766363532584323475128597302561377245054918781031448710846825859151788151496659511563529987056456136018\n</code></pre> \\[ leak \\equiv (n + p) \\mod q-1 \\] <p>\u5373</p> \\[ leak \\equiv p(q + 1) \\mod q-1 \\] \\[ \\therefore leak \\equiv 2p \\mod q-1 \\] <p>\u9898\u76ee\u786e\u5b9a\u4e86\\(p &gt; q\\)</p> \\[ \\therefore p \\mod q-1 = p - q + 1 \\] \\[ \\therefore leak \\equiv 2(p-q + 1) \\] <p>\u518d\u8054\u7acb\\(n = p \\times q\\)\u89e3\u65b9\u7a0b\u5373\u53ef\u5206\u89e3n</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom sympy import solve,symbols\nimport gmpy2\n\ne = 65537\nc = 846622880180923496523897101093587388412673197929101816777894080453907929979417582433675846206418833989406082027835614960931951892393700870678469052366477889491688459558189367255658278968722099012534045477993924284003153851171132420751750724394405070269223797513951991873714156884423926582172189394011114952\nn = 159452716285492879108396025652299064897348745847754101475050126796260046052685162344131542880739092630022413124977374334652652450809186959288635651980201026825896903174847709657312399801033678426271413442323084354665643010763178857967804623680894444913369256168333223214048037661178587978535722147091129404833\nleak = 2669103705669857828725305123419482758456336465207378766363532584323475128597302561377245054918781031448710846825859151788151496659511563529987056456136018\n\np = symbols('p')\nq = symbols('q')\n\neq1 = 2*(p-q+1) - leak\neq2 = p*q - n\n\nsolution = solve((eq1,eq2),(p,q))\nprint(solution)\n\np = int(solution[1][0])\nq = int(solution[1][1])\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#7leak-d-p-q","title":"7.leak = d + p + q","text":"<p>task.py</p> Python<pre><code>import libnum\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm=libnum.s2n(flag)\np=libnum.generate_prime(512)\nq=libnum.generate_prime(512)\n\ne = 0x10001\nn = p * q\nc = pow(m, e, n)\nd=libnum.invmod(e,(p-1)*(q-1))\nleak = d+p+q\nprint(f'{e = }')\nprint(f'{c = }')\nprint(f'{n = }')\nprint(f'{leak = }')\n\n#e = 65537\n#c = 65194823373091792824101730983124740337276083358867621564067880339279446092377567969207237986613196892737474455781661885696122256698478429450971196633786693648866129636737262041654769618993094832127875251068775632567036646408374963058703320605733921797230106462440860984746880466416824674570639694481298708147\n#n = 101929257180069933443442160085713121307068880188090652033345240568607589666231813199686824369361640378636124324844158355533056421197926269617986872835671463371353540696806173813019752742218460997272803573114119876536384486655117245296360474103378827486280279523273344156760793016731778663058274770626116861407\n#leak = 87007773233816810147344015772388866522443114032719766646343787373996588014373656496789294836431302130125588646180886383013958151442324020038131736683796464202667423644714259545194662934238144990354387370533656134036753530002005551694211595695927699196016268145816389892292091218491443784193805171731592693841\n</code></pre> \\[ leak = d + p + q \\] \\[ \\therefore d = leak - (p + q) \\] <p>\u5219</p> \\[ m \\equiv c^d \\equiv c^{leak -(p+q)} \\mod n \\] <p>\u56e0\u4e3a\\(\\phi(n) = n - (p+q) + 1\\)</p> \\[ \\therefore m \\equiv c^{leak - (n + 1)} \\mod n \\] <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\n\nc = 65194823373091792824101730983124740337276083358867621564067880339279446092377567969207237986613196892737474455781661885696122256698478429450971196633786693648866129636737262041654769618993094832127875251068775632567036646408374963058703320605733921797230106462440860984746880466416824674570639694481298708147\nn = 101929257180069933443442160085713121307068880188090652033345240568607589666231813199686824369361640378636124324844158355533056421197926269617986872835671463371353540696806173813019752742218460997272803573114119876536384486655117245296360474103378827486280279523273344156760793016731778663058274770626116861407\nleak = 87007773233816810147344015772388866522443114032719766646343787373996588014373656496789294836431302130125588646180886383013958151442324020038131736683796464202667423644714259545194662934238144990354387370533656134036753530002005551694211595695927699196016268145816389892292091218491443784193805171731592693841\n\nm = pow(c,leak - n - 1,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#8leak-powpqn-powqpn-n","title":"8.leak = pow(p,q,n) + pow(q,p,n) % n","text":"<p>task.py</p> Python<pre><code>import libnum\nimport uuid\nflag = \"flag{\" + str(uuid.uuid4()) + \"}\"\nm=libnum.s2n(flag)\np=libnum.generate_prime(512)\nq=libnum.generate_prime(512)\n\ne = 0x10001\nn = p * q\nc = pow(m, e, n)\nleak = (pow(p, q, n) + pow(q, p, n)) % n\nprint(f'{e = }')\nprint(f'{c = }')\nprint(f'{n = }')\nprint(f'{leak = }')\n</code></pre> \\[ leak \\equiv (p^q \\mod n + q^p \\mod n) \\mod n \\] <p>\u7531\u8d39\u9a6c\u5c0f\u5b9a\u7406\u5f97</p> \\[ leak \\equiv (p^q \\mod q + q^p \\mod p) \\mod n \\] <p>\u5373</p> \\[ leak \\equiv p + q \\mod n \\] \\[ \\because p + q &lt; n \\] \\[ \\therefore leak = p + q \\] <p>\u7136\u540e</p> \\[ (p-q)^2 = (p+q)^2 - 4n = leak^2 - 4n \\] \\[ \\therefore p = \\frac{((p+q) + (p-q))}{2} \\] <p>\u6216\u8005\u89e3\u65b9\u7a0b</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\ne = 65537\nc = 59662555342583061013008608133060203475725526601468647442902301335538953096485921516133656618941085620436784211565880744663573927593670579237831797055934897166262528476227281479029026508166848256301828084036716500159067642101104810756620735383857351274773983199968924981397675373272878756685629789497697821620\nn = 83332115751539889489689110273690067288993797655970253065863170986174973047785854940017477990345318506407680986257706329521142524295434171889087917406552261883625775754882538291980506944585738241124811588555071095223782766762626040473256423491630224616140407276984106458673447870374272906086783555489477673207\nleak = 18881487897809480964326513919135880296801378921812225600834164247018332292886076618571738627353925482046410714540439662613766662197119044934743578662330528\n\np_q = gmpy2.iroot(leak ** 2 - 4 * n,2)[0]\np = (leak + p_q) // 2\nq = n // p\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2023math_exam","title":"2023\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u4eba\u624d\u80fd\u529b\u6311\u6218\u8d5b\u2014\u2014math_exam","text":"<p>task.py</p> Python<pre><code>import os\nfrom Crypto.Util.number import *\nfrom secret import flag\n\nbits = 512\n\ndef pad(msg, length):\n    pad_length = length - len(msg) - 1\n    pad_data = os.urandom(pad_length)\n    return msg + b'\\x00' + pad_data\n\ndef unpad(msg):\n    return msg.split(b\"\\x00\")[0]\n\ndef challenge1(m):\n    p, q = [getPrime(bits) for i in range(2)]\n    if p &lt;= q:\n        p, q = q, p\n    e = 0x10001\n    n = p * q\n    c = pow(m, e, n)\n    leak = (n + p) % (q-1)\n    print('-------- challenge 1 --------')\n    print(f'{e = }')\n    print(f'{c = }')\n    print(f'{n = }')\n    print(f'{leak = }')\n\ndef challenge2(m):\n    p, q = [getPrime(bits) for i in range(2)]\n    e = 0x10001\n    n = p * q\n    d = inverse(e, (p-1)*(q-1))\n    c = pow(m, e, n)\n    leak = d + p + q\n    print('-------- challenge 2 --------')\n    print(f'{e = }')\n    print(f'{c = }')\n    print(f'{n = }')\n    print(f'{leak = }')\n\ndef challenge3(m):\n    p, q = [getPrime(bits) for i in range(2)]\n    e = 0x10001\n    n = p * q\n    c = pow(m, e, n)\n    leak = (pow(p, q, n) + pow(q, p, n)) % n\n    print('-------- challenge 3 --------')\n    print(f'{e = }')\n    print(f'{c = }')\n    print(f'{n = }')\n    print(f'{leak = }')\n\nassert len(flag) == 42\nms = []\nfor i in range(0, 42, 14):\n    ms.append(bytes_to_long(pad(flag[i:i+14], bits//4-1)))\n\nm1, m2, m3 = ms\nchallenge1(m1)\nchallenge2(m2)\nchallenge3(m3)\n\n\"\"\"\n-------- challenge 1 --------\ne = 65537\nc = 112742443814287255411540092433156061065388404049949520959549377871297566383025041892192679147481155020865118811016470498351633875090973546567374001852295013083192495299811476604405637385307524194793969533646755764136014187430115618114840780368311166911900457224593131166970676797547489278410997707815915932756\nn = 121127425328043404860413278637978444801342472819958112597540188142689720655042880213001676368390521140660355813910726809125567752172921410143437643574528335234973793653775043030021036875866776532570781661875022102733555943967261003246543180935987772711036868216508554536086688819118597075508026787867088355603\nleak = 216638862637129382765636503118049146067015523924032194492700294200289728064297722088882791754351329407138196573832392846467607399504585045028165699421278\n-------- challenge 2 --------\ne = 65537\nc = 7964477910021153997178145480752641882728907630831216554750778499596527781702830885213467912351097301767341858663701574005489585561370961723264247818377063081744522471774208105250855114831033452448184392499682147532404562876275189577321587660597603848038824026981539659156304028998137796242331160312370913038\nn = 140571013522095816880929287025269553867630639381779595547026503691829940612178900269986625350464874598461222087427155791855120339533208468121389480964471710028253589422629569889402475311387750348466199387760629889238062977271925350490110043385800605640905324122017637306715108727700910035925728362455954862209\nleak = 58442382248753295429370894053397615609981110383986887405127350139482893508400422595729520437678203735054593866306478994471465948872565590901376309380029015549809468112086393107585011072503638322671608471684607214064187044372418770555236721845694224676090744181562673509234801011420696349507624867568099759003\n-------- challenge 3 --------\ne = 65537\nc = 54161995127842474543974770981473422085334044100057089719350274921419091368361244533281599379235907845996678762379778310924192757650322930707785543132446159092950451255660204858292974657119337026589911330412367633761103944916751660957776230135927005700707688661350641600954072696774954805514477330339449799540\nn = 88207747624007183083381863279444163105330473097729276113333026679597864128605555600000789783468271680476780366740448641311570797876037993255307716167149079618302706650018518487351604778857406170722209469765782625409279109832638886179654096975665134276856272488090272822541461702907181545730309689190333058151\nleak = 19596671928335648228117128090384865424885102632642665068992144783391306491716530155291726644158221224616817878768426330717188403310818678195631582453246848\n\"\"\"\n</code></pre> <p>exp.py</p> Python<pre><code>from sympy import symbols,solve\nfrom Crypto.Util.number import *\nimport gmpy2\n\ne = 65537\nc1 = \nn1 = \nleak1 = \n\np1 = symbols('p1')\nq1 = symbols('q1')\n\neq1 = 2*(p1-q1+1)-leak1\neq2 = p1 * q1- n1\n\nsolution1 = solve((eq1,eq2),(p1,q1))\n\np1,q1 = int(solution1[1][0]),int(solution1[1][1])\nd1 = gmpy2.invert(e,(p1-1)*(q1-1))\nm1 = pow(c1,d1,n1)\nflag1 = long_to_bytes(m1)[:14]\n\nc2 = \nn2 = \nleak2 = \n\ntmp = leak2 - n2 -1\nm2 = pow(c2,tmp,n2)\nflag2 = long_to_bytes(m2)[:14]\n\nc3 = \nn3 = \nleak3 = \n\np3 = symbols('p3')\nq3 = symbols('q3')\n\neq3 = p3 + q3 - leak3\neq4 = p3 * q3 - n3\n\nsolution3 = solve((eq3,eq4),(p3,q3))\n\np3,q3 = int(solution3[0][0]),int(solution3[0][1])\nd3 = gmpy2.invert(e,(p3-1)*(q3-1))\nm3 = pow(c3,d3,n3)\nflag3 = long_to_bytes(m3)[:14]\n\nflag = flag1 + flag2 + flag3\nprint(flag)\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_28","title":"\u4e8c\u5341\u3001\u526a\u679d\u76f8\u5173","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1gift-p-q","title":"1.gift = p ^ q","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a2023\u9655\u897f\u7701\u6280\u80fd\u5927\u8d5b\u2014\u2014\u5947\u602a\u5f97asr</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\n\nkey = 'flag{**********}'\n\nbits = 1024\nmsg = bytes_to_long(key.encode())\n\ne = 65537\np = getPrime(bits)\nq = getPrime(bits)\nn = p * q\n\ndef encrypt1(msg, e, n):\n    c = pow(msg, e, n)\n    return c\n\nseed = p ^ q\na = getPrime(bits)\nb = getPrime(bits)\nn1 = getPrime(bits)\n\ndef encrypt2(seed):\n    enc = []\n    for i in range(10):\n        seed = (a * seed + b) % n1\n        enc.append(seed)\n    return enc\n\nc = encrypt1(msg, e, n)\nenc = encrypt2(seed)\nprint(\"n = \", n)\nprint(\"c = \", c)\nprint(\"n1 = \", n1)\nprint(\"enc = \", enc)\n\nn =  24044063028844014127418595700558729326190738802687551098858513077613750188240082663594575453404975706225242363463089392757425008423696150244560748490108425645064339883915929498539109384801415313004805586193044292137299902797522618277016789979196782551492020031695781792205215671106103568559626617762521687128199445018651010056934305055040748892733145467040663073395258760159451903432330506383025685265502086582538667772105057401245864822281535425692919273252955571196166824113519446568745718898654447958192533288063735350717599092500158028352667339959012630051251024677881674246253876293205648190626145653304572328397\nc =  14883053247652228283811442762780942186987432684268901119544211089991663825267989728286381980568977804079766160707988623895155236079459150322336701772385709429870215701045797411519212730389048862111088898917402253368572002593328131895422933030329446097639972123501482601377059155708292321789694103528266681104521268192526745361895856566384239849048923482217529011549596939269967690907738755747213669693953769070736092857407573675987242774763239531688324956444305397953424851627349331117467417542814921554060612622936755420459029769026126293588814831034143264949347763031994934813475762839410192390466491651507733968227\nn1 =  137670797028117726329534659376416493367957852768263083700434198723955223922183386928456013703791817601151754417828367188186912209697081337658512940425529211281290630976671911327606706953154608427885071841566358882014021242768190762103365969320014710368160869517966437591299370072284930202718943785099916898209\nenc =  [101737402423360536260958229788866250367716256968287178187558336481872788309727545478736771692477306412259739856568227009850831432381180909815512654609798228982433082928392936844193974517574281026029228179913579225687286945054175762659252515268270399329404664775893089132101252158524000295899895962104782878103, 37355684997487259669354747104430314505839306993101096210478266975184357608742619438151118843905165289324251734149329596611854110739738607745107961453008343886403511257039401245484528985856920723694142989180291902939107642020398816995584650913417698279936585230648639613028793148102494100898288564799111024672, 58677759595639211550435023449462812079890625834313820227189340593596480924226619376872336960357021314847975570175387751632125898437020801920862764666175594874885587518469384576361008639967382152477408865298759987606155830674598034578657554841283906976808719095766296677147076808250022898199866472085742989883, 61841632061818470036288407041172200048676249787061823756736224887116113640875444187463656719652972233582538657844183320242896612625995507633237074900538692102956750184024574603018257213912795847625926653585010890014291951218199774765624860625726555381815237888483974246173727262881650634287497285246796321130, 7618244158597756867387754433401378508070531356170836765779245254233413235386172690733378371343899289510629513166609513857423499004879497768588665836034791151090648182168421570449377835494883902907064269417199065924565304966242954268460876762295575715334403142360198583318323418975108290758222653083011275844, 106276841058222138994123556391380518368163552919305398852484130331884811278068151915582752795463570013359693610495645946230044828403849434903415989487924763756589202218361370725532394478569304449884620166937809374355282324069422109879874964479199929174533104879048175102339134830614476339153367475243140156049, 54574757236475194407137831004617398270525645136836468973535243574661043352422598443323384197261529289829451787586618886007968913414366545291507686451774653217577858375086817168124727394445167274831801876424578654786480330913650363551771258617533162477541882336257099777912519011890593910515860435759936717781, 15567087904962670212229825713697043597876172881256160613623383896576159414077875401117959132252949501643234465895697270909085179587988268864498823765197994781747034644583869111599516151129007414228897958635533561248099927507725880289417298814703767549313482346652043188826434944367260731729064673486516315207, 10757138067445225320504771816863593606847219020279502671965413470243269270456133564739090471033889069283122519782525412134604896073598293410977787230108853737796640474070194546344190858079847734817109910030714675258996740807873872365037296486121580542250452443305370358407408558223735250474249180772656905880, 68097848963949068260912124852455363245291187860801223898468533992003737157497436432969031551088942445561676359631354280979357356539429863946694570097104716411407829017684705171462511875250672979623888463245258237680782731827727876526411531354910982579164963119481534453651300645314177478026462894232377307020]\n</code></pre> <p>\u5148\u901a\u8fc7LCG\u6c42\u51faseed\uff0c\u7136\u540e\u526a\u679d\u5f97\u5230p,q\u3002LCG\u5c31\u4e0d\u8fc7\u591a\u8d58\u8ff0\u4e86</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport sys\nsys.setrecursionlimit(3000)\n\ngift = 39428646082513135314545544161912595458975375891528176714825766497155482031976852156313956476772023258684487799640179241987139554034654104867011313090105438798561154654679825702410748780286094326639330840289843154525176685892323447168072417654823748596238888125898914210332775882916911771786984574407163323116\nN = 24044063028844014127418595700558729326190738802687551098858513077613750188240082663594575453404975706225242363463089392757425008423696150244560748490108425645064339883915929498539109384801415313004805586193044292137299902797522618277016789979196782551492020031695781792205215671106103568559626617762521687128199445018651010056934305055040748892733145467040663073395258760159451903432330506383025685265502086582538667772105057401245864822281535425692919273252955571196166824113519446568745718898654447958192533288063735350717599092500158028352667339959012630051251024677881674246253876293205648190626145653304572328397\nc = 14883053247652228283811442762780942186987432684268901119544211089991663825267989728286381980568977804079766160707988623895155236079459150322336701772385709429870215701045797411519212730389048862111088898917402253368572002593328131895422933030329446097639972123501482601377059155708292321789694103528266681104521268192526745361895856566384239849048923482217529011549596939269967690907738755747213669693953769070736092857407573675987242774763239531688324956444305397953424851627349331117467417542814921554060612622936755420459029769026126293588814831034143264949347763031994934813475762839410192390466491651507733968227\n\n## \u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7206\ndef findp(p,q):\n    if len(p) == 1024:\n        pp = int(p,2)\n        if N % pp == 0:\n            print(\"p = \",pp)\n            print(\"q = \",N // pp)\n            qq = N // pp\n            d = inverse(65537,(pp-1)*(qq-1))\n            m = pow(c,d,N)\n            print(long_to_bytes(m))\n            return\n    else:\n        l = len(p)\n        pp = int(p,2)\n        qq = int(q,2)\n        if (pp ^ qq) % (2 ** l) == gift % (2 ** l) and pp * qq % (2 ** l) == N % (2**l):\n            findp('1' + p,'1' + q)\n            findp('1' + p,'0' + q)\n            findp('0' + p,'1' + q)\n            findp('0' + p,'0' + q)\n\nfindp('1','1')\n## flag{y0u_kn0w_Pruning_and_lcg}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2gift-p-q-16","title":"2.gift = p ^ \uff08q &gt;&gt; 16\uff09","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a2023DASCTF\u6691\u671f\u6311\u6218\u8d5b\u2014\u2014EzRSA</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import secret, flag\ndef encrypt(m):\n    return pow(m, e, n)\nassert flag == b\"dasctf{\" + secret + b\"}\"\ne = 11\np = getPrime(512)\nq = getPrime(512)\nn = p * q\nP = getPrime(512)\nQ = getPrime(512)\nN = P * Q\ngift = P ^ (Q &gt;&gt; 16)\n\nprint(N, gift, pow(n, e, N))\nprint(encrypt(bytes_to_long(secret)),\n    encrypt(bytes_to_long(flag)))\n\nN = 75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377\ngift = 8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034\npow(n,e,N) = 14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943\npow(secret,e,n) = 69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009\npow(flag,e,n) = 46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991\n</code></pre> <p>\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5148\u5206\u89e3N\uff0c\u89e3RSA\u5f97\u5230n\uff0c\u518d\u5bcc\u5170\u514b\u6797\u76f8\u5173\u6d88\u606f\u653b\u51fb\u6c42\u89e3flag\u3002</p> <p>\u8fd9\u91cc\u53ea\u5c55\u793a\u526a\u679d\u5206\u89e3N</p> <p>exp</p> Python<pre><code>import sys\nfrom tqdm import *\n\nsys.setrecursionlimit(3000)\ngift = 8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034\nN = 75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377\n\n## \u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7206\ndef findp(p,q):\n    if len(p) == 512:\n        pp = int(p,2)\n        if N % pp == 0:\n            print(\"p = \",pp)\n            print(\"q = \",N // pp)\n\n    else:\n        l = len(p)\n        pp = int(p,2)\n        qq = int(q,2)\n        if (pp ^ (qq &gt;&gt; 16)) % (2 ** l) == gift % (2 ** l) and pp * qq % (2 ** l) == N % (2 ** l):\n            findp('1' + p,'1' + q)\n            findp('1' + p,'0' + q)\n            findp('0' + p,'1' + q)\n            findp('0' + p,'0' + q)\n\nfor i in trange(2**16,2**17):\n    findp('1',bin(i)[2:])\n\"\"\"\np =  8006847171912577069085166877758626954304824756138758266557706391662987806065132448544117840031499707938227955094109779732609035310252723066470330862622641\nq =  9366986529377069783394625848920106951220134111548343265311677163992169555436421569730703291128771472885865288798344038000984911921843088200997725324682297\n\"\"\"\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3_4","title":"3.\u4e0d\u4f1a\u53d6\u540d\u5b57","text":"<p>\u9898\u76ee\u6765\u6e90:2024HDCTF\u2014\u2014ezrsa</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nimport random\nimport hashlib\nfrom secret import flag\n\n\ngen1 = lambda bits=1024, rand=lambda n: bytes(random.getrandbits(1) for _ in range(n)): (getPrime(bits//2, randfunc=rand), getPrime(bits//2, randfunc=rand))\n\ngen2 = lambda alpha=512, K=500, T=getPrime(506): next(((p, q, T) for q, r in [(getPrime(alpha), getPrime(alpha))] for k in range(2, K+1) if (isPrime(p := r + (k * q - r) % T))), None)\n\np1,q1=gen1()\np2, q2, T = gen2()\nassert flag == \"DASCTF{\" + hashlib.md5(str(p1 + p2 + q1 + q2).encode()).hexdigest() + \"}\"\nprint(p1*q1)\nprint((p2*q2,T))\n## 44945076854246685060397710825960160082061127479194994041436997195972585701097443198954359213635892234058786065342178389181538153413878118039445271277476379366294977408981257175008890470376094381644530106799352839565803317977637572325347776636285703517680754624094985374606187797141657688145287340444623176193\n## (57784854392324291351358704449756491526369373648574288191576366413179694041729248864428194536249209588548791706980878177790271653262097539281383559433402738548851606776347237650302071287124974607439996041713554182180186588308614458904981542909792071322939678815174962366963098166320441995961513884899917498099, 150514823288951667574011681197229106951781617714873679347685702558528178681176081082658953342482323349796111911103531429615442550000291753989779754337491)\n</code></pre> <p>\u8fd9\u91cc\u4ec5\u5bf9gen1()\u8fd9\u90e8\u5206\u8bb2\u89e3</p> <p><code>gen1()</code>\uff0c\u5173\u952e\u5c31\u662f\u628a<code>getPrime(bits,randfunc=None)</code>\u6539\u6210\u4e86<code>getPrime(bits,randfunc=rand)</code></p> <p>\u6211\u4e0d\u592a\u6e05\u695a<code>randfunc</code>\u8d77\u5230\u4ec0\u4e48\u4f5c\u7528\uff0c\u81ea\u5df1\u6253\u5370\u51e0\u7ec4\u6570\u636e\u53d1\u73b0\uff0c<code>gen1</code>\u751f\u6210\u7684\u7d20\u6570\u6bcf8bit\u53ea\u67092\u4e2a\u60c5\u51b5\uff0c\u5206\u522b\u662f</p> <p><code>00000000 00000001</code></p> <p>\u800c\u9ad88\u4f4d\u5fc5\u5b9a\u662f<code>10000000</code></p> <p>\u901a\u8fc7\u8fd9\u4e2a\u6027\u8d28\uff0c\u518d\u5229\u7528<code>p * q % 2**l == n % 2**l</code>\uff0c\u5199\u4e00\u4e2a\u526a\u679d\u5c31\u53ef\u4ee5\u7206\u51fa\u6765</p> <p>exp.py</p> Python<pre><code>from tqdm import *\n\nn1 = 44945076854246685060397710825960160082061127479194994041436997195972585701097443198954359213635892234058786065342178389181538153413878118039445271277476379366294977408981257175008890470376094381644530106799352839565803317977637572325347776636285703517680754624094985374606187797141657688145287340444623176193\n\ndef find(p,q,l):\n    if l == 504:\n        pp = int(\"10000000\"+ p,2)\n        qq = int(\"10000000\"+ q,2)\n        if n1 % pp == 0:\n            print(f\"p1 = {pp}\")\n            print(f\"q1 = {qq}\")\n            return \n    else:\n        pp = int(p,2)\n        qq = int(q,2)\n        if pp * qq % 2**l == n1 % 2**l:\n            find(\"00000001\" + p,\"00000001\" + q,l+8)\n            find(\"00000001\" + p,\"00000000\" + q,l+8)\n            find(\"00000000\" + p,\"00000001\" + q,l+8)\n            find(\"00000000\" + p,\"00000000\" + q,l+8)\n\nfind(\"00000001\",\"00000001\",8)\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#4_1","title":"4.\u4e0d\u4f1a\u53d6\u540d\u5b57","text":"<p>\u9898\u76ee\u6765\u6e90:2024osuCTF</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import isPrime,bytes_to_long\nimport random\nimport os\n\ndef getWYSIprime():\n    while True:\n        digits = [random.choice(\"727\") for _ in range(272)]\n        prime = int(\"\".join(digits))\n        if isPrime(prime):\n            return prime\n\n## RSA encryption using the WYSI primes\np = getWYSIprime()\nq = getWYSIprime()\nn = p * q\ne = 65537\nflag = bytes_to_long(os.getenv(\"FLAG\",b\"osu{fake_flag_for_testing}\"))\nciphertext = pow(flag,e,n)\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"ciphertext = {ciphertext}\")\n\"\"\"\nn = 2160489795493918825870689458820648828073650907916827108594219132976202835249425984494778310568338106260399032800745421512005980632641226298431130513637640125399673697368934008374907832728004469350033174207285393191694692228748281256956917290437627249889472471749973975591415828107248775449619403563269856991145789325659736854030396401772371148983463743700921913930643887223704115714270634525795771407138067936125866995910432010323584269926871467482064993332990516534083898654487467161183876470821163254662352951613205371404232685831299594035879\ne = 65537\nciphertext = 2087465275374927411696643073934443161977332564784688452208874207586196343901447373283939960111955963073429256266959192725814591103495590654238320816453299972810032321690243148092328690893438620034168359613530005646388116690482999620292746246472545500537029353066218068261278475470490922381998208396008297649151265515949490058859271855915806534872788601506545082508028917211992107642670108678400276555889198472686479168292281830557272701569298806067439923555717602352224216701010790924698838402522493324695403237985441044135894549709670322380450\n\"\"\"\n</code></pre> <p>\u7d20\u6570\u7531<code>7</code> or <code>2</code>\u7ec4\u6210\uff0c\u6240\u4ee5\u526a\u679d\u5c31\u597d\u4e86\uff0c\u548c\u4e8c\u8fdb\u5236\u768401\u6ca1\u4ec0\u4e48\u533a\u522b</p> <p>exp.py</p> Python<pre><code>from Crypto.Util.number import *\nimport itertools\nimport gmpy2\n\nn = 2160489795493918825870689458820648828073650907916827108594219132976202835249425984494778310568338106260399032800745421512005980632641226298431130513637640125399673697368934008374907832728004469350033174207285393191694692228748281256956917290437627249889472471749973975591415828107248775449619403563269856991145789325659736854030396401772371148983463743700921913930643887223704115714270634525795771407138067936125866995910432010323584269926871467482064993332990516534083898654487467161183876470821163254662352951613205371404232685831299594035879\ne = 65537\nciphertext = 2087465275374927411696643073934443161977332564784688452208874207586196343901447373283939960111955963073429256266959192725814591103495590654238320816453299972810032321690243148092328690893438620034168359613530005646388116690482999620292746246472545500537029353066218068261278475470490922381998208396008297649151265515949490058859271855915806534872788601506545082508028917211992107642670108678400276555889198472686479168292281830557272701569298806067439923555717602352224216701010790924698838402522493324695403237985441044135894549709670322380450\n\ndef findp(p,q):\n    l = len(p)\n    if l == 272 and n % int(p) == 0:\n        q = n // int(p)\n        print(f\"p = {p}\")\n        print(f\"q = {q}\")\n    else:\n        table = [\"2\",\"7\"]\n        for i,j in itertools.product(table,repeat=2):\n            pp = int(i + p)\n            qq = int(j + q)\n            if pp * qq % 10**l == n % 10**l:\n                findp(i+p,j+q)\n\n## findp(\"7\",\"7\")\np = 27777727727777722777277277777272772727772722777777277777277772227772772772227272727777772772772727227772777277727777777222777777277727772272272777772722727722777727277727727777777772772777772777277772222727227777777222727777772772272727777222777777277777727272772272272277\nq = 77777772777772222722727222227777272777772777772277727772722777777777227277727272772727277277272772727227272772772222277777772727727772722772777272727777272722772777277777277777277777727777277277777277777272772772777777727772727277727777772772777772272772272222227777777227\nd = gmpy2.invert(e,(p-1)*(q-1))\nm = pow(ciphertext,d,n)\nprint(long_to_bytes(m))\n## osu{h4v3_y0u_3v3r_n0t1c3d_th4t_727_1s_pr1m3?}\n</code></pre> <p>\u8fd9\u56db\u79cd\u5176\u5b9e\u611f\u89c9\u90fd\u7b97\u662f\u4e00\u4e2a\u7c7b\u578b\u7684\u3002\u8fd8\u6709\u5f88\u591a\u7c7b\u578b\u7684\u526a\u679d\u53ef\u4ee5\u53c2\u8003:Crypto\u8da3\u9898-\u526a\u679d | \u7cd6\u918b\u5c0f\u9e21\u5757\u7684blog (tangcuxiaojikuai.xyz)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#5","title":"5.\u526a\u679d\u9ad8\u4f4d\u6cc4\u9732","text":"<p>\u6539\u7f16\u81ea2024XYCTF\u2014\u2014\u94dc\u5320\u2014\u2014part3</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom uuid import uuid4\n\nflag = \"flag{\" + str(uuid4()) + \"}\"\nm = bytes_to_long(flag.encode())\n\ne = 65537\np = getPrime(512)\nq = getPrime(512)\nn = p * q\nn = p * q\nc = pow(m,e,n)\nhint = (p ^ q) &gt;&gt; 200\n\nprint(f\"c = {c}\")\nprint(f\"hint = {hint}\")\nprint(f\"n = {n}\")\n\"\"\"\nc = 131369115652458166734046676308463999858958566061027321031978783010359641091133329180071403453658128376834077573719048417128188606423319316139110362434662107918020440100011984923813248515798307240829242781364796147914413916010985480344221078382648887106771447184119879293816004142774768308105423590006218154095\nhint = 1418156189500701046118843280016917462701888775284481310064968961841401532967678842766145628051\nn = 149674440332297459310104619359509309480607215578927485825557593606756533602713173946403283163260154493438427348209708307170391308942988466700336664636266655214819841710712761463985437035510015805275916279554381867547108324810390610671268389247357987728963839572199589558858271355105026004101888297456720686127\n\"\"\"\n</code></pre> <p>\u539f\u7406\u53c2\u8003:2023-\u9e4f\u57ce\u676f-wp-crypto | \u7cd6\u918b\u5c0f\u9e21\u5757\u7684blog (tangcuxiaojikuai.xyz)</p> <p>exp</p> Python<pre><code>from Crypto.Util.number import *\n\nc = 77362292774939745985127248740136531356798680244461718641182309736632869439528624490319564705732587035892746550259989967311639940839352531540590481816143399815777578738222244349541298856970218973629828183402846736572747940317185733010901816452760815595925525717774150109667814870300394441913855689875810419726\nhint = 3952699881526141586582096584337236735424573202916336803978009509888494841237961467284222140708\nn = 101811981048263163700430054305833461232304464649339483324456752139265661172425623344370861924802283149319747333342558424458871624320190755682987168048547266046556603061770039238687342160962557147928318419071351955573359146111983095312306624896541836196196950684743489047140141567937687816622755267268993977151\ne = 65537\n\nleak = hint &lt;&lt; 200\nleak = bin(leak)[2:].zfill(512)\nleakbits = 200                          ## \u7f3a\u5931\u7684\u4f4d\u6570\n\ndef findp(pp,qq,l):\n    p_Min = int(pp + (512-l)*\"0\",2)\n    p_Max = int(pp + (512-l)*\"1\",2)\n    q_Min = int(qq + (512-l)*\"0\",2)\n    q_Max = int(qq + (512-l)*\"1\",2)\n\n    if(l == 512 - leakbits):\n        R.&lt;x&gt; = PolynomialRing(Zmod(n))\n        phigh = p_Min\n        f = phigh + x\n        root = f.small_roots(X=2^leakbits, beta=0.499)\n        if root != []:\n            p = phigh + int(root[0])\n            q = n // p\n            d = inverse(e,(p-1)*(q-1))\n            m = pow(c,d,n)\n            print(long_to_bytes(m))\n\n    if (p_Max * q_Max &lt; n) or (p_Min * q_Min &gt; n):\n        return\n\n    ## \u4ee5\u4e0b\u662f\u6839\u636e\u5f02\u6216\u6765\u64cd\u4f5c\u7684\n    if leak[l] == '0':\n        findp(pp + '1',qq + '1',l+1)\n        findp(pp + '0',qq + '0',l+1)\n    if leak[l] == '1':\n        findp(pp + '1',qq + '0',l+1)\n        findp(pp + '0',qq + '1',l+1)\n\nfindp('1','1',1)\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#n_1","title":"\u4e8c\u5341\u4e00\u3001\u4e00\u4e9b\u5206\u89e3n\u5e38\u7528\u7684\u65b9\u6cd5","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#1_11","title":"1.\u8d39\u9a6c\u5206\u89e3","text":"\\[ n = p\\times q = (\\frac{p+q}{2})^2 - (\\frac{p-q}{2})^2 \\] <p>\u7b80\u5355\u6765\u8bf4\uff0c\u8d39\u9a6c\u5206\u89e3\u5e72\u4e86\u8fd9\u6837\u4e00\u4ef6\u4e8b:</p> <p>\u4ece\\(a = \\sqrt{n}\\)\u5f00\u59cb\uff0c\u9010\u6b65\u589e\u52a0\uff0c\u76f4\u5230\u53d1\u73b0\\(a^2 - n\\)\u662f\u4e00\u4e2a\u5e73\u65b9\u6570\uff0c\u5c31\u627e\u5230\u4e86\u6b63\u786e\u7684\\(a,b\\)\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\\(p = a +b ,q = a -b\\)</p> <p>\u4ece\u8fd9\u4e2a\u601d\u60f3\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6548\u7387\u53d6\u51b3\u4e8e\\(\\frac{p+q}{2}\\)\u548c\\(\\sqrt{n}\\)\u7684\u5dee\u8ddd\uff0c\u6240\u4ee5\u5f53\\(p,q\\)\u63a5\u8fd1\u7684\u65f6\u5019\uff0c\u7528\u8d39\u9a6c\u5206\u89e3\u53ef\u4ee5\u5f88\u5feb\u8ba1\u7b97\u51fa\\(p,q\\)</p> <p>\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u811a\u672c</p> Python<pre><code>from math import isqrt\n\ndef fermat(n):\n    a = isqrt(n)\n    b2 = a * a - n\n    b = isqrt(n)\n    count = 0\n    while b * b != b2:\n        a = a + 1\n        b2 = a * a - n\n        b = isqrt(b2)\n        count += 1\n    p = a + b\n    q = a - b\n    assert n == p * q\n    return p, q\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#moectf2023-p-q","title":"\u4f8b\u9898\u2014\u2014MoeCTF2023 |p-q|","text":"<p>task.py</p> Python<pre><code>with open(\"flag.txt\",\"rb\") as fs:\n    flag = fs.read().strip()\nassert len(flag) == 72\n\nm = int.from_bytes(flag,\"big\")\n\nfrom Crypto.Util.number import getPrime, isPrime\n\ndef next_prime(p):\n    while True:\n        p += 2\n        if isPrime(p):\n            return p\n\np = getPrime(2048)\nq = next_prime(p)\nn = p * q\ne = 65537\nc = pow(m,e,n)\nprint(\"n =\",n)\nprint(\"c =\",c)\n\n## n = 329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217\n## c = 307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550\n</code></pre> <p>\u8fd9\u91ccp,q\u662f\u76f8\u90bb\u7684\u7d20\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f00\u6839\u53f7\u5206\u89e3\uff0c\u4e5f\u53ef\u4ee5\u7528\u8d39\u9a6c\u5206\u89e3</p> <p>exp.py</p> Python<pre><code>from math import isqrt\nfrom Crypto.Util.number import *\n\ndef fermat(n):\n    a = isqrt(n)\n    b2 = a * a - n\n    b = isqrt(n)\n    count = 0\n    while b * b != b2:\n        a = a + 1\n        b2 = a * a - n\n        b = isqrt(b2)\n        count += 1\n    p = a + b\n    q = a - b\n    assert n == p * q\n    return p, q\n\nn = \nc = \np,q = fermat(n)\nd = inverse(65537,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2p-1","title":"2.p-1\u5149\u6ed1","text":"<p>\u539f\u7406\u6ca1\u4e86\u89e3\uff0c\u5c31\u5b58\u4e2a\u811a\u672c\u5427</p> <p>\u811a\u672c\u6765\u6e90:RSA\u653b\u51fb\uff1aSmooth\u653b\u51fb_p-1\u5149\u6ed1\u653b\u51fb-CSDN\u535a\u5ba2</p> Python<pre><code>import gmpy2\n\ndef Pollards_p_1(N):\n    a = 2   ## \u4e3a\u4e86\u5feb\u901f\u8ba1\u7b97\u4ee5\u53ca\u6ee1\u8db3\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6761\u4ef6\n    n = 2   ## \u4ece1\u5f00\u59cb\u6ca1\u5fc5\u8981\n\n    while True:\n        a = pow(a, n, N)    ## \u9012\u63a8\u8ba1\u7b97a^B!\n        res = gmpy2.gcd(a - 1, N)   ## \u5c1d\u8bd5\u8ba1\u7b97p\n        if res != 1 and res != N:   ## \u6ee1\u8db3\u6761\u4ef6\u540e\u8fd4\u56de\n            return res\n        n += 1\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#nctf2019-childrsa","title":"\u4f8b\u9898\u2014\u2014NCTF2019 childRSA","text":"<p>task.py</p> Python<pre><code>from random import choice\nfrom Crypto.Util.number import isPrime, sieve_base as primes\nfrom flag import flag\n\n\ndef getPrime(bits):\n    while True:\n        n = 2\n        while n.bit_length() &lt; bits:\n            n *= choice(primes)\n        if isPrime(n + 1):\n            return n + 1\n\ne = 0x10001\nm = int.from_bytes(flag.encode(), 'big')\np, q = [getPrime(2048) for _ in range(2)]\nn = p * q\nc = pow(m, e, n)\n\n## n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513\n## c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108\n</code></pre> <p>exp.py</p> Python<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\ndef Pollards_p_1(N):\n    a = 2   ## \u4e3a\u4e86\u5feb\u901f\u8ba1\u7b97\u4ee5\u53ca\u6ee1\u8db3\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6761\u4ef6\n    n = 2   ## \u4ece1\u5f00\u59cb\u6ca1\u5fc5\u8981\n\n    while True:\n        a = pow(a, n, N)    ## \u9012\u63a8\u8ba1\u7b97a^B!\n        res = gmpy2.gcd(a - 1, N)   ## \u5c1d\u8bd5\u8ba1\u7b97p\n        if res != 1 and res != N:   ## \u6ee1\u8db3\u6761\u4ef6\u540e\u8fd4\u56de\n            return res\n        n += 1\n\nn = \nc = \np = Pollards_p_1(n)\nq = n // p\nd = inverse(65537,(p-1)*(q-1))\nm = pow(c,d,n)\nprint(long_to_bytes(m))\n## NCTF{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#3p1","title":"3.p+1\u5149\u6ed1","text":"<p>\u811a\u672c\u6765\u6e90:</p> Python<pre><code>def lucas(c, d, N):\n    x = c ## a1\n    y = (c**2 - 2) % N ## a2\n    for bit in bin(d)[3:]: ## \u5feb\u901f\u4e58(\u4ece\u9ad8\u5230\u4f4e\u4f4d)--\u6211\u4e2a\u4eba\u7406\u89e3\n        if bit == '1':\n            x = (x*y - c) % N ## \u4e0b\u6807\u5bf9\u5e94a_{x+y}\uff0c\u5176\u6b21\u4fdd\u8bc1a_{2k-1}=a_{k}a_{k-1}-a_{0}\u6210\u7acb\n            y = (y**2 - 2) % N ## \u4f7f\u5f97y\u7ffb\u500d--\u6b63\u5e38\u7684\u5feb\u901f\u5e42\u6d41\u7a0b\n        else:\n            y = (x*y - c) % N ## \u4fdd\u8bc1a_{2k-1}=a_{k}a_{k-1}-a_{0}\u6210\u7acb\n            x = (x**2 - 2) % N ## a_{k} \u7ffb\u500d\n    return x #\u8fd4\u56dea_{ed}\n</code></pre> <p>\u624d\u758f\u5b66\u6d45\uff0c\u6ca1\u627e\u5230\u4f8b\u9898</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#4phinn","title":"4.\u5df2\u77e5phi\u548cn\u5206\u89e3n","text":"<p>\u5982\u679c\u662f\u4e24\u4e2a\u56e0\u5b50\u7684,\\(n = p\\times q\\)\uff0c\u90a3\u4e48\u76f4\u63a5\u8054\u7acb\u65b9\u7a0b\u5c31\u53ef\u4ee5\u89e3</p> <p>\u5982\u679c\u662f\u591a\u56e0\u5b50\u7684\u8bdd\uff0c\u5c31\u6ca1\u8fd9\u4e48\u5bb9\u6613\u4e86\uff0c\u4ee5NKCTF2023\u7684ezRSA\u4e3a\u4f8b</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#nkctf2023-ezrsa","title":"\u4f8b\u9898\u2014\u2014NKCTF2023 ezRSA","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom secret import flag\n\nm1 = bytes_to_long(flag[:len(flag)//3])\nm2 = bytes_to_long(flag[len(flag)//3:])\n\ndef gen():\n    prime_list  = []\n    for i in range(4):\n        prime_list.append(getPrime(512))\n    return sorted(prime_list)\n\nprime_list = gen()\np,q,r,t = prime_list[0],prime_list[3],prime_list[1],prime_list[2]\ne = 65537\nn = p*q*r*t\nphi = (p-1)*(q-1)*(r-1)*(t-1)\nc1 = pow(m1,e,p*q)\np1 = getPrime(512)\nq1 = getPrime(512)\nN = p1*q1\nc2 = pow(m2,p1,N)\nc3 = pow(m2,q1,N)\nprint(f'n = {n}')\nprint(f'phi = {phi}')\nprint(f'c1 = {c1}')\nprint(f'N = {N}')\nprint(f'c2 = {c2}')\nprint(f'c3 = {c3}')\n\n'''\nn = 8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505626165666334675100147790578546682128517668100858766784733351894480181877144793496927464058323582165412552970999921215333509253052644024478417393146000490808639363681195799826541558906527985336104761974023394438549055804234997654701266967731137282297623426318212701157416397999108259257077847307874122736921265599854976855949680133804464839768470200425669609996841568545945133611190979810786943246285103031363790663362165522662820344917056587244701635831061853354597\nphi = 8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505622503351461565956106005118029537938273153581675065762015952483687057805462728186901563990429998916382820576211887477098611684072561849314986341226981300596338314989867731725668312057134075244816223120038573374383949718714549930261073576391501671722900294331289082826058292599838631513746370889828026039555245672195833927609280773258978856664434349221972568651378808050580665443131001632395175205804045958846124475183825589672204752895252723130454951830966138888560\nc1 = 78327207863361017953496121356221173288422862370301396867341957979087627011991738176024643637029313969241151622985226595093079857523487726626882109114134910056673489916408854152274726721451884257677533593174371742411008169082367666168983943358876017521749198218529804830864940274185360506199116451280975188409\nN = 157202814866563156513184271957553223260772141845129283711146204376449001653397810781717934720804041916333174673656579086498762693983380365527400604554663873045166444369504886603233275868192688995284322277504050322927511160583280269073338415758019142878016084536129741435221345599028001581385308324407324725353\nc2 = 63355788175487221030596314921407476078592001060627033831694843409637965350474955727383434406640075122932939559532216639739294413008164038257338675094324172634789610307227365830016457714456293397466445820352804725466971828172010276387616894829328491068298742711984800900411277550023220538443014162710037992032\nc3 = 9266334096866207047544089419994475379619964393206968260875878305040712629590906330073542575719856965053269812924808810766674072615270535207284077081944428011398767330973702305174973148018082513467080087706443512285098600431136743009829009567065760786940706627087366702015319792328141978938111501345426931078\n'''\n</code></pre> <p>exp.py</p> Python<pre><code>from math import gcd\nfrom math import isqrt\nfrom random import randrange\nfrom gmpy2 import is_prime\n\n\ndef factorize(N, phi):\n    \"\"\"\n    Recovers the prime factors from a modulus if Euler's totient is known.\n    This method only works for a modulus consisting of 2 primes!\n    :param N: the modulus\n    :param phi: Euler's totient, the order of the multiplicative group modulo N\n    :return: a tuple containing the prime factors, or None if the factors were not found\n    \"\"\"\n    s = N + 1 - phi\n    d = s ** 2 - 4 * N\n    p = int(s - isqrt(d)) // 2\n    q = int(s + isqrt(d)) // 2\n    return p, q\n\n\ndef factorize_multi_prime(N, phi):\n    \"\"\"\n    Recovers the prime factors from a modulus if Euler's totient is known.\n    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.\n    More information: Hinek M. J., Low M. K., Teske E., \"On Some Attacks on Multi-prime RSA\" (Section 3)\n    :param N: the modulus\n    :param phi: Euler's totient, the order of the multiplicative group modulo N\n    :return: a tuple containing the prime factors\n    \"\"\"\n    prime_factors = set()\n    factors = [N]\n    while len(factors) &gt; 0:\n        ## Element to factorize.\n        N = factors[0]\n\n        w = randrange(2, N - 1)\n        i = 1\n        while phi % (2 ** i) == 0:\n            sqrt_1 = pow(w, phi // (2 ** i), N)\n            if sqrt_1 &gt; 1 and sqrt_1 != N - 1:\n                ## We can remove the element to factorize now, because we have a factorization.\n                factors = factors[1:]\n\n                p = gcd(N, sqrt_1 + 1)\n                q = N // p\n\n                if is_prime(p):\n                    prime_factors.add(p)\n                elif p &gt; 1:\n                    factors.append(p)\n\n                if is_prime(q):\n                    prime_factors.add(q)\n                elif q &gt; 1:\n                    factors.append(q)\n\n                ## Continue in the outer loop\n                break\n\n            i += 1\n\n    return tuple(prime_factors)\n\nn = \nphi = \nprime_list = sorted(factorize_multi_prime(n,phi))\np,q,r,s = prime_list[0],prime_list[3],prime_list[1],prime_list[2]\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#5edn","title":"5.\u5df2\u77e5e,d\u5206\u89e3n","text":"Python<pre><code>import random\nimport gmpy2\n\ndef divide_pq(e, d, n):\n    k = e*d - 1\n    while True:\n        g = random.randint(2, n-1)\n        t = k\n        while True:\n            if t % 2 != 0:\n                break\n            t //= 2\n            x = pow(g, t, n)\n            if x &gt; 1 and gmpy2.gcd(x-1, n) &gt; 1:\n                p = gmpy2.gcd(x-1, n)\n                return (p, n//p)\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_29","title":"\u4e8c\u5341\u4e8c\u3001\u4e0d\u77e5\u9053\u53eb\u4ec0\u4e48\u5206\u7c7b\u7684\u9898\u76ee","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#p-q","title":"\u7ed9\u51fap + q\u4f4e\u4f4d","text":"<p>\u9898\u76ee\u6539\u7f16\u81ea2024XYCTF\u2014\u2014\u94dc\u5320\u2014\u2014part2</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom uuid import uuid4\n\nflag = \"flag{\" + str(uuid4()) + \"}\"\nm = bytes_to_long(flag.encode())\n\ne = 65537\np = getPrime(1024)\nq = getPrime(1024)\nn = p * q\n\nc = pow(m, e, n)\nhint = (p + q) &amp; ((1 &lt;&lt; 624) - 1)\nprint(f\"c = {c}\")\nprint(f\"hint = {hint}\")\nprint(f\"n = {n}\")\n\"\"\"\nc = 15315623227108436291858457034857784719507552879018189851637500530704870673436079954784519165863568569923075589417879105802430194799540543536178163710092884414704414320471378011034947694757321045648672645088739109820484000260862752393231610482665197130322211444656668269314857325584729333799747940039582233403795688967132390847508527859286606080564369696319857802230684766189133382904414261588681956483620140766886760632093938290509495921191051004955960321224324525865371027175220422824090922909186107029324403060456677201122370380708945945621513853659281202197178155661602947407740113932985040400431009519035927170893\nhint = 24765551240982534917083490896297931130347202481167225145278716583234238038819431100154290815134734511033735464993876484465992525732351399544319245104113383110187111270727627683278542339074\nn = 17551595965847360101001559529386245228497232313421489853434901311116953087050954433040038840788997073271446971526589676430781788129026667353632541062149232552031818920006832783397173014011531311807992794738323157382559849771809561200626834225824761208921248849766951980339089458227127422515917026821919873970760316856393212652571020677585627719682906485373773819364730302897222175047226443095023421963275036185038777190349527562337069435775581997139041749482233185668100893166822768561406331106814954573421744711888039361670837655170604347860448702902142977569791794645486978083071644858164529311966931143494605467581\n\"\"\"\n</code></pre> <p>\u7531\u9898\u610f\u77e5\\(hint \\equiv p+q \\mod 2^{624}\\)</p> <p>\u9664\u6b64\u4e4b\u5916\u8fd8\u53ef\u4ee5\u5f97\u5230\\(n_{low} \\equiv p\\times q \\mod 2^{624}\\)</p> <p>\u4e8e\u662f\u6709\\(n_{low} \\equiv p(hint - p) \\mod 2^{624}\\)\uff0c\u89e3\u8fd9\u4e2a\u65b9\u7a0b\uff0c\u7136\u540e\u5f97\u5230p\u7684\u4f4e\u4f4d\uff0c\u518d\u7528coppersmith</p> <p>exp.sage</p> Python<pre><code>from Crypto.Util.number import *\n\nc = \nhint = \nn = \ne = 65537\n\n\nn_low = n % 2^624\nvar('p')\nf = p * (hint - p) - n_low\nres = solve_mod(f,2^624)\nfor i in res:\n    plow = int(i[0])\n    R.&lt;x&gt; = PolynomialRing(Zmod(n))\n    f2 = x * 2^624 + plow\n    f2 = f2.monic()\n    root = f2.small_roots(X = 2^400,beta=0.4)\n    if root != []:\n        p = int(root[0])*2^624 + plow\n        q = n // p\n        d = inverse(e,(p-1)*(q-1))\n        m = pow(c,d,n)\n        print(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#p-q_1","title":"\u7ed9\u51fap + q\u9ad8\u4f4d","text":"<p>\u9898\u76ee\u6539\u7f16\u81ea2023\u8d35\u9633\u5927\u6570\u636e\u5b89\u5168\u7cbe\u82f1\u8d5b\u2014\u2014childrsa</p> <p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom uuid import uuid4\n\nflag = \"flag{\" + str(uuid4()) + \"}\"\nm = bytes_to_long(flag.encode())\n\ne = 65537\np = getPrime(1024)\nq = getPrime(1024)\nn = p * q\nc = pow(m,e,n)\nhint = (p + q) &gt;&gt; 400\n\nprint(f\"c = {c}\")\nprint(f\"hint = {hint}\")\nprint(f\"n = {n}\")\n\"\"\"\nc = 9968814618309288374765866491408679544255429893255485341540355195679112942954793887247314436025657932769746362042585414910893400260770578028623836705800055045072907439444477587736093915786634848757052762926680474130492661750432044025559425178180215747669943104929529122332455902347039817592660193268467698523220383789551009222998925658852390205657636722754375420684776093364112335355059660951403603124371637134722485720098467185512008162108300224681045740170399118079432119176169258163078208915377786922862558709935512780853980376778422910630993460815435812492821018759585591884031366023668940372754253922297009332299\nhint = 105339843160443546161059100165057877716740618426298713183228594499797346255161510101279378179555206038228997256205578377516899889823785206924887213498045434452190147663923551839494492842528\nn = 18082068933780051996564597024915927694586996785675007728934595064379707482865414885175435323040864143693167921685287351955951750372213399691641808639756160589090710830417826035004009898533761679036070970158874299127191974011618903726273713888134189317545858033157115955525192756551460792306555827664839412205373639439765940037587708927072607585261515428021124875200073775443189376478576573477677951404802079319347815808709279487553524912259078196698834492416001870786404364835221144821510700252279703537618579227763205158431798627532437072037863851605556234186314341793234064284447561153310642226744523000217117902339\n\"\"\"\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u8054\u7acb\\(p+q\\)\u7684\u9ad8\u4f4d\u548c\\(n = p \\times q\\)\u89e3\u65b9\u7a0b\u7ec4\uff0c\u6b64\u65f6\u89e3\u51fa\u6765\u7684\\(p\\)\u548c\u6b63\u786e\u7684\\(p\\)\u9ad8\u4f4d\u662f\u4e00\u6837\u7684\uff0c\u6700\u540e\u518d\u7528coppersmith\u53bb\u89e3\u4f4e400\u4f4d</p> <p>\u5b9e\u9645\u6d4b\u8bd5\u53d1\u73b0\uff0c\u89e3\u65b9\u7a0b\u53ef\u80fd\u5b58\u5728\u8bef\u5dee\uff0c\u6240\u4ee5\u6700\u540e\u7528copper\u5904\u7406\u4f4e405\u4f4d</p> <p>Exp</p> Python<pre><code>from Crypto.Util.number import *\n\nc = \nhint = \nn = \ne = 65537\n\nR.&lt;x&gt; = PolynomialRing(RealField(2048))\n\nf = x * ((hint &lt;&lt; 400) - x) - n\nres = f.roots()\nfor root in res:\n    phigh = int(root[0]) &gt;&gt; 405 &lt;&lt; 405\n    PR.&lt;x&gt; = PolynomialRing(Zmod(n))\n    f1 = phigh + x\n    res1 = f1.small_roots(X = 2^405,beta=0.4)\n    if res1 != []:\n        p = phigh + int(res1[0])\n        q = n // p\n        d = inverse(e,(p-1)*(q-1))\n        m = pow(c,d,n)\n        print(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#p2-q2n-pq","title":"\u5df2\u77e5p^2 + q^2\u5206\u89e3n = p*q","text":"<p>\u5229\u7528sagemath\u81ea\u5e26\u51fd\u6570<code>two_squares()</code>\uff0c\u751a\u81f3\u6709<code>three_squares()</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#_30","title":"\u4e8c\u5341\u4e09\u3001\u79c1\u94a5\u6587\u4ef6\u63d0\u53d6\u53c2\u6570","text":"<p>\u5e38\u8003\u7684\u5c31\u662fPKCS1\u5f62\u5f0f\u7684\u79c1\u94a5\u6587\u4ef6\uff0c\u53c2\u8003:\u53c2\u8003\u6587\u7ae0</p> <p>\u5148\u751f\u6210\u79c1\u94a5\u6587\u4ef6</p> Python<pre><code>from Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\n\np = getPrime(1024)\nq = getPrime(1024)\nn = p*q\ne = 65537\nd = inverse(e,(p-1)*(q-1))\n\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"p = {p}\")\nprint(f\"q = {q}\")\nprint(f\"dp = {d % (p-1)}\")\nprint(f\"dq = {d % (q-1)}\")\nprint(f\"inv = {inverse(p,q)}\")\n\nprivatekey = RSA.construct((n,e,int(d)))\n\nwith open(\"privatekey.pem\",\"wb\") as f2:\n    f2.write(privatekey.export_key())\n</code></pre> <p>\u5f97\u5230</p> Python<pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAhgPB1hHIr7An3HDG1dqJo8UQu+5oOLOA119z0rZESozrr1ox\n3g0Ku86t1X1OpbawWr8cFzXgYsDtgZPWhEExbsU/qHGZXewo8ofe/4Sa/s1DOpUm\nZIFsM/YAtWEex+aTwA9FT+6EZ3OYJatmY9iq9ewnAjeCdBwll04C8vT9Ke73Xndn\nB8tTtL2S4hIcuz7vVd1HTZSfQ+ousLUM5OuTe0361NFqp4RFhhHjtM9cuvyaPaMF\nvRFoemXyCH8pfxgl4llFSBJitPAeLBxHpV9PjlLBp4kYIzPrYDMp1AF2seQyvb8W\nNujFcu0ZvOZRuHxULiUT2RI2srZ6eyAoq7RXiwIDAQABAoIBAE/yw9tqZpfw9ga7\nPNNteTk7Ih2LP5+77nwN1LH6zEjRQvUsUJ2QmDusM+YtyBJyJ0krw51RJdikEcyA\nnrPtlIjpoW1iv8TZUyBE0FMND848NAQp4GqLDzr8YjXSh6NnufMU6RujRlfVDQpD\n82RTaMInLKpU5T1RYVefUYERiEpQCJjzDd2fb1UlCJx6XZguTXTsqCmhr7Lr6xN1\nWvSdTY2a7cPxnusggrCaiYxoCjJQRPl+Z4O33gHkXNbZnch5YlEQui1+fanofKuk\nlK3mAbqBwo/lfXXAu5GbhMdIZ6Iw68vAiFJQtuwvOYE1h6sN3EHsjnfkbfgC+uu4\n1QQfAvECgYEAyBFidz8w3ijHW+XDcH20JhHxEMAmFTUf0fXI11x3ECk+6c2yAH1v\nDHM4rr3KHspVhEJzyNVsVBg1I4JF5gSkPWsygjdoyMPqjQ9M0YP2Qho6iiiz20c3\nw+K9cBezTNtDn+N/gqOrJLBGOpru1zwpfroS4ie76QNpAUZ83OQUVrkCgYEAq3sG\nB0rZvn3+LbQ3S/AlydpnZYf6e85FUt3fQukRBI4vLl6SpOMJSZfQQUnM+P09t2z7\nrH3w4QLOYbfEndt1I/MMhfWb7a96I/Cfw9mW48RIUrk4MUtV/Pq7bKz0vzq/DBnA\n44nAsa46bb9ysjJ6+fcnLWNLWz4O9+vBeFaGPmMCgYB+vnSwsrmUpCTX1REhPKFZ\n1NfxEqmNmeAUtS6NMKjE9jxDBeqUYOJu8regC9/17ZyLc0XCn2JHTCat3iPF+n7J\n4hVXZR7ewS7gOiciPAVQDymyyOJYMh/j2srELl+KewW2TvtCmckcLwfurKROenCX\nNe4sk5t5nI1zH2KO1XcFEQKBgH9DeD/lPyBu5TsKKpfDDGh4HJBvkGhdt3k+jLld\nu3GEDGP/cBnLHVNuxfIOUX7ggvMkgMuNVD3KFVzUQ6lb+93IPZ0VoLmPp7gQlqGF\nVMSJIZuzNo7u+Ewd0QdgfOuHL85NNqgnzciQI3DbysWRTU9CK+M1c/GtZvJ8F0O2\nAz89AoGAILpBAbTHYaBpdXrN4axCm9wbJzEJlk0Pv9BvNXly5LiU/xJsgppP/gmP\n9NmUN8QKmp3dmxM9Ub36DYGpZRyPKbKfjKQfSraLXwokr7aIm4jc7Ow0NBBgTsfS\nEaqTgYiY9axcqaYS9I5iyfQZt9Kl/hJX6aT9s2M+DQfchzaFWkQ=\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>\u89e3base64\u518d\u8f6c16\u8fdb\u5236\u5f97\u5230\u4e0b\u9762\u7684\u5185\u5bb9</p> Text Only<pre><code>30 82 04 a2 02 01 00 02 82 01 01 00 86 03 c1 d6 11 c8 af b0 27 dc 70 c6 d5 da 89 a3 c5 10 bb ee 68 38 b3 80 d7 5f 73 d2 b6 44 4a 8c eb af 5a 31 de 0d 0a bb ce ad d5 7d 4e a5 b6 b0 5a bf 1c 17 35 e0 62 c0 ed 81 93 d6 84 41 31 6e c5 3f a8 71 99 5d ec 28 f2 87 de ff 84 9a fe cd 43 3a 95 26 64 81 6c 33 f6 00 b5 61 1e c7 e6 93 c0 0f 45 4f ee 84 67 73 98 25 ab 66 63 d8 aa f5 ec 27 02 37 82 74 1c 25 97 4e 02 f2 f4 fd 29 ee f7 5e 77 67 07 cb 53 b4 bd 92 e2 12 1c bb 3e ef 55 dd 47 4d 94 9f 43 ea 2e b0 b5 0c e4 eb 93 7b 4d fa d4 d1 6a a7 84 45 86 11 e3 b4 cf 5c ba fc 9a 3d a3 05 bd 11 68 7a 65 f2 08 7f 29 7f 18 25 e2 59 45 48 12 62 b4 f0 1e 2c 1c 47 a5 5f 4f 8e 52 c1 a7 89 18 23 33 eb 60 33 29 d4 01 76 b1 e4 32 bd bf 16 36 e8 c5 72 ed 19 bc e6 51 b8 7c 54 2e 25 13 d9 12 36 b2 b6 7a 7b 20 28 ab b4 57 8b 02 03 01 00 01 02 82 01 00 4f f2 c3 db 6a 66 97 f0 f6 06 bb 3c d3 6d 79 39 3b 22 1d 8b 3f 9f bb ee 7c 0d d4 b1 fa cc 48 d1 42 f5 2c 50 9d 90 98 3b ac 33 e6 2d c8 12 72 27 49 2b c3 9d 51 25 d8 a4 11 cc 80 9e b3 ed 94 88 e9 a1 6d 62 bf c4 d9 53 20 44 d0 53 0d 0f ce 3c 34 04 29 e0 6a 8b 0f 3a fc 62 35 d2 87 a3 67 b9 f3 14 e9 1b a3 46 57 d5 0d 0a 43 f3 64 53 68 c2 27 2c aa 54 e5 3d 51 61 57 9f 51 81 11 88 4a 50 08 98 f3 0d dd 9f 6f 55 25 08 9c 7a 5d 98 2e 4d 74 ec a8 29 a1 af b2 eb eb 13 75 5a f4 9d 4d 8d 9a ed c3 f1 9e eb 20 82 b0 9a 89 8c 68 0a 32 50 44 f9 7e 67 83 b7 de 01 e4 5c d6 d9 9d c8 79 62 51 10 ba 2d 7e 7d a9 e8 7c ab a4 94 ad e6 01 ba 81 c2 8f e5 7d 75 c0 bb 91 9b 84 c7 48 67 a2 30 eb cb c0 88 52 50 b6 ec 2f 39 81 35 87 ab 0d dc 41 ec 8e 77 e4 6d f8 02 fa eb b8 d5 04 1f 02 f1 02 81 81 00 c8 11 62 77 3f 30 de 28 c7 5b e5 c3 70 7d b4 26 11 f1 10 c0 26 15 35 1f d1 f5 c8 d7 5c 77 10 29 3e e9 cd b2 00 7d 6f 0c 73 38 ae bd ca 1e ca 55 84 42 73 c8 d5 6c 54 18 35 23 82 45 e6 04 a4 3d 6b 32 82 37 68 c8 c3 ea 8d 0f 4c d1 83 f6 42 1a 3a 8a 28 b3 db 47 37 c3 e2 bd 70 17 b3 4c db 43 9f e3 7f 82 a3 ab 24 b0 46 3a 9a ee d7 3c 29 7e ba 12 e2 27 bb e9 03 69 01 46 7c dc e4 14 56 b9 02 81 81 00 ab 7b 06 07 4a d9 be 7d fe 2d b4 37 4b f0 25 c9 da 67 65 87 fa 7b ce 45 52 dd df 42 e9 11 04 8e 2f 2e 5e 92 a4 e3 09 49 97 d0 41 49 cc f8 fd 3d b7 6c fb ac 7d f0 e1 02 ce 61 b7 c4 9d db 75 23 f3 0c 85 f5 9b ed af 7a 23 f0 9f c3 d9 96 e3 c4 48 52 b9 38 31 4b 55 fc fa bb 6c ac f4 bf 3a bf 0c 19 c0 e3 89 c0 b1 ae 3a 6d bf 72 b2 32 7a f9 f7 27 2d 63 4b 5b 3e 0e f7 eb c1 78 56 86 3e 63 02 81 80 7e be 74 b0 b2 b9 94 a4 24 d7 d5 11 21 3c a1 59 d4 d7 f1 12 a9 8d 99 e0 14 b5 2e 8d 30 a8 c4 f6 3c 43 05 ea 94 60 e2 6e f2 b7 a0 0b df f5 ed 9c 8b 73 45 c2 9f 62 47 4c 26 ad de 23 c5 fa 7e c9 e2 15 57 65 1e de c1 2e e0 3a 27 22 3c 05 50 0f 29 b2 c8 e2 58 32 1f e3 da ca c4 2e 5f 8a 7b 05 b6 4e fb 42 99 c9 1c 2f 07 ee ac a4 4e 7a 70 97 35 ee 2c 93 9b 79 9c 8d 73 1f 62 8e d5 77 05 11 02 81 80 7f 43 78 3f e5 3f 20 6e e5 3b 0a 2a 97 c3 0c 68 78 1c 90 6f 90 68 5d b7 79 3e 8c b9 5d bb 71 84 0c 63 ff 70 19 cb 1d 53 6e c5 f2 0e 51 7e e0 82 f3 24 80 cb 8d 54 3d ca 15 5c d4 43 a9 5b fb dd c8 3d 9d 15 a0 b9 8f a7 b8 10 96 a1 85 54 c4 89 21 9b b3 36 8e ee f8 4c 1d d1 07 60 7c eb 87 2f ce 4d 36 a8 27 cd c8 90 23 70 db ca c5 91 4d 4f 42 2b e3 35 73 f1 ad 66 f2 7c 17 43 b6 03 3f 3d 02 81 80 20 ba 41 01 b4 c7 61 a0 69 75 7a cd e1 ac 42 9b dc 1b 27 31 09 96 4d 0f bf d0 6f 35 79 72 e4 b8 94 ff 12 6c 82 9a 4f fe 09 8f f4 d9 94 37 c4 0a 9a 9d dd 9b 13 3d 51 bd fa 0d 81 a9 65 1c 8f 29 b2 9f 8c a4 1f 4a b6 8b 5f 0a 24 af b6 88 9b 88 dc ec ec 34 34 10 60 4e c7 d2 11 aa 93 81 88 98 f5 ac 5c a9 a6 12 f4 8e 62 c9 f4 19 b7 d2 a5 fe 12 57 e9 a4 fd b3 63 3e 0d 07 dc 87 36 85 5a 44\n</code></pre> <p>\u5bf9\u5176\u683c\u5f0f\u5316</p> Text Only<pre><code>30 82 04 a2 \n    02 01 \n        00 \n\n    02 82 01 01 \n        00 86 03 c1 d6 11 c8 af b0 27 dc 70 c6 d5 da 89 a3 c5 10 bb ee 68 38 b3 80 d7 5f 73 d2 b6 44 4a 8c eb af 5a 31 de 0d 0a bb ce ad d5 7d 4e a5 b6 b0 5a bf 1c 17 35 e0 62 c0 ed 81 93 d6 84 41 31 6e c5 3f a8 71 99 5d ec 28 f2 87 de ff 84 9a fe cd 43 3a 95 26 64 81 6c 33 f6 00 b5 61 1e c7 e6 93 c0 0f 45 4f ee 84 67 73 98 25 ab 66 63 d8 aa f5 ec 27 02 37 82 74 1c 25 97 4e 02 f2 f4 fd 29 ee f7 5e 77 67 07 cb 53 b4 bd 92 e2 12 1c bb 3e ef 55 dd 47 4d 94 9f 43 ea 2e b0 b5 0c e4 eb 93 7b 4d fa d4 d1 6a a7 84 45 86 11 e3 b4 cf 5c ba fc 9a 3d a3 05 bd 11 68 7a 65 f2 08 7f 29 7f 18 25 e2 59 45 48 12 62 b4 f0 1e 2c 1c 47 a5 5f 4f 8e 52 c1 a7 89 18 23 33 eb 60 33 29 d4 01 76 b1 e4 32 bd bf 16 36 e8 c5 72 ed 19 bc e6 51 b8 7c 54 2e 25 13 d9 12 36 b2 b6 7a 7b 20 28 ab b4 57 8b \n\n    02 03 \n        01 00 01 \n\n    02 82 01 00 \n        4f f2 c3 db 6a 66 97 f0 f6 06 bb 3c d3 6d 79 39 3b 22 1d 8b 3f 9f bb ee 7c 0d d4 b1 fa cc 48 d1 42 f5 2c 50 9d 90 98 3b ac 33 e6 2d c8 12 72 27 49 2b c3 9d 51 25 d8 a4 11 cc 80 9e b3 ed 94 88 e9 a1 6d 62 bf c4 d9 53 20 44 d0 53 0d 0f ce 3c 34 04 29 e0 6a 8b 0f 3a fc 62 35 d2 87 a3 67 b9 f3 14 e9 1b a3 46 57 d5 0d 0a 43 f3 64 53 68 c2 27 2c aa 54 e5 3d 51 61 57 9f 51 81 11 88 4a 50 08 98 f3 0d dd 9f 6f 55 25 08 9c 7a 5d 98 2e 4d 74 ec a8 29 a1 af b2 eb eb 13 75 5a f4 9d 4d 8d 9a ed c3 f1 9e eb 20 82 b0 9a 89 8c 68 0a 32 50 44 f9 7e 67 83 b7 de 01 e4 5c d6 d9 9d c8 79 62 51 10 ba 2d 7e 7d a9 e8 7c ab a4 94 ad e6 01 ba 81 c2 8f e5 7d 75 c0 bb 91 9b 84 c7 48 67 a2 30 eb cb c0 88 52 50 b6 ec 2f 39 81 35 87 ab 0d dc 41 ec 8e 77 e4 6d f8 02 fa eb b8 d5 04 1f 02 f1 \n\n    02 81 81 00 \n        c8 11 62 77 3f 30 de 28 c7 5b e5 c3 70 7d b4 26 11 f1 10 c0 26 15 35 1f d1 f5 c8 d7 5c 77 10 29 3e e9 cd b2 00 7d 6f 0c 73 38 ae bd ca 1e ca 55 84 42 73 c8 d5 6c 54 18 35 23 82 45 e6 04 a4 3d 6b 32 82 37 68 c8 c3 ea 8d 0f 4c d1 83 f6 42 1a 3a 8a 28 b3 db 47 37 c3 e2 bd 70 17 b3 4c db 43 9f e3 7f 82 a3 ab 24 b0 46 3a 9a ee d7 3c 29 7e ba 12 e2 27 bb e9 03 69 01 46 7c dc e4 14 56 b9 \n\n    02 81 81 00 \n        ab 7b 06 07 4a d9 be 7d fe 2d b4 37 4b f0 25 c9 da 67 65 87 fa 7b ce 45 52 dd df 42 e9 11 04 8e 2f 2e 5e 92 a4 e3 09 49 97 d0 41 49 cc f8 fd 3d b7 6c fb ac 7d f0 e1 02 ce 61 b7 c4 9d db 75 23 f3 0c 85 f5 9b ed af 7a 23 f0 9f c3 d9 96 e3 c4 48 52 b9 38 31 4b 55 fc fa bb 6c ac f4 bf 3a bf 0c 19 c0 e3 89 c0 b1 ae 3a 6d bf 72 b2 32 7a f9 f7 27 2d 63 4b 5b 3e 0e f7 eb c1 78 56 86 3e 63 \n\n    02 81 80 \n        7e be 74 b0 b2 b9 94 a4 24 d7 d5 11 21 3c a1 59 d4 d7 f1 12 a9 8d 99 e0 14 b5 2e 8d 30 a8 c4 f6 3c 43 05 ea 94 60 e2 6e f2 b7 a0 0b df f5 ed 9c 8b 73 45 c2 9f 62 47 4c 26 ad de 23 c5 fa 7e c9 e2 15 57 65 1e de c1 2e e0 3a 27 22 3c 05 50 0f 29 b2 c8 e2 58 32 1f e3 da ca c4 2e 5f 8a 7b 05 b6 4e fb 42 99 c9 1c 2f 07 ee ac a4 4e 7a 70 97 35 ee 2c 93 9b 79 9c 8d 73 1f 62 8e d5 77 05 11 \n\n    02 81 80 \n        7f 43 78 3f e5 3f 20 6e e5 3b 0a 2a 97 c3 0c 68 78 1c 90 6f 90 68 5d b7 79 3e 8c b9 5d bb 71 84 0c 63 ff 70 19 cb 1d 53 6e c5 f2 0e 51 7e e0 82 f3 24 80 cb 8d 54 3d ca 15 5c d4 43 a9 5b fb dd c8 3d 9d 15 a0 b9 8f a7 b8 10 96 a1 85 54 c4 89 21 9b b3 36 8e ee f8 4c 1d d1 07 60 7c eb 87 2f ce 4d 36 a8 27 cd c8 90 23 70 db ca c5 91 4d 4f 42 2b e3 35 73 f1 ad 66 f2 7c 17 43 b6 03 3f 3d \n\n    02 81 80 \n        20 ba 41 01 b4 c7 61 a0 69 75 7a cd e1 ac 42 9b dc 1b 27 31 09 96 4d 0f bf d0 6f 35 79 72 e4 b8 94 ff 12 6c 82 9a 4f fe 09 8f f4 d9 94 37 c4 0a 9a 9d dd 9b 13 3d 51 bd fa 0d 81 a9 65 1c 8f 29 b2 9f 8c a4 1f 4a b6 8b 5f 0a 24 af b6 88 9b 88 dc ec ec 34 34 10 60 4e c7 d2 11 aa 93 81 88 98 f5 ac 5c a9 a6 12 f4 8e 62 c9 f4 19 b7 d2 a5 fe 12 57 e9 a4 fd b3 63 3e 0d 07 dc 87 36 85 5a 44\n</code></pre> <p>\u518d\u901a\u8fc7OpenSSL\u6765\u67e5\u770b\u4e00\u4e0b\u5bc6\u94a5\u7684\u5404\u53c2\u6570\u60c5\u51b5</p> Bash<pre><code>openssl rsa -in \u6587\u4ef6\u540d -text -noout\n</code></pre> Bash<pre><code>Private-Key: (2048 bit, 2 primes)\nmodulus:\n    00:86:03:c1:d6:11:c8:af:b0:27:dc:70:c6:d5:da:\n    89:a3:c5:10:bb:ee:68:38:b3:80:d7:5f:73:d2:b6:\n    44:4a:8c:eb:af:5a:31:de:0d:0a:bb:ce:ad:d5:7d:\n    4e:a5:b6:b0:5a:bf:1c:17:35:e0:62:c0:ed:81:93:\n    d6:84:41:31:6e:c5:3f:a8:71:99:5d:ec:28:f2:87:\n    de:ff:84:9a:fe:cd:43:3a:95:26:64:81:6c:33:f6:\n    00:b5:61:1e:c7:e6:93:c0:0f:45:4f:ee:84:67:73:\n    98:25:ab:66:63:d8:aa:f5:ec:27:02:37:82:74:1c:\n    25:97:4e:02:f2:f4:fd:29:ee:f7:5e:77:67:07:cb:\n    53:b4:bd:92:e2:12:1c:bb:3e:ef:55:dd:47:4d:94:\n    9f:43:ea:2e:b0:b5:0c:e4:eb:93:7b:4d:fa:d4:d1:\n    6a:a7:84:45:86:11:e3:b4:cf:5c:ba:fc:9a:3d:a3:\n    05:bd:11:68:7a:65:f2:08:7f:29:7f:18:25:e2:59:\n    45:48:12:62:b4:f0:1e:2c:1c:47:a5:5f:4f:8e:52:\n    c1:a7:89:18:23:33:eb:60:33:29:d4:01:76:b1:e4:\n    32:bd:bf:16:36:e8:c5:72:ed:19:bc:e6:51:b8:7c:\n    54:2e:25:13:d9:12:36:b2:b6:7a:7b:20:28:ab:b4:\n    57:8b\npublicExponent: 65537 (0x10001)\nprivateExponent:\n    4f:f2:c3:db:6a:66:97:f0:f6:06:bb:3c:d3:6d:79:\n    39:3b:22:1d:8b:3f:9f:bb:ee:7c:0d:d4:b1:fa:cc:\n    48:d1:42:f5:2c:50:9d:90:98:3b:ac:33:e6:2d:c8:\n    12:72:27:49:2b:c3:9d:51:25:d8:a4:11:cc:80:9e:\n    b3:ed:94:88:e9:a1:6d:62:bf:c4:d9:53:20:44:d0:\n    53:0d:0f:ce:3c:34:04:29:e0:6a:8b:0f:3a:fc:62:\n    35:d2:87:a3:67:b9:f3:14:e9:1b:a3:46:57:d5:0d:\n    0a:43:f3:64:53:68:c2:27:2c:aa:54:e5:3d:51:61:\n    57:9f:51:81:11:88:4a:50:08:98:f3:0d:dd:9f:6f:\n    55:25:08:9c:7a:5d:98:2e:4d:74:ec:a8:29:a1:af:\n    b2:eb:eb:13:75:5a:f4:9d:4d:8d:9a:ed:c3:f1:9e:\n    eb:20:82:b0:9a:89:8c:68:0a:32:50:44:f9:7e:67:\n    83:b7:de:01:e4:5c:d6:d9:9d:c8:79:62:51:10:ba:\n    2d:7e:7d:a9:e8:7c:ab:a4:94:ad:e6:01:ba:81:c2:\n    8f:e5:7d:75:c0:bb:91:9b:84:c7:48:67:a2:30:eb:\n    cb:c0:88:52:50:b6:ec:2f:39:81:35:87:ab:0d:dc:\n    41:ec:8e:77:e4:6d:f8:02:fa:eb:b8:d5:04:1f:02:\n    f1\nprime1:\n    00:c8:11:62:77:3f:30:de:28:c7:5b:e5:c3:70:7d:\n    b4:26:11:f1:10:c0:26:15:35:1f:d1:f5:c8:d7:5c:\n    77:10:29:3e:e9:cd:b2:00:7d:6f:0c:73:38:ae:bd:\n    ca:1e:ca:55:84:42:73:c8:d5:6c:54:18:35:23:82:\n    45:e6:04:a4:3d:6b:32:82:37:68:c8:c3:ea:8d:0f:\n    4c:d1:83:f6:42:1a:3a:8a:28:b3:db:47:37:c3:e2:\n    bd:70:17:b3:4c:db:43:9f:e3:7f:82:a3:ab:24:b0:\n    46:3a:9a:ee:d7:3c:29:7e:ba:12:e2:27:bb:e9:03:\n    69:01:46:7c:dc:e4:14:56:b9\nprime2:\n    00:ab:7b:06:07:4a:d9:be:7d:fe:2d:b4:37:4b:f0:\n    25:c9:da:67:65:87:fa:7b:ce:45:52:dd:df:42:e9:\n    11:04:8e:2f:2e:5e:92:a4:e3:09:49:97:d0:41:49:\n    cc:f8:fd:3d:b7:6c:fb:ac:7d:f0:e1:02:ce:61:b7:\n    c4:9d:db:75:23:f3:0c:85:f5:9b:ed:af:7a:23:f0:\n    9f:c3:d9:96:e3:c4:48:52:b9:38:31:4b:55:fc:fa:\n    bb:6c:ac:f4:bf:3a:bf:0c:19:c0:e3:89:c0:b1:ae:\n    3a:6d:bf:72:b2:32:7a:f9:f7:27:2d:63:4b:5b:3e:\n    0e:f7:eb:c1:78:56:86:3e:63\nexponent1:\n    7e:be:74:b0:b2:b9:94:a4:24:d7:d5:11:21:3c:a1:\n    59:d4:d7:f1:12:a9:8d:99:e0:14:b5:2e:8d:30:a8:\n    c4:f6:3c:43:05:ea:94:60:e2:6e:f2:b7:a0:0b:df:\n    f5:ed:9c:8b:73:45:c2:9f:62:47:4c:26:ad:de:23:\n    c5:fa:7e:c9:e2:15:57:65:1e:de:c1:2e:e0:3a:27:\n    22:3c:05:50:0f:29:b2:c8:e2:58:32:1f:e3:da:ca:\n    c4:2e:5f:8a:7b:05:b6:4e:fb:42:99:c9:1c:2f:07:\n    ee:ac:a4:4e:7a:70:97:35:ee:2c:93:9b:79:9c:8d:\n    73:1f:62:8e:d5:77:05:11\nexponent2:\n    7f:43:78:3f:e5:3f:20:6e:e5:3b:0a:2a:97:c3:0c:\n    68:78:1c:90:6f:90:68:5d:b7:79:3e:8c:b9:5d:bb:\n    71:84:0c:63:ff:70:19:cb:1d:53:6e:c5:f2:0e:51:\n    7e:e0:82:f3:24:80:cb:8d:54:3d:ca:15:5c:d4:43:\n    a9:5b:fb:dd:c8:3d:9d:15:a0:b9:8f:a7:b8:10:96:\n    a1:85:54:c4:89:21:9b:b3:36:8e:ee:f8:4c:1d:d1:\n    07:60:7c:eb:87:2f:ce:4d:36:a8:27:cd:c8:90:23:\n    70:db:ca:c5:91:4d:4f:42:2b:e3:35:73:f1:ad:66:\n    f2:7c:17:43:b6:03:3f:3d\ncoefficient:\n    20:ba:41:01:b4:c7:61:a0:69:75:7a:cd:e1:ac:42:\n    9b:dc:1b:27:31:09:96:4d:0f:bf:d0:6f:35:79:72:\n    e4:b8:94:ff:12:6c:82:9a:4f:fe:09:8f:f4:d9:94:\n    37:c4:0a:9a:9d:dd:9b:13:3d:51:bd:fa:0d:81:a9:\n    65:1c:8f:29:b2:9f:8c:a4:1f:4a:b6:8b:5f:0a:24:\n    af:b6:88:9b:88:dc:ec:ec:34:34:10:60:4e:c7:d2:\n    11:aa:93:81:88:98:f5:ac:5c:a9:a6:12:f4:8e:62:\n    c9:f4:19:b7:d2:a5:fe:12:57:e9:a4:fd:b3:63:3e:\n    0d:07:dc:87:36:85:5a:44\n</code></pre> <p>\u7ecf\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u77e5\u9053\uff0c\u7ed3\u6784\u4e3a</p> Text Only<pre><code>RSAPrivateKey ::= SEQUENCE {\n version Version,\n modulus INTEGER, -- n\n publicExponent INTEGER, -- e\n privateExponent INTEGER, -- d\n prime1 INTEGER, -- p\n prime2 INTEGER, -- q\n exponent1 INTEGER, -- d mod (p-1)\n exponent2 INTEGER, -- d mod (q-1)\n coefficient INTEGER -- (inverse of q) mod p \n}\n</code></pre> <p>2048bit\u7684\u79c1\u94a5\u6587\u4ef6\u548c1024bit\u7684\u79c1\u94a5\u6587\u4ef6\u5bf9\u6bd4</p> 2048 02820101(n) 0203(e) 028201(d) 028181(p) 028181(q) 028180(d % (p-1)) 028180(d % (q-1)) 028180(invert(q,p)) 1024 028181(n) 0203(e) 028180(d) 024100(p) 024100(q) 0240 0240 0240 <p>\u8fd9\u4e2a\u8868\u4e5f\u6ca1\u6743\u5a01\u6027\uff0c\u627e\u53c2\u6570\u5c31\u627e02\u8fd9\u6837\u7684\u5206\u9694\u7b26\u5c31\u597d\u4e86\u3002</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#nssctfround16break","title":"NSSCTFRound16\u2014\u2014break","text":"<p>\u9898\u76ee\u7ed9\u51fa\u5982\u4e0b\u6587\u4ef6:</p> <p>pri-break.pem</p> Python<pre><code>Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDd\nZ23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6n\nubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfA\nXXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5\nmiGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9r\ns2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC7\n1KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1\nQVLVHl0Yu0I/1/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7Ds\ntouA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS\n27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H\n2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+697\nxM+dMUW0LML6oUE9ZjEiAY/5\n-----END PRIVATE KEY-----\n</code></pre> <p>cipher.txt</p> Text Only<pre><code>6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655\n</code></pre> <p>cipher\u4e2d\u8fd9\u4e2a\u503c\u662f2046bit\uff0c\u53ef\u4ee5\u63a8\u51fan\u662f2048bit\u7684</p> <p>\u8fd9\u4e2a\u79c1\u94a5\u6587\u4ef6\u7684\u5185\u5bb9\u8f6c\u621016\u8fdb\u5236\u5f97\u5230</p> Text Only<pre><code>        05 cf 2d 49 3a ef 18 99 b6 a1 8b 82 cc 8c fe 62 0e 27 c3 \n\n    02 81 81 00 \n        e2 61 46 b0 7b 96 3e ac f6 c5 85 53 8c 54 1f 19 07 27 cc 6b 82 e3 79 20 dd 67 6d e3 10 6b f2 94 11 d2 7b 2b c5 09 0a b7 21 25 04 e3 49 35 0f 65 e6 99 e6 99 30 bd da d6 75 27 e8 e4 48 58 66 86 da 98 5c c2 b5 8b 91 1e a7 b9 b5 66 6f 54 09 4b 38 33 98 51 c6 9c be 7a 28 70 72 67 10 fd ab a0 cf 07 ea 3a 80 65 ad f3 fe 9d 74 19 76 34 86 54 ff 56 ed 74 f4 20 a2 37 c0 5d 72 45 cd 1f 76 45 \n\n    02 81 81 00 \n        bb aa 50 74 53 b9 b6 53 81 5d 1b d7 9e 95 27 7e 59 22 8d 51 59 65 64 0b 87 8e 2e e3 82 1e ce c7 a2 da f7 13 79 9a 21 99 d7 2b cf e3 8c 97 db 5f 0e 27 d6 62 d3 ca 3a bc 8a cc e8 48 a5 e3 92 b3 4e d1 a6 e2 2b 88 9f c0 8c a6 8c 7e e5 e5 2d a3 1c af c5 af 6b b3 65 ae f8 84 59 37 dc c2 30 4f a9 fa a2 3c fd 31 b6 ed d2 32 0f 3b 1d 80 da 9c 52 8f 04 4a 5b 3b b9 6e 7f 14 40 3b 6d 84 c2 89 \n\n    02 81 81 00 \n        bb d4 ac 9b 78 1f a4 67 4c e5 7c 87 62 f2 d5 4e a5 e2 3e b9 a1 c3 6d d8 77 fb fe 70 1d 4b 03 de 19 9f 83 b5 40 6a 0d 2a ff 64 40 d6 f9 01 fe 81 b5 41 52 d5 1e 5d 18 bb 42 3f d7 fb b9 8f 27 9a 92 bb 42 94 07 a0 02 cb e5 ac af b7 8b 7d b5 ac 64 b8 62 94 cf 6f 74 97 d4 ff df dc 66 7b a3 b0 ec b6 8b 80 f8 d1 e4 f0 82 fd 4f bc 64 98 96 30 e6 1f d1 2c 6d f6 b9 c1 fa 69 4e 8c 5d f2 d1 e5 \n\n    02 81 80 \n        3f ec 91 f7 45 c4 65 b1 84 79 3a 53 59 92 db b2 0c f6 32 4d 83 dc 4b cf 99 f1 ce 4a 8f 3e 12 e7 fa b7 60 20 8b 93 b9 0b 6f fb e7 84 8c 43 fe fb b6 55 d7 4a e0 e7 22 95 25 df db c7 2f 07 d8 83 7b 69 0a 3b 91 95 ae 94 74 d0 0d 93 05 c2 03 a1 9f 4b ba 82 52 62 fa a0 bc 6d 6c d8 0c 53 90 48 5a d8 f5 74 37 bf 02 8c b2 9a a6 fb af 7b c4 cf 9d 31 45 b4 2c c2 fa a1 41 3d 66 31 22 01 8f f9\n</code></pre> <p>\u6211\u4eec\u5df2\u77e5\\(q,d_p,d_q,q^{-1}\\)</p> <p>\u76f4\u63a5\u7528\\(m = c^{d_p} \\mod p\\)\u89e3\u5373\u53ef</p> <p>exp</p> Python<pre><code>from Crypto.Util.number import *\n\nq = 0xe26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645\ndp = 0xbbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289\ndq = 0xbbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5\ninv = 0x3fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9\nc = 6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655\n\nm = pow(c,dq,q)\nprint(long_to_bytes(m))\n## flag{oi!_you_find___what_i_Wa1t_talK_y0n!!!}\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2022corrupted_key","title":"2022\u84dd\u5e3d\u676f\u2014\u2014corrupted_key","text":"<p>task.py</p> Python<pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom secret import flag\n\nkey = RSA.generate(1024)\nopen(\"flag.enc\",'wb').write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))\nopen('priv.pem','wb').write(key.exportKey('PEM'))\n</code></pre> <p>priv.pem</p> Text Only<pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\n\n\n\n\n\n\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>\u628a\u5df2\u6709\u7684\u5185\u5bb9\u8fdb\u884c\u89e3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230\\(n,e\\)\uff0cinverse(q,p)\uff0c\u4ee5\u53ca\\(d_q\\)\u7684\u4f4e120\u4f4d</p> Text Only<pre><code>30 82 02 5e \n    02 01 \n        00 \n\n    02 81 81 00 \n        d7 15 25 06 aa 9c ec 05 e5 33 5d 6b 46 f5 49 14 07 c3 19 9f d5 10 91 f1 f6 03 0d 37 62 b9 e0 3f 49 c9 dc dc 07 50 54 e0 cc 14 8b 97 4b 41 85 4b d9 3b 4e e1 6a 2a 87 6e e6 20 05 e8 0e f8 06 b7 aa 3b 64 b1 bf 9b 1f a7 73 e3 53 d0 cd b9 ff 97 83 dd d5 f5 e6 74 99 ad 10 f3 61 e9 38 d0 0b 82 a6 a4 c4 2a 05 35 c5 e7 67 21 79 8e 86 b4 5c d4 b8 d0 3b 0d 7e 75 c2 be 87 66 a1 e8 43 bd c6 41 \n\n    02 03 \n        01 00 01\n</code></pre> Text Only<pre><code>c9 0b ce cf 1c ba b3 35 85 85 e8 a0 41 d1 b1 \n\n    02 41 00 \n        e3 01 6c b3 60 9c 1d 64 3c 16 74 39 c3 b9 38 b8 81 f4 23 7f 24 86 0d 3b 1c b8 5a 62 6d 5c cd 47 26 96 4e 0f 82 70 d6 c4 df 9e bf eb cc 53 8e 4e e5 e1 a7 b7 36 8e de 51 ec 6a e9 17 f7 8e b5 98\n</code></pre> \\[ \\because d_q \\equiv d \\mod q-1 \\] \\[ \\therefore d_q = d + k(q-1) \\] <p>\u4e24\u8fb9\u540c\u4e58e</p> \\[ ed_q = ed + ke(q-1) \\] \\[ \\because ed = k_1(p-1)(q-1) + 1 \\] \\[ \\therefore ed_q = k_2(q-1) + 1 \\] <p>\u5373</p> \\[ ed_q + k_2 - 1 = k_2q \\] \\[ \\therefore ed_q + k_2 -1 \\equiv k_2q \\mod 2^{120} \\] \\[ \\because dq &lt; q-1  \\] \\[ \\therefore e &gt; k \\] <p>\u679a\u4e3ek\uff0c\u89e3\u65b9\u7a0b\u5373\u6c42\u51fa\u6240\u6709\\(q\\)\u7684\u4f4e120\u4f4d\u7684\u53ef\u80fd\u53d6\u503c</p> \\[ \\because inv \u00d7q \\equiv 1 \\mod p  \\] \\[ inv\\times q -1 = kp \\] <p>\u4e24\u8fb9\u540c\u4e58q\u5f97\u5230</p> \\[ inv \\times q\\times q -q = kn \\] <p>\u5373</p> \\[ inv \\times q^2 - q \\equiv 0 \\mod n \\] <p>\u7136\u540e\u7528coper\u6c42\u89e3</p> <p>exp.sage</p> Python<pre><code>#sage\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom gmpy2 import *\nfrom tqdm import *\n\nn = 0xd7152506aa9cec05e5335d6b46f5491407c3199fd51091f1f6030d3762b9e03f49c9dcdc075054e0cc148b974b41854bd93b4ee16a2a876ee62005e80ef806b7aa3b64b1bf9b1fa773e353d0cdb9ff9783ddd5f5e67499ad10f361e938d00b82a6a4c42a0535c5e76721798e86b45cd4b8d03b0d7e75c2be8766a1e843bdc641\ne = 0x10001\ninv = 0xe3016cb3609c1d643c167439c3b938b881f4237f24860d3b1cb85a626d5ccd4726964e0f8270d6c4df9ebfebcc538e4ee5e1a7b7368ede51ec6ae917f78eb598\nd_low = 0xc90bcecf1cbab3358585e8a041d1b1\nq_low = []\nc = open(\"flag.enc\",'rb').read()\n\nfor i in trange(1,e):\n    try:\n        q0 = invert(i, 2 ** 120) * (e * d_low + i - 1) % 2 ^ 120\n        q_low.append(q0)\n    except:\n        continue\n\nPR.&lt;x&gt; = PolynomialRing(Zmod(n))\n\nfor i in trange(len(q_low)-1,-1,-1):\n    f = inv * (2^120*x + int(q_low[i]))^2 - (2^120*x + int(q_low[i]))\n    f = f.monic()\n    root = f.small_roots(X = 2^(512-120))\n    if root:\n        q = 2^120 * int(root[0]) + int(q_low[i])\n        p = n // q\n        if p * q == n:\n            d = gmpy2.invert(e, (p - 1) * (q - 1))\n            print(\"p = \",p)\n            print(\"q = \",q)\n            print(\"d = \",d)\n            key = RSA.construct((int(n),int(e),int(d),int(p),int(q)))\n            newkey = PKCS1_OAEP.new(key)\n            flag = newkey.decrypt(c)\n            print(flag)\n            break\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/RSA%E5%85%A5%E9%97%A8.html#2024ciscnezrsa","title":"2024CISCN\u2014\u2014ezrsa","text":"<p>task.py</p> Python<pre><code>from Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\nimport random\nfrom secret import flag\n\nm = bytes_to_long(flag)\nkey = RSA.generate(1024)\npassphrase = str(random.randint(0,999999)).zfill(6).encode()\noutput = key.export_key(passphrase=passphrase).split(b'\\n')\nfor i in range(7, 15):\n    output[i] = b'*' * 64\nwith open(\"priv.pem\", 'wb') as f:\n    for line in output:\n        f.write(line + b'\\n')\nwith open(\"enc.txt\", 'w') as f:\n    f.write(str(key._encrypt(m)))\n</code></pre> <p>priv.pem</p> Text Only<pre><code>-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,435BF84C562FE793\n\n9phAgeyjnJYZ6lgLYflgduBQjdX+V/Ph/fO8QB2ZubhBVOFJMHbwHbtgBaN3eGlh\nWiEFEdQWoOFvpip0whr4r7aGOhavWhIfRjiqfQVcKZx4/f02W4pcWVYo9/p3otdD\nig+kofIR9Ky8o9vQk7H1eESNMdq3PPmvd7KTE98ZPqtIIrjbSsJ9XRL+gr5a91gH\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\nhQds7ZdA9yv+yKUYv2e4de8RxX356wYq7r8paBHPXisOkGIVEBYNviMSIbgelkSI\njLQka+ZmC2YOgY/DgGJ82JmFG8mmYCcSooGL4ytVUY9dZa1khfhceg==\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>\u7c7b\u4f3c\u84dd\u5e3d\u676f2022\u7684corrupted_key</p> <p>\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u8fd9\u9898\u5f97\u5230\u7684pem\u6587\u4ef6\u5185\u5bb9\u662f\u52a0\u5bc6\u7684</p> <p>\u6839\u636e\u4ee3\u7801</p> Python<pre><code>key.export_key(passphrase=passphrase).split(b'\\n')\n</code></pre> <p>\u627e\u5230Crypto\u4e0b\u7684\u6e90\u4ee3\u7801</p> <p>RSA.py</p> <p></p> <p>\u53d1\u73b0\u5173\u952e\u4ee3\u7801</p> <p></p> <p>\u5982\u679cpassphrase\u5b58\u5728\uff0c\u5219\u968f\u673a\u751f\u6210\u4e00\u4e2asalt\uff0c\u7136\u540e\u4f7f\u7528PKBDF1\u65b9\u6cd5\u52a0\u5bc6\u4e24\u6b21\u62fc\u63a5\u5f97\u5230key\u3002</p> <p>\u6b64\u65f6\u4f7f\u7528\u7684\u52a0\u5bc6\u65b9\u5f0f\u4e3a3des,\u6a21\u5f0f\u4e3acbc,iv\u4e3asalt</p> <p>\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636epassphrase\u7684\u751f\u6210\u65b9\u5f0f\u6765\u7206\u7834\u51fa\u552f\u4e00\u7684passphrase</p> <p>\u6839\u636e\u79c1\u94a5\u7684\u683c\u5f0f\uff0c\u5f00\u5934\u4e00\u5b9a\u662f3082\uff0c\u518d\u6839\u636en\u4e3a1024bit\uff0c\u90a3\u4e48\u5728\u79c1\u94a5\u4e2dn\u7684\u683c\u5f0f\u4e3a028181,\u52a0\u5bc6\u53c2\u6570e\u5927\u6982\u7387\u4e3a65537\uff0c\u53730x10001</p> <p>\u90a3\u4e48\u5176\u5728\u79c1\u94a5\u4e2d\u5219\u4e3a 0203010001\u3002</p> <p>\u89e3\u5bc6\u540e\u5b58\u5728\u5982\u4e0b\u7279\u5f81\u7684\u660e\u6587\uff0c\u90a3\u4e48\u5f53\u524d\u7684passphrase\u4e3a\u6240\u6c42</p> Python<pre><code>from Crypto.Cipher import DES3\nfrom Crypto.Protocol.KDF import PBKDF1\nfrom Crypto.Hash import MD5\nimport base64\n\n\nenc1 = \"9phAgeyjnJYZ6lgLYflgduBQjdX+V/Ph/fO8QB2ZubhBVOFJMHbwHbtgBaN3eGlhWiEFEdQWoOFvpip0whr4r7aGOhavWhIfRjiqfQVcKZx4/f02W4pcWVYo9/p3otdDig+kofIR9Ky8o9vQk7H1eESNMdq3PPmvd7KTE98ZPqtIIrjbSsJ9XRL+gr5a91gH\"\nenc2 = \"hQds7ZdA9yv+yKUYv2e4de8RxX356wYq7r8paBHPXisOkGIVEBYNviMSIbgelkSIjLQka+ZmC2YOgY/DgGJ82JmFG8mmYCcSooGL4ytVUY9dZa1khfhceg==\"\n\nsalt = bytes.fromhex(\"435bf84c562fe793\")\ndict = [str(i).zfill(6).encode() for i in range(0,1000000)]\nfor passphrase in dict:\n    key = PBKDF1(passphrase, salt, 16, 1, MD5)\n    key += PBKDF1(key + passphrase, salt, 8, 1, MD5)\n    cipher = DES3.new(key, DES3.MODE_CBC, salt)\n    data = cipher.decrypt(base64.b64decode(enc1)).hex()\n    if data.startswith(\"3082\") and \"028181\" in data and \"0203010001\" in data:\n        print(data)\n        print(passphrase)\n        data2 = cipher.decrypt(base64.b64decode(enc2)).hex()\n        print(data2)\n        break\n</code></pre> <p>\u5f97\u5230</p> Text Only<pre><code>30 82 02 5c\n    02 01\n        00       \n\n    02 81 81 00\na1 8f 01 1b eb ac ce da 1c 68 12 73 0b 9e 62 72 0d 3c bd 68 57 af 2c f8 43 18 60 f5 dc 83 c5 52 0f 24 2f 3b e7 c9 e9 6d 7f 96 b4 18 98 ff 00 0f db 7e 43 ef 6f 1e 71 7b 2b 79 00 f3 56 60 a2 1d 1b 16 b5 18 49 be 97 a0 b0 f7 cb cf 5c fe 0f 00 37 0c ce 61 93 fe fa 1f ed 97 b3 7b d3 67 a6 73 56 51 62 ce 17 b0 22 57 08 c0 32 96 1d 17 5b bc 2c 82 9b f2 e1 6e ab c7 e0 88 1f ec a0 97 5c 81\n\n    02 03 \n        01 00 01\n\n6a 03 30 64 c5 a0 dff c8 f2 36 3b 34 0e 50 24 05 f1 52 c4 29 87 1a 7a cd d2 8b e1 b6 43 b4 65 28 00 b8 8a 3d 23 cc 57 47 7d 75 dd 55 55 b6 35 16 76 16 ef 5c 60 9d 69 ce 3c 2a ed cb 03 b6 2f 92 9b bc d8 91 ca dc 0b a0 31 ae 6f ec 8a 21 16 d0 80 80 80 80 80 80 80 8\n</code></pre> <p>\u518d\u6839\u636e\u79c1\u94a5\u683c\u5f0f\u63d0\u53d6<code>n,e,dq,inv</code></p> <p>\u56e0\u4e3a\u672c\u9898\u4e2d\u4e2d\u95f4\u90e8\u5206\u7684\u79c1\u94a5\u6587\u4ef6\u7f3a\u5931\uff0c\u800c\u4e14\u52a0\u5bc6\u662fcbc\u7684\uff0c\u5bfc\u81f4enc2\u7b2c\u4e00\u5757\u89e3\u5bc6\u7684\u7ed3\u679c\u9519\u8bef\uff0c\u9700\u8981\u53bb\u6389\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b63\u786e\u7684dq\u53ea\u670948bit</p> <p>\u56e0\u6b64\u5f97\u5230</p> Python<pre><code>n = 0xa18f011bebacceda1c6812730b9e62720d3cbd6857af2cf8431860f5dc83c5520f242f3be7c9e96d7f96b41898ff000fdb7e43ef6f1e717b2b7900f35660a21d1b16b51849be97a0b0f7cbcf5cfe0f00370cce6193fefa1fed97b37bd367a673565162ce17b0225708c032961d175bbc2c829bf2e16eabc7e0881feca0975c81\ne = 65537\ndq_leak= 0x8f2363b340e5\ninv = 0x5f152c429871a7acdd28be1b643b4652800b88a3d23cc57477d75dd5555b635167616ef5c609d69ce3c2aedcb03b62f929bbcd891cadc0ba031ae6fec8a2116d\n</code></pre> \\[ \\because ed_q = 1 + k(q-1) \\] \\[ \\therefore kq = ed_q +k-1 \\] <p>k\u53ef\u4ee5\u7206\u7834\uff0c\u4f46\u4e0d\u77e5\u9053q\uff0c\u6240\u4ee5\u6ca1\u529e\u6cd5\u6784\u90201\u5143coppersmith</p> \\[ \\because inv \\times q \\equiv 1 \\mod p \\] \\[ \\therefore inv \\times q - 1 \\equiv 0 \\mod p \\] <p>\u540c\u4e58kq</p> \\[ inv \\times q \\times kq - kq \\equiv 0 \\mod n \\] <p>\u6b64\u65f6\u4f1a\u6709\u4e2a\u7a81\u5140\u7684q\uff0c\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u518d\u540c\u4e58k\uff0c\u5f97\u5230</p> \\[ inv \\times (kq)^2 - k\\times kq \\equiv 0 \\mod n \\] <p>\u5f97\u5230\u4e24\u4e2a\u5f0f\u5b50\uff1a</p> \\[ tmp = e(x + dq_{low})+k-1 \\] \\[ inv\\times tmp^2 - k\\times tmp \\equiv 0 \\mod n \\] <p>\u6062\u590d\u51fadq\u4e4b\u540e\uff0c\\(q = (ed_q + k - 1) // k\\)</p> Python<pre><code>from tqdm import *\nfrom Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\n\nn = 0xa18f011bebacceda1c6812730b9e62720d3cbd6857af2cf8431860f5dc83c5520f242f3be7c9e96d7f96b41898ff000fdb7e43ef6f1e717b2b7900f35660a21d1b16b51849be97a0b0f7cbcf5cfe0f00370cce6193fefa1fed97b37bd367a673565162ce17b0225708c032961d175bbc2c829bf2e16eabc7e0881feca0975c81\ne = 65537\ndq_leak= 0x8f2363b340e5\ninv = 0x5f152c429871a7acdd28be1b643b4652800b88a3d23cc57477d75dd5555b635167616ef5c609d69ce3c2aedcb03b62f929bbcd891cadc0ba031ae6fec8a2116d\nc = 55149764057291700808946379593274733093556529902852874590948688362865310469901900909075397929997623185589518643636792828743516623112272635512151466304164301360740002369759704802706396320622342771513106879732891498365431042081036698760861996177532930798842690295051476263556258192509634233232717503575429327989\n\ndef coppersmith(k):\n    R.&lt;x&gt; = PolynomialRing(Zmod(n))\n    tmp = e * (x * 2^48 + dq_leak) + k - 1          ## kq\n    f = inv * tmp^2 - k*tmp\n    f = f.monic()\n    x0 = f.small_roots(X=2^464,beta=1,epsilon=0.09)\n    return x0\n\nfor k in trange(1\uff0ce):\n    x0 = coppersmith(k)\n    if x0 != []:\n        dq = int(x0[0]) * 2^48 + dq_leak\n        q = (e*dq + k - 1) // k\n        ## print(f\"k = {k}\")\n        ## k = 47794\n        p = n // q\n        d = inverse(e,(p-1)*(q-1))\n        m = pow(c,d,n)\n        print(long_to_bytes(int(m)))\n        ## b'flag{df4a4054-23eb-4ba4-be5e-15b247d7b819}'\n        break\n</code></pre> <p>\u53c2\u8003\uff1a20220709-\u84dd\u5e3d\u676f-CryptoSecWriteUp | 4XWi11's Blog</p> <p>\u5728\u6c42\u51faq\u540e\uff0c\u5176\u5b9e<code>pow(c,dq,q)</code>\u4e5f\u80fd\u51faflag\uff0c\u4e0d\u7528\u6c42p</p>"},{"location":"05-RE/index.html","title":"REVERSE-\u9006\u5411","text":"Text Only<pre><code>\u5efa\u8bbe\u4e2d\n</code></pre>"},{"location":"06-PWN/index.html","title":"PWN","text":""},{"location":"06-PWN/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>Pwn\uff08\u53d1\u97f3\u540c\u201c\u7830\u201d\uff09\u662f\u9ed1\u5ba2\u672f\u8bed\uff0c\u6307\u901a\u8fc7\u6f0f\u6d1e\u653b\u7834\u7cfb\u7edf\u6216\u7a0b\u5e8f\uff0c\u83b7\u5f97\u63a7\u5236\u6743\u3002 CTF\u7ade\u8d5b\u4e2d\uff0c\u4e00\u822c\u662f\u7834\u89e3\u4f4d\u4e8eLinux\u7cfb\u7edf\u4e2d\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff08ELF\u6587\u4ef6\uff09\u3002</p>"},{"location":"06-PWN/index.html#_2","title":"\u5b66\u4e60\u8def\u7ebf","text":"<p>\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u8def\u7ebf\u8fdb\u884c\u5b66\u4e60\uff1a 1. \u638c\u63e1C\u8bed\u8a00 2. \u7b80\u5355\u5b66\u4e60ELF\u7684\u5404\u4e2a\u6bb5\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u7684\u5806\u6808\u5e73\u8861\u8fc7\u7a0b\u548c\u5404\u79cd\u8c03\u7528\u7ea6\u5b9a\uff0cgot\u8868plt\u8868\uff0c\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236 3. \u8c03\u8bd5\u5de5\u5177pwndbg\u3001IDA 4. \u6808\u6f0f\u6d1e 5. \u5806\u6f0f\u6d1e</p>"},{"location":"07-%E6%B8%97%E9%80%8F/index.html","title":"PENETRATION-\u6e17\u900f","text":"<p>\u6e17\u900f\u6d4b\u8bd5\uff08Penetration Testing\uff09\uff0c\u7b80\u79f0\u201c\u6e17\u900f\u201d\uff0c\u662f\u4e00\u79cd\u6a21\u62df\u9ed1\u5ba2\u653b\u51fb\u7684\u7f51\u7edc\u5b89\u5168\u6280\u672f\uff0c\u76ee\u7684\u662f\u5728\u4e0d\u9020\u6210\u5b9e\u9645\u7834\u574f\u7684\u524d\u63d0\u4e0b\uff0c\u6d4b\u8bd5\u7cfb\u7edf\u3001\u7f51\u7edc\u6216\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u3002\u901a\u8fc7\u53d1\u73b0\u548c\u5229\u7528\u7cfb\u7edf\u4e2d\u7684\u6f0f\u6d1e\uff0c\u6e17\u900f\u6d4b\u8bd5\u5e2e\u52a9\u4f01\u4e1a\u6216\u7ec4\u7ec7\u8bc6\u522b\u6f5c\u5728\u98ce\u9669\uff0c\u4ece\u800c\u63d0\u524d\u4fee\u8865\u6f0f\u6d1e\uff0c\u63d0\u5347\u6574\u4f53\u9632\u62a4\u80fd\u529b\u3002\u6e17\u900f\u6d4b\u8bd5\u5e38\u6d89\u53ca\u4fe1\u606f\u6536\u96c6\u3001\u6f0f\u6d1e\u5206\u6790\u3001\u5229\u7528\u3001\u6743\u9650\u63d0\u5347\u4e0e\u6a2a\u5411\u79fb\u52a8\u7b49\u591a\u4e2a\u9636\u6bb5\u3002</p> <p>\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u8bf7\u5148\u9605\u8bfb <code>\u9776\u573a-tryhackme</code> \u76ee\u5f55\u4e0b\u7684 <code>\u8def\u5f84\u9009\u62e9</code> \u90e8\u5206\uff0c\u7a0d\u4f5c\u5b66\u4e60\u540e\u518d\u8fdb\u884c\u5176\u4ed6\u76ee\u5f55\u4e0b\u7684\u5b66\u4e60</p>"},{"location":"07-%E6%B8%97%E9%80%8F/C2%E5%B7%A5%E5%85%B7/index.html","title":"C2\u5de5\u5177","text":""},{"location":"07-%E6%B8%97%E9%80%8F/C2%E5%B7%A5%E5%85%B7/index.html#_1","title":"\u63a8\u8350\u6559\u7a0b","text":"<p>https://wbglil.gitbook.io/cobalt-strike</p> <p>https://raven-medicine.com/books/ec8ce/chapter/2c2</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E6%9C%A8%E9%A9%AC%E5%85%8D%E6%9D%80/index.html","title":"\u6728\u9a6c\u514d\u6740","text":"<p>\u6728\u9a6c\u514d\u6740\u662f C2 \u4e0a\u7ebf\u7684\u5173\u952e</p> <p>\u6307\u901a\u8fc7\u6280\u672f\u624b\u6bb5\u7ed5\u8fc7\u6740\u6bd2\u8f6f\u4ef6\u3001EDR\uff08\u7ec8\u7aef\u68c0\u6d4b\u4e0e\u54cd\u5e94\uff09\u7b49\u5b89\u5168\u9632\u62a4\u673a\u5236\uff0c\u4f7f\u6076\u610f\u7a0b\u5e8f\uff08\u901a\u5e38\u662f\u6728\u9a6c\u3001\u53cd\u5f39Shell\u6216C2\u8f7d\u8377\uff09\u5728\u76ee\u6807\u7cfb\u7edf\u4e2d\u80fd\u591f\u6084\u65e0\u58f0\u606f\u5730\u6267\u884c\u3002</p> <p>\u5e38\u89c1\u65b9\u6cd5\u5305\u62ec\u6df7\u6dc6\u4ee3\u7801\u3001\u52a0\u58f3\u3001\u52a0\u5bc6\u8f7d\u8377\u3001\u5229\u7528\u767d\u540d\u5355\u7a0b\u5e8f\u8fdb\u884c\u8fdb\u7a0b\u6ce8\u5165\u7b49\u3002\u514d\u6740\u5e76\u4e0d\u4ee3\u8868\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u6076\u610f\u884c\u4e3a\uff0c\u800c\u662f\u5b83\u80fd\u591f\u907f\u5f00\u4f20\u7edf\u7279\u5f81\u5e93\u6216\u884c\u4e3a\u76d1\u6d4b\u7684\u68c0\u6d4b\u673a\u5236\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E7%A4%BE%E5%B7%A5%E9%92%93%E9%B1%BC/index.html","title":"\u793e\u5de5\u9493\u9c7c","text":"<p>\u793e\u5de5\u9493\u9c7c\uff08Social Engineering Phishing\uff09\u662f\u4e00\u79cd\u901a\u8fc7\u4f2a\u88c5\u6210\u53ef\u4fe1\u5bf9\u8c61\u8bf1\u4f7f\u76ee\u6807\u6cc4\u9732\u654f\u611f\u4fe1\u606f\u6216\u6267\u884c\u6076\u610f\u64cd\u4f5c\u7684\u653b\u51fb\u624b\u6bb5\u3002</p> <p>\u5e38\u89c1\u5f62\u5f0f\u5305\u62ec\u4f2a\u9020\u7684\u767b\u5f55\u9875\u9762\u3001\u9493\u9c7c\u90ae\u4ef6\u3001\u5047\u5192\u7684\u5373\u65f6\u6d88\u606f\u3001\u6076\u610f\u6587\u6863\u7b49\u3002</p> <p>\u5728\u6e17\u900f\u6d4b\u8bd5\u4e2d\uff0c\u9493\u9c7c\u653b\u51fb\u53ef\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u7ec4\u7ec7\u5185\u90e8\u5458\u5de5\u7684\u5b89\u5168\u610f\u8bc6\u53ca\u90ae\u4ef6\u7f51\u5173\u7684\u8fc7\u6ee4\u80fd\u529b\u3002\u867d\u7136\u6280\u672f\u95e8\u69db\u8f83\u4f4e\uff0c\u4f46\u4f9d\u8d56\u5bf9\u4eba\u6027\u7684\u7406\u89e3\u4e0e\u60c5\u5883\u8bbe\u8ba1\uff0c\u662f\u793e\u4f1a\u5de5\u7a0b\u4e2d\u7684\u6838\u5fc3\u6280\u5de7\u4e4b\u4e00\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E7%A4%BE%E5%B7%A5%E9%92%93%E9%B1%BC/%E9%92%93%E9%B1%BCwifi/index.html","title":"\u9493\u9c7cwifi","text":"<p>\u9493\u9c7c WiFi \u662f\u4e00\u79cd\u901a\u8fc7\u4f2a\u9020\u65e0\u7ebf\u63a5\u5165\u70b9\uff08\u70ed\u70b9\uff09\u6765\u8bf1\u5bfc\u53d7\u5bb3\u8005\u8fde\u63a5\u7684\u793e\u5de5\u653b\u51fb\u624b\u6bb5\u3002</p> <p>\u653b\u51fb\u8005\u901a\u5e38\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u4e0e\u771f\u5b9e\u7f51\u7edc\u540d\u79f0\u76f8\u540c\u6216\u76f8\u4f3c\u7684WiFi\u70ed\u70b9\uff08\u5982\u201c\u6821\u56edWIFI-Free\u201d\uff09\uff0c\u4e00\u65e6\u76ee\u6807\u7528\u6237\u8fde\u63a5\uff0c\u5c31\u53ef\u80fd\u88ab\u5f15\u5bfc\u5230\u9493\u9c7c\u767b\u5f55\u9875\u7a83\u53d6\u8d26\u6237\u5bc6\u7801\uff0c\u6216\u76f4\u63a5\u52ab\u6301\u6d41\u91cf\u8fdb\u884c\u4e2d\u95f4\u4eba\u653b\u51fb\uff08MitM\uff09\u3002</p> <p>\u8fd9\u79cd\u653b\u51fb\u65e0\u9700\u9ad8\u590d\u6742\u5ea6\u6280\u672f\uff0c\u4f46\u4f9d\u8d56\u4f4d\u7f6e\u63a5\u8fd1\u548c\u7528\u6237\u5bf9\u7f51\u7edc\u7684\u4fe1\u4efb\u3002\u5e38\u7528\u4e8e\u6d4b\u8bd5\u516c\u5171\u73af\u5883\u4e0b\u7684\u5b89\u5168\u9632\u8303\u610f\u8bc6\u548c\u7ec8\u7aef\u8bbe\u5907\u7684\u6570\u636e\u4f20\u8f93\u5b89\u5168\u6027\u3002</p> <p>\u5177\u4f53\u5185\u5bb9\u89c1\u4ee5\u4e0b\u6587\u7ae0\uff1a</p> <p>noone\u7684\u8fd1\u6e90\u6e17\u900f\u7b14\u8bb0-\u9493\u9c7cwifi\u521d\u8bc6</p> <p>noone\u7684\u8fd1\u6e90\u6e17\u900f\u7b14\u8bb0-\u9493\u9c7cwifi\u8fdb\u9636</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9A%A7%E9%81%93/index.html","title":"\u96a7\u9053","text":""},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/index.html","title":"\u9776\u573a","text":"<p>\u5728\u6e17\u900f\u6d4b\u8bd5\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c<code>\u9776\u573a</code> \u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5b9e\u8df5\u73af\u5883\u3002\u5176\u901a\u5e38\u6307\u7684\u662f\u4e3a\u8bad\u7ec3\u6216\u6d4b\u8bd5\u6e17\u900f\u6280\u672f\u800c\u642d\u5efa\u7684\u4e00\u4e2a\u6216\u4e00\u7ec4\u5177\u6709\u5df2\u77e5\u6f0f\u6d1e\u7684\u7cfb\u7edf\u73af\u5883\u3002\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u673a\uff08\u5982DVWA\u3001Metasploitable\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7f51\u7edc\u67b6\u6784\uff08\u5982VulnHub\u3001Tryhackme\u3001Hack The Box\u7b49\uff09\uff0c\u6a21\u62df\u771f\u5b9e\u7f51\u7edc\u4e2d\u7684\u670d\u52a1\u5668\u3001\u670d\u52a1\u548c\u9632\u5fa1\u673a\u5236\u3002</p> <p>\u9776\u573a\u7684\u6700\u5927\u4f18\u52bf\u5728\u4e8e\u5b89\u5168\u3001\u53ef\u63a7\u3002\u521d\u5b66\u8005\u53ef\u4ee5\u5728\u4e0d\u8fdd\u6cd5\u3001\u65e0\u98ce\u9669\u7684\u524d\u63d0\u4e0b\uff0c\u53cd\u590d\u7ec3\u4e60\u4fe1\u606f\u6536\u96c6\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6743\u9650\u63d0\u5347\u7b49\u6838\u5fc3\u6280\u80fd\u3002\u8bb8\u591a\u9776\u573a\u8fd8\u63d0\u4f9b\u4e0d\u540c\u96be\u5ea6\u7b49\u7ea7\u3001\u9898\u76ee\u7c7b\u578b\u548c\u6311\u6218\u76ee\u6807\uff0c\u9002\u5408\u4ece\u96f6\u57fa\u7840\u5230\u8fdb\u9636\u9636\u6bb5\u7684\u5b66\u4e60\u9700\u6c42\u3002</p> <p>\u5728\u771f\u6b63\u8fdb\u5165\u590d\u6742\u73af\u5883\u524d\uff0c\u9776\u573a\u662f\u953b\u70bc\u6280\u672f\u3001\u79ef\u7d2f\u7ecf\u9a8c\u7684\u6700\u4f73\u5e73\u53f0\u3002\u901a\u8fc7\u52a8\u624b\u5b9e\u64cd\uff0c\u80fd\u591f\u5e2e\u52a9\u7406\u89e3\u6e17\u900f\u6d4b\u8bd5\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u4e5f\u80fd\u5efa\u7acb\u8d77\u89e3\u51b3\u95ee\u9898\u7684\u903b\u8f91\u548c\u601d\u7ef4\u65b9\u5f0f\u3002\u5bf9\u4e8e\u521a\u5165\u95e8\u7684\u540c\u5b66\uff0c\u5efa\u8bae\u4ece\u4e00\u4e9b\u56fe\u5f62\u5316\u754c\u9762\u3001\u63d0\u793a\u4e30\u5bcc\u7684\u5165\u95e8\u9776\u573a\u5f00\u59cb\uff0c\u9010\u6b65\u8fc7\u6e21\u5230\u5177\u5907\u6311\u6218\u6027\u7684\u5f00\u653e\u5f0f\u73af\u5883\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html","title":"TryHackMe","text":"<p>\u4e00\u4e2a\u5f88\u597d\u7528\u7684\u5b66\u6e17\u900f\u7f51\u7ad9</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#_1","title":"\u7b80\u4ecb","text":"<p><code>TryHackMe</code> \u662f\u4e00\u4e2a\u9762\u5411\u7f51\u7edc\u5b89\u5168\u5b66\u4e60\u8005\u7684\u5728\u7ebf\u9776\u573a\u5e73\u53f0\uff0c\u4ee5\u4efb\u52a1\u5bfc\u5411\u3001\u7ed3\u6784\u6e05\u6670\u8457\u79f0\u3002\u5b83\u901a\u8fc7\u5c06\u590d\u6742\u7684\u6e17\u900f\u6d4b\u8bd5\u77e5\u8bc6\u62c6\u89e3\u4e3a\u4e00\u4e2a\u4e2a\u53ef\u4ea4\u4e92\u7684\u5b66\u4e60\u6a21\u5757\uff0c\u8ba9\u521d\u5b66\u8005\u53ef\u4ee5\u5faa\u5e8f\u6e10\u8fdb\u5730\u638c\u63e1\u6280\u80fd\u3002\u6bcf\u4e2a\u6a21\u5757\u901a\u5e38\u5305\u542b\u6559\u7a0b\u3001\u5728\u7ebf\u5b9e\u9a8c\u73af\u5883\u548c\u7b54\u9898\u6311\u6218\uff0c\u7528\u6237\u65e0\u9700\u81ea\u884c\u642d\u5efa\u9776\u673a\uff0c\u53ea\u9700\u901a\u8fc7\u6d4f\u89c8\u5668\u6216VPN\u8fde\u63a5\u5e73\u53f0\u63d0\u4f9b\u7684\u865a\u62df\u73af\u5883\uff0c\u5373\u53ef\u5f00\u59cb\u7ec3\u4e60\u3002</p> <p><code>TryHackMe</code> \u6db5\u76d6\u7684\u5185\u5bb9\u975e\u5e38\u5e7f\u6cdb\uff0c\u4ece\u57fa\u7840\u7684Linux\u547d\u4ee4\u3001\u7f51\u7edc\u534f\u8bae\u3001\u5b89\u5168\u5de5\u5177\uff08\u5982Nmap\u3001Burp Suite\uff09\u5230\u8fdb\u9636\u7684\u6f0f\u6d1e\u5229\u7528\u3001Web\u6e17\u900f\u3001\u7ea2\u961f\u84dd\u961f\u5bf9\u6297\u7b49\u4e00\u5e94\u4ff1\u5168\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#vip","title":"\u5173\u4e8eVIP","text":"<p>\u7edd\u5927\u591a\u6570\u7684\u60c5\u51b5\u4e0b\uff0cVIP\u7684\u597d\u5904\u5728\u4e8e\u53ef\u4ee5\u65e0\u9650\u65f6\u957f\u7684\u4f7f\u7528\u5728\u7ebf\u7684 <code>attackbox</code>\uff0c\u907f\u514d\u4e86\u7531\u4e8e\u798f\u5dde\u7f51\u7edc\u95ee\u9898\u5bfc\u81f4VPN\u96be\u4ee5\u94fe\u63a5\u7684\u95ee\u9898</p> <p>\u5c11\u90e8\u5206\u7684\u9776\u573a\uff0c\u6bd4\u5982\u5185\u7f51\u90e8\u5206\uff0c\u4f1a\u9700\u8981VIP</p> <p>\u53bb\u54b8\u9c7c\u8d2d\u4e70\u6bd4\u5b98\u7f51\u5212\u7b97\u5f88\u591a</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#_2","title":"\u8def\u5f84\u9009\u62e9","text":"<p>\u53c2\u8003sugobet\u7684CSDN\u535a\u5ba2</p> <p></p> <p>\u5bf9\u4e8e\u96f6\u57fa\u7840\uff0c\u53ef\u4ee5\u5148\u5b8c\u6210 1\u30014\u30012\u30013\uff0c\u7136\u540e\u518d\u6709\u987a\u5e8f\u7684\u5b66\u4e605\u30016\u30017</p> <p>\u5426\u5219\u53ef\u4ee5\u76f4\u63a5\u4ece5\u30016\u30017\u6709\u987a\u5e8f\u7684\u5f00\u59cb\u5b66\u4e60</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#rooms","title":"<code>Rooms</code>","text":"<p>\u53ef\u4ee5\u53c2\u8003noone\u7684\u535a\u5ba2</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/vulnhub/index.html","title":"Vulnhub","text":"<p><code>VulnHub</code> \u662f\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u6f0f\u6d1e\u9776\u673a\u548c\u6e17\u900f\u5b9e\u6218\u8bad\u7ec3\u7684\u5f00\u6e90\u5e73\u53f0\uff0c\u63d0\u4f9b\u5927\u91cf\u53ef\u4e0b\u8f7d\u7684\u865a\u62df\u673a\u955c\u50cf\uff0c\u6bcf\u4e2a\u955c\u50cf\u90fd\u8bbe\u8ba1\u6709\u7279\u5b9a\u7684\u6f0f\u6d1e\u6311\u6218\uff0c\u6a21\u62df\u771f\u5b9e\u7cfb\u7edf\u4e2d\u7684\u5b89\u5168\u95ee\u9898\u3002\u7528\u6237\u53ef\u4ee5\u5728\u672c\u5730\u642d\u5efa\u8fd9\u4e9b\u9776\u673a\u73af\u5883</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/vulnhub/index.html#rooms","title":"<code>Rooms</code>","text":"<p>\u53ef\u4ee5\u53c2\u8003noone\u7684\u535a\u5ba2</p>"},{"location":"08-SRC/index.html","title":"SRC","text":""},{"location":"08-SRC/index.html#src_1","title":"\u4ec0\u4e48\u662f SRC","text":"<p>SRC\uff08Security Response Center\uff0c\u5b89\u5168\u54cd\u5e94\u4e2d\u5fc3\uff09\u662f\u5404\u5927\u4f01\u4e1a\u6216\u5e73\u53f0\u8bbe\u7acb\u7684\u6f0f\u6d1e\u63a5\u6536\u4e0e\u5904\u7406\u673a\u5236\uff0c\u65e8\u5728\u9f13\u52b1\u5b89\u5168\u7814\u7a76\u4eba\u5458\u5728\u5408\u6cd5\u5408\u89c4\u8303\u56f4\u5185\u6316\u6398\u5e76\u4e0a\u62a5\u4ea7\u54c1\u6216\u670d\u52a1\u4e2d\u7684\u5b89\u5168\u6f0f\u6d1e\u3002</p> <p>\u5728\u6821\u56ed\u6216\u4e2a\u4eba\u5c42\u9762\uff0c\u53c2\u4e0e SRC \u901a\u5e38\u6307\u7684\u662f\u5bf9\u5404\u7c7b\u516c\u5f00\u7f51\u7ad9\u8fdb\u884c\u6e17\u900f\u6d4b\u8bd5\uff0c\u6316\u6398\u5b9e\u9645\u6f0f\u6d1e\uff0c\u5e76\u901a\u8fc7\u5382\u5546\u5b98\u65b9\u901a\u9053\u8d1f\u8d23\u4efb\u5730\u63d0\u4ea4\uff0c\u83b7\u5f97\u8ba4\u53ef\u3001\u5956\u52b1\u6216\u79ef\u5206\u3002</p> <p>\u5e38\u89c1\u7684\u5e73\u53f0\u6709</p> <p>\u8865\u5929</p> <p>\u6f0f\u6d1e\u76d2\u5b50</p> <p>edusrc</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/index.html","title":"\u8fd0\u7ef4","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/00-NISA%20%E7%BD%91%E7%BB%9C%E8%B5%84%E4%BA%A7%E7%BB%B4%E6%8A%A4%E6%8C%87%E5%8D%97/index.html","title":"NISA \u7f51\u7edc\u8d44\u4ea7\u7ef4\u62a4\u6307\u5357","text":"<p>\u5c06\u76ee\u524d\u534f\u4f1a\u5185\u7684\u7f51\u7edc\u8d44\u4ea7\u60c5\u51b5\u90e8\u7f72\u60c5\u51b5\u4ee5\u53ca\u7ef4\u62a4\u65b9\u5f0f\u6c47\u603b, \u65b9\u4fbf\u540e\u7eed\u4ea4\u63a5(\u6ce8\u610f\u654f\u611f\u4fe1\u606f\u8bef\u4e0a\u4f20)</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/00-NISA%20%E7%BD%91%E7%BB%9C%E8%B5%84%E4%BA%A7%E7%BB%B4%E6%8A%A4%E6%8C%87%E5%8D%97/00-%E5%AE%98%E7%BD%91/index.html","title":"\u5b98\u7f51","text":"<p>\u6e90\u7801\u548c\u7f51\u9875\u5747\u6258\u7ba1\u4e8e Github \u4e0a, \u4ed3\u5e93\u4e3a FJNU-NISA/NISA-HomePage, \u5e76\u4e14\u4f7f\u7528 www.fjnusec.cn \u53ef\u4ee5\u8bbf\u95ee, \u4f46\u672a\u5bf9\u56fd\u5185\u8bbf\u95ee\u8fdb\u884c\u4f18\u5316</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/00-NISA%20%E7%BD%91%E7%BB%9C%E8%B5%84%E4%BA%A7%E7%BB%B4%E6%8A%A4%E6%8C%87%E5%8D%97/01-Wiki/index.html","title":"Wiki","text":"<p>\u6e90\u7801\u548c\u7f51\u9875\u5747\u6258\u7ba1\u4e8e Github \u4e0a, \u4ed3\u5e93\u4e3a FJNU-NISA/NISA-Wiki, \u5e76\u4e14\u4f7f\u7528 wiki.fjnusec.cn \u53ef\u4ee5\u8bbf\u95ee, \u4f46\u672a\u5bf9\u56fd\u5185\u8bbf\u95ee\u8fdb\u884c\u4f18\u5316</p>"},{"location":"10-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/index.html","title":"INCIDENT RESPONSE-\u5e94\u6025\u54cd\u5e94","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"11-IOT/index.html","title":"IOT-\u7269\u8054\u7f51","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"11-IOT/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE/BLE%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99.html","title":"BLE\u4f4e\u529f\u8017\u84dd\u7259","text":"<p>\u53c2\u8003: http://doc.iotxx.com/BLE%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98</p>"},{"location":"12-FORENSIC/index.html","title":"FORENSIC-\u7535\u5b50\u53d6\u8bc1","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"13-%E5%8C%BA%E5%9D%97%E9%93%BE/index.html","title":"BLOCKCHAIN-\u533a\u5757\u94fe\u5b89\u5168","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"14-%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3%E5%BD%92%E6%A1%A3/index.html","title":"\u6bd4\u8d5b\u9898\u89e3\u5f52\u6863","text":""}]}