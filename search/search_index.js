var __index = {"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"00 \u7b80\u4ecb","text":""},{"location":"index.html#nisa-network-information-security-association","title":"NISA (Network &amp; Information Security Association) \u4ecb\u7ecd","text":"<p>\u798f\u5efa\u5e08\u8303\u5927\u5b66\u7f51\u7edc\u4e0e\u4fe1\u606f\u5b89\u5168\u534f\u4f1a\uff08\u4ee5\u4e0b\u7b80\u79f0\u201c\u7f51\u5b89\u534f\u4f1a\u201d\uff09\u662f\u5728\u798f\u5efa\u5e08\u8303\u5927\u5b66\u7f51\u7edc\u4e0e\u6570\u636e\u4e2d\u5fc3\u6307\u5bfc\u4e0b\u521b\u7acb\u7684\u5b66\u751f\u793e\u56e2\uff0c\u6700\u65e9\u4e8e2014\u5e74\u6d3b\u8dc3\u5728\u5e08\u5927\u7f51\u5b89\u5708\uff0c\u4e8e2018\u5e74\u6b63\u5f0f\u4ee5\u5b66\u751f\u793e\u56e2\u5f62\u5f0f\u521b\u7acb\uff0c\u81ea2024\u5e74\u8d77\uff0c\u7531\u8ba1\u7b97\u673a\u4e0e\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5b66\u9662\u4f5c\u4e3a\u6307\u5bfc\u5355\u4f4d\uff0c\u7531\u6797\u6656\u6559\u6388\u4efb\u6307\u5bfc\u8001\u5e08\u3002\u6210\u7acb\u4ee5\u6765\uff0c\u7f51\u5b89\u534f\u4f1a\u7acb\u8db3\u4e8e\u666e\u53ca\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u3001\u63d0\u5347\u7f51\u7edc\u5b89\u5168\u6280\u80fd\uff0c\u591a\u6b21\u4e8e\u534f\u4f1a\u5185\u90e8\u5f00\u5c55\u6280\u672f\u5206\u4eab\uff0c\u627f\u529e\u591a\u5c4a\u798f\u5efa\u5e08\u8303\u5927\u5b66\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u6280\u80fd\u7ade\u8d5b\uff0c\u5176\u4e0b\u5c5eNISA\u6218\u961f\u6210\u5458\u66fe\u591a\u6b21\u83b7\u5f97\u201c\u767e\u8d8a\u676f\u201d\u3001\u201c\u9ed1\u76fe\u676f\u201d\uff08\u73b0\u201c\u95fd\u76fe\u676f\u201d\uff09\u3001\u201c\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u201d\u7b49\u6bd4\u8d5b\u5956\u9879\uff0c\u591a\u6b21\u5411\u6821\u7f51\u4fe1\u529e\u63d0\u4ea4\u6e17\u900f\u6d4b\u8bd5\u62a5\u544a\uff0c\u5e76\u4e8e\u7701\u653b\u9632\u6bd4\u8d5b\u4e2d\u53d6\u5f97\u4e00\u5b9a\u540d\u6b21\u3002\u76ee\u524d\uff0c\u534f\u4f1a\u6210\u5458\u6d3b\u8dc3\u4e8e\u56fd\u5185\u5404\u5927\u8d5b\u4e8b\uff0c\u5e76\u4e14\u81f4\u529b\u4e8e\u5b8c\u5584\u73b0\u6709\u7f51\u5b89\u5b9e\u6218\u9776\u573a\uff0c\u4e0e\u6821\u7f51\u4fe1\u529e\u5171\u540c\u5efa\u7acb\u6821\u5185SRC\u5e73\u53f0\uff0c\u540c\u65f6\u534f\u52a9\u8ba1\u7b97\u673a\u4e0e\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5b66\u9662\u5b8c\u5584\u7f51\u5b89\u4eba\u624d\u57f9\u517b\u8ba1\u5212\u3002</p>"},{"location":"index.html#nisa-wiki","title":"NISA Wiki \u4ecb\u7ecd","text":"<p>\u81f4\u529b\u4e8e\u603b\u7ed3 NISA \u7684\u5386\u5c4a\u6210\u679c\u7ecf\u9a8c</p>"},{"location":"01-QUICK%20START/index.html","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u6216\u8bb8\u5148\u5b66\u4e60\u8fd9\u4e9b\u6280\u80fd\uff0c\u4f1a\u66f4\u597d\u5e2e\u52a9\u4f60\u66f4\u597d\u7684\u7ee7\u7eed\u540e\u7eed\u7684\u5b66\u4e60, \u6839\u636e\u81ea\u5df1\u9700\u8981\u9605\u8bfb</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/index.html","title":"\u5fc5\u770b\u6307\u5357","text":"<p>\u5982\u679c\u4f60\u521a\u5165\u95e8, \u8fd9\u4e9b\u53ef\u80fd\u4f1a\u5e2e\u52a9\u4f60</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html","title":"\u65b0\u751f\u6307\u5f15","text":"<p>\u8fd9\u662f\u4e00\u4efd\u9762\u5411\u65b0\u751f\u7684\u5feb\u901f\u6307\u5f15</p> <p>NISA\u7f51\u5b89\u534f\u4f1a\u7684\u6280\u672f\u90e8\u95e8\u5206\u4e3aCTF\u90e8\u548c\u6e17\u900f\u90e8\uff0c\u53ef\u4ee5\u9605\u8bfb\u4e0b\u9762\u7684\u7b80\u4ecb\u540e\u6311\u9009\u611f\u5174\u8da3\u7684\u90e8\u5206\u6df1\u5165\u4e86\u89e3</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#ctf","title":"CTF\u90e8","text":"<p>CTF\uff0c\u5373Capture The Flag\uff0c\u7f51\u7edc\u593a\u65d7\u8d5b\uff0c\u89e3\u51fa\u9898\u76ee\u4e2d\u8bbe\u7f6e\u7684\u5bc6\u7801\u6216\u6f0f\u6d1e\uff0c\u627e\u5230\u9690\u85cf\u7684 <code>Flag</code> \u6765\u5f97\u5206\u3002\u5176\u66f4\u504f\u5411\u4e8e\u6bd4\u8d5b\u3002</p> <p>\u6709\u4ee3\u8868\u6027\u7684\u6bd4\u8d5b\u6709 CISCN\uff0c\u957f\u57ce\u676f\u7b49</p> <p>\u5728\u56fd\u8d5b\u548c\u7701\u8d5b\u4e2d\u62ff\u5956\u53ef\u4ee5\u52a0\u7efc\u6d4b</p> <p>\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u5411\uff1a</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#web","title":"Web","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#misc","title":"MISC \u6742\u9879","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#crypto","title":"CRYPTO \u5bc6\u7801","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#re","title":"RE \u9006\u5411","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#pwn","title":"PWN \u7834\u89e3","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/00-%E6%96%B0%E7%94%9F%E6%8C%87%E5%BC%95.html#_2","title":"\u6e17\u900f\u90e8","text":"<p>\u5f53\u5927\u9ed1\u5ba2\u55b5</p> <p>\u6e17\u900f\uff0c\u5bf9\u771f\u5b9e\u573a\u666f\u6216\u6a21\u62df\u771f\u5b9e\u573a\u666f\u8fdb\u884c\u5b89\u5168\u8bc4\u4f30\uff0c\u65e8\u5728\u53d1\u73b0\u7cfb\u7edf\u4e2d\u7684\u6f5c\u5728\u6f0f\u6d1e\uff0c\u5e76\u63d0\u4f9b\u4fee\u590d\u5efa\u8bae\u3002\u5176\u66f4\u504f\u5411\u4e8e\u5b9e\u6218\uff0c\u5373\u6709\u6388\u6743\u5730\u653b\u51fb\u771f\u5b9e\u7f51\u7edc\u7cfb\u7edf</p> <p>\u53ef\u4ee5\u4ee3\u8868\u5b66\u6821 \u6216\u7701\u6559\u80b2\u5385 \u53c2\u52a0\u7701\u5e02\u7ea7\u7684\u62a4\u7f51\u884c\u52a8\uff0c\u6709\u6388\u6743\u7684 \u653b\u51fb \u6d4b\u8bd5\u522b\u7684\u5b66\u6821\u6216\u4f01\u4e1a</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html","title":"\u9ad8\u6548\u63d0\u95ee\u6307\u5357","text":"<p>\u53c2\u8003</p> <p>https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</p> <p>https://pidoc.cn/docs/pidoc/how_to_ask</p> <p>\u5982\u679c\u60f3\u9ad8\u6548\u63d0\u95ee\u800c\u4e0d\u662f\u62db\u7b11\u63d0\u95ee, \u4e0b\u6587\u6216\u8bb8\u662f\u8be5\u770b\u7684</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_2","title":"\u9ad8\u6548\u63d0\u95ee\u57fa\u672c\u6d41\u7a0b","text":"<p>\u9047\u5230\u95ee\u9898 -&gt; \u67e5\u770b\u62a5\u9519 -&gt; AI\u5206\u6790 -&gt; \u641c\u7d22\u5f15\u64ce -&gt; \u8be2\u95ee\u4ed6\u4eba</p> <p>\u9664\u4e86\u8be2\u95ee\u4ed6\u4eba\u662f\u6700\u540e\u4e00\u6b65, \u5176\u4ed6\u7684\u987a\u5e8f\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u4e60\u60ef\u548c\u95ee\u9898\u7c7b\u578b\u8c03\u6574(\u5f53\u7136, \u5982\u679c\u522b\u4eba\u613f\u610f, \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9047\u5230\u95ee\u9898\u5c31\u629b\u51fa)</p> <p>\u5982\u679c\u90fd\u4e0d\u80fd\u89e3\u51b3, \u90a3\u53ea\u80fd\u81ea\u5df1\u5f80\u95ee\u9898\u66f4\u5e95\u5c42\u5206\u6790, \u6210\u4e3a\u53d1\u73b0\u65b0\u95ee\u9898\u5e76\u63d0\u51fa\u89e3\u51b3\u529e\u6cd5\u7684\u4eba</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_3","title":"\u67e5\u770b\u62a5\u9519","text":"<p>\u5927\u90e8\u5206\u7684\u7a0b\u5e8f\u7684\u62a5\u9519\u4fe1\u606f\u90fd\u7279\u522b\u8be6\u7ec6, \u751a\u81f3\u4f1a\u7ed9\u51fa\u89e3\u51b3\u529e\u6cd5, \u53ea\u4e0d\u8fc7\u662f\u82f1\u6587\u7684</p> <p>\u8fd9\u4e2a\u65f6\u5019, \u5c31\u9700\u8981\u6709\u4e00\u4e2a\u597d\u7684\u82f1\u6587\u6c34\u5e73, \u4e0d\u8fc7\u5982\u679c\u81ea\u8eab\u82f1\u8bed\u80fd\u529b\u6709\u9650, \u4f7f\u7528\u7ffb\u8bd1\u8f6f\u4ef6\u4e5f\u53ef\u4ee5</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#ai","title":"AI\u5206\u6790","text":"<p>\u5982\u679c\u81ea\u8eab\u7684\u82f1\u6587\u6c34\u5e73\u548c\u7ffb\u8bd1\u8f6f\u4ef6\u90fd\u4e0d\u80fd\u5f88\u597d\u7684\u7ffb\u8bd1\u62a5\u9519\u4fe1\u606f, \u6216\u8bb8\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 AI \u5e2e\u5fd9(AI \u5176\u5b9e\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5f3a\u5927\u7684\u7ffb\u8bd1\u8f6f\u4ef6)</p> <p>\u4f46\u662f AI \u4e0d\u4ec5\u4ec5\u53ea\u4f1a\u7ffb\u8bd1, \u901a\u5e38\u8fd8\u4f1a\u7ed9\u51fa\u5177\u4f53\u7684\u89e3\u51b3\u529e\u6cd5\u548c\u6392\u67e5\u6b65\u9aa4</p> <p>\u5982\u679c\u5728\u67d0\u4e2a\u6b65\u9aa4\u4e0d\u7406\u89e3, \u8fd8\u53ef\u4ee5\u8ba9 AI \u5c55\u5f00\u8bb2\u89e3, \u5e76\u4e14\u89e3\u51b3\u95ee\u9898\u4e2d, \u5982\u679c\u9047\u5230\u65b0\u7684\u95ee\u9898, \u53ef\u4ee5\u4e00\u5e76\u63d0\u4f9b\u7ed9 AI, \u4e00\u8d77\u5206\u6790</p> <p>\u6ce8\u610f, \u6ce8\u610f, \u6ce8\u610f, \u4e07\u4e0d\u53ef\u4ee5\u4f9d\u8d56 AI, AI\u7ed9\u51fa\u7684\u6240\u6709\u547d\u4ee4, \u90fd\u5e94\u8be5\u63d0\u524d\u77e5\u9053\u6267\u884c\u6548\u679c\u540e\u518d\u53bb\u6267\u884c, \u5e76\u4e14\u5fc5\u8981\u65f6\u8bf7\u505a\u597d\u5907\u4efd, \u5728\u6ca1\u6709\u4eba\u4e3a\u5e72\u9884\u7684\u60c5\u51b5\u4e0b, \u53ef\u80fd\u4e00\u5207\u4f1a\u5f80\u6df7\u4e71\u7684\u65b9\u5411\u53d1\u5c55</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_4","title":"\u641c\u7d22\u5f15\u64ce","text":"<p>\u611f\u53d7 AI \u7684\u4fbf\u6377\u65f6, \u4e0d\u8981\u5fd8\u8bb0\u641c\u7d22\u5f15\u64ce\u7684\u7528\u5904, \u4e00\u4e9b\u95ee\u9898\u6216\u8bb8\u518d\u641c\u7d22\u5f15\u64ce\u4e2d\u66f4\u5bb9\u6613\u83b7\u53d6\u7b54\u6848</p> <p>\u5728\u5165\u95e8\u9636\u6bb5, \u9047\u5230\u7684\u95ee\u9898, 99%\u524d\u4eba\u90fd\u662f\u5df2\u7ecf\u9047\u5230\u8fc7\u7684, \u5e76\u4e14\u628a\u89e3\u51b3\u529e\u6cd5\u548c\u7ecf\u9a8c\u5206\u4eab\u5728\u7f51\u7edc\u4e2d, \u9605\u8bfb\u524d\u4eba\u7684\u6587\u7ae0\u6709\u65f6\u4f1a\u6bd4\u8be2\u95ee AI \u66f4\u52a0\u6e05\u695a</p> <p>\u5173\u4e8e\u641c\u7d22\u5f15\u64ce\u7684\u4f7f\u7528, \u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b, \u6216\u8bb8\u540e\u7eed\u4f1a\u5355\u72ec\u5217\u4e00\u4e2a\u9875\u9762</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_5","title":"\u641c\u7d22\u5f15\u64ce\u9009\u62e9","text":"<p>\u641c\u7d22\u5f15\u64ce\u6709\u5f88\u591a, \u8fd9\u91cc\u4e0d\u505a\u4ec0\u4e48\u63a8\u8350(\u8c37\u6b4c, bing, \u767e\u5ea6, \u641c\u72d7\u7b49), \u5404\u6709\u5404\u7684\u4f18\u52bf(\u6bd4\u5982\u641c\u72d7\u53ef\u4ee5\u641c\u7d22\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0), \u81ea\u5df1\u90fd\u53bb\u7528\u7528, \u627e\u5230\u81ea\u5df1\u559c\u6b22\u7684\u5c31\u597d, \u5e76\u4e14\u5404\u4e2a\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u7684\u7f51\u7ad9\u5e76\u4e14\u5b8c\u5168\u4e00\u81f4\u7684, \u6709\u65f6\u5019\u53ef\u4ee5\u591a\u4e2a\u641c\u7d22\u5f15\u64ce\u4e00\u8d77\u4f7f\u7528</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_6","title":"\u5173\u952e\u8bcd\u63d0\u53d6","text":"<p>\u6709\u4e9b\u65f6\u5019, \u76f4\u63a5\u628a\u62a5\u9519\u6574\u53e5\u8bdd\u653e\u5165\u641c\u7d22\u6846\u5c31\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u6587\u7ae0</p> <p>\u4f46\u662f\u6709\u7684\u62a5\u9519\u8bed\u53e5\u5728\u4e0d\u540c\u5e94\u7528\u548c\u7cfb\u7edf\u4e4b\u95f4\u5b58\u5728\u666e\u904d\u6027, \u8fd9\u4e2a\u65f6\u5019, \u8bb0\u5f97\u5584\u4e8e\u4f7f\u7528\u7a7a\u683c\u5206\u9694\u5173\u952e\u8bcd, \u6dfb\u52a0\u9650\u5236\u8bcd\u6c47(\u6bd4\u5982\u7cfb\u7edf\u7248\u672c, \u8f6f\u4ef6\u7248\u672c\u7b49)</p> <p>\u6216\u8bb8\u4f60\u8fd8\u542c\u8fc7 <code>\u8c37\u6b4c\u8bed\u6cd5</code>, \u8fd9\u4e2a\u662f\u66f4\u52a0\u590d\u6742\u66f4\u52a0\u53ef\u81ea\u5b9a\u4e49\u7684\u641c\u7d22\u8bed\u53e5, \u81ea\u5df1\u53bb\u5b66\u4e60\u5427</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_7","title":"\u8be2\u95ee\u4ed6\u4eba","text":"<p>\u5728\u4e0a\u8ff0\u529e\u6cd5\u90fd\u5c1d\u8bd5\u540e, \u5982\u679c\u8fd8\u662f\u4e0d\u80fd\u89e3\u51b3, \u53ef\u4ee5\u5c1d\u8bd5\u95ee\u95ee\u4ed6\u4eba, \u6216\u8bb8\u5f53\u5c40\u8005\u8ff7\u65c1\u89c2\u8005\u6e05, \u4ed6\u4eba\u4e00\u4e0b\u5c31\u53ef\u4ee5\u770b\u51fa\u4f60\u7684\u95ee\u9898(\u5f53\u7136, \u5982\u679c\u4f60\u7ecf\u8fc7\u4e0a\u9762\u8fd9\u51e0\u4e2a\u6b65\u9aa4\u540e, \u8fd9\u79cd\u60c5\u51b5\u662f\u5c11\u89c1\u7684)</p> <p>\u4f46\u662f\u6709\u4e9b\u65f6\u5019\u63d0\u95ee\u5374\u6ca1\u4eba\u613f\u610f\u56de\u7b54, \u6216\u8bb8\u662f\u5e76\u975e\u63d0\u51fa\u7684\u95ee\u9898\u591a\u96be, \u53ea\u662f\u4f60\u63d0\u51fa\u7684\u95ee\u9898\u4e0d\u591f\u8be6\u7ec6, \u522b\u4eba\u6ca1\u529e\u6cd5\u5728\u51e0\u5206\u949f\u4e4b\u5185\u56de\u7b54, \u800c\u662f\u8981\u518d\u8ddf\u4f60\u8fdb\u4e00\u6b65\u6c9f\u901a\u540e\u624d\u80fd\u786e\u5b9a\u95ee\u9898\u6240\u5728, \u8fd9\u96be\u514d\u4f1a\u4f7f\u522b\u4eba\u4e27\u5931\u56de\u7b54\u7684\u70ed\u60c5, \u6240\u4ee5\u597d\u7684\u63d0\u95ee\u662f\u83b7\u53d6\u522b\u4eba\u56de\u7b54\u7684\u5173\u952e</p> <p>\u4e0b\u6587\u540c\u6837\u9002\u7528\u4e8e\u8ddf AI \u63d0\u95ee</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_8","title":"\u8be2\u95ee\u8c01","text":"<p>\u95ee\u4ed6\u4eba\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u627e\u5230\u95ee\u7684\u4eba, \u672f\u4e1a\u6709\u4e13\u653b, \u627e\u5230\u5bf9\u7684\u4eba\u624d\u53ef\u4ee5\u66f4\u5feb\u7684\u89e3\u51b3\u95ee\u9898</p> <p>\u5982\u679c\u4f60\u662f\u5728\u4f7f\u7528 Github \u4e0a\u7684\u9879\u76ee, \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 Issue \u4e2d\u63d0\u95ee(\u4e0d\u8fc7\u63d0\u95ee\u4e4b\u524d, \u8bf7\u5148\u770b\u770b\u6709\u6ca1\u6709\u4eba\u5df2\u7ecf\u63d0\u8fc7\u76f8\u4f3c\u7684\u95ee\u9898)</p> <p>\u4e00\u4e9b\u8f6f\u4ef6\u6709\u81ea\u5df1\u7684\u793e\u533a, \u53ef\u4ee5\u518d\u8be2\u95ee\u76f8\u5173\u95ee\u9898\u4e5f\u53ef\u4ee5\u66f4\u597d\u7684\u5f97\u5230\u56de\u7b54</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_9","title":"\u590d\u73b0\u6761\u4ef6","text":"<p>\u95ee\u95ee\u9898\u6700\u91cd\u8981\u7684\u5c31\u662f\u5c55\u793a\u95ee\u9898, \u5c55\u793a\u95ee\u9898\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u5c31\u662f\u8ba9\u4ed6\u4eba\u53ef\u4ee5\u76f4\u63a5\u590d\u73b0\u95ee\u9898</p> <p>\u6240\u4ee5\u63d0\u95ee\u65f6, \u8bb0\u5f97\u9644\u4e0a\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u590d\u73b0\u6761\u4ef6, \u6bd4\u5982(\u8fd9\u91cc\u6284\u4e86\u4e00\u4e0b\u6811\u8393\u6d3e\u7684\u63d0\u95ee\u6307\u5357)</p> <ol> <li>\u4ec0\u4e48\u786c\u4ef6\u8bbe\u5907\u3002\u4f8b\u5982\uff1a\u6811\u8393\u6d3e3B+XX\u6444\u50cf\u5934</li> <li>\u4ec0\u4e48\u64cd\u4f5c\u7cfb\u7edf\u3002\u4f8b\u5982\uff1a\u6811\u8393\u6d3eOS Desktop Bookworm\uff0c32\u4f4d</li> <li>\u4ec0\u4e48\u7f16\u7a0b\u8bed\u8a00\u3002\u4f8b\u5982\uff1aPython 3.9.6 \u4ec04. \u4e48\u95ee\u9898\u73b0\u8c61\u3002\u4f8b\u5982\uff1a\u8c03\u7528xxxx\u65f6\uff0c\u62a5\u9519xxxxx\u3002\u65e0\u6cd5\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u5185\u5bb9\u3002\u9644\u5b8c\u6574\u4fe1\u606f\u622a\u56fe</li> <li>\u9644\u4e0a\u5b9e\u73b0\u4ee3\u7801\u3002</li> <li>\u5982\u4f55\u590d\u73b0\uff1a<ol> <li>\u63d2\u4e0a\u7535\u6e90</li> <li>\u5f00\u673a</li> <li>\u8fd0\u884cXXX</li> <li>\u62a5\u9519</li> </ol> </li> </ol>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_10","title":"\u5f53\u524d\u60c5\u51b5","text":"<p>\u8bb2\u6e05\u695a\u590d\u73b0\u6761\u4ef6\u540e, \u63a5\u7740\u8bb2\u8ff0\u81ea\u5df1\u76ee\u524d\u7684\u60c5\u51b5, \u6bd4\u5982\u81ea\u5df1\u5c1d\u8bd5\u4e86\u4ec0\u4e48\u65b9\u5f0f\u4e86, \u5df2\u77e5\u54ea\u4e9b\u5df2\u7ecf\u5931\u8d25\u7684\u89e3\u51b3\u529e\u6cd5</p> <p>\u5fc5\u8981\u65f6\u9644\u4e0a\u622a\u56fe, \u4e3b\u8981\u662f\u622a\u56fe!!!</p> <p>\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u901a\u5e38\u4f1a\u6709\u6469\u5c14\u7eb9\u7b49\u5e72\u6270\u60c5\u51b5\u7684\u51fa\u73b0, \u8fd9\u4e2a\u7279\u522b\u5f71\u54cd\u4ed6\u4eba\u7684\u89c2\u611f, \u6240\u4ee5\u5728\u9644\u56fe\u65f6\u5c3d\u53ef\u80fd\u4f7f\u7528\u622a\u56fe\u800c\u4e0d\u662f\u62cd\u7167(\u5f53\u7136, \u5982\u679c\u5728BIOS\u7b49\u73af\u5883\u4e0b, \u6ca1\u529e\u6cd5\u622a\u56fe\u5916)</p> <p>\u518d\u8005\u9644\u56fe\u65f6, \u5c3d\u53ef\u80fd\u4e0d\u6cc4\u9732\u81ea\u5df1\u9690\u79c1\u7684\u524d\u63d0\u4e0b, \u8bf7\u5c3d\u53ef\u80fd\u7684\u622a\u5168\u5c4f\u5e55, \u5c3d\u53ef\u80fd\u7ed9\u5168\u4fe1\u606f</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_11","title":"\u63d0\u51fa\u9700\u6c42","text":"<p>\u95ee\u9898\u63d0\u51fa\u540e, \u8bb0\u5f97\u7ed9\u51fa\u8981\u5b9e\u73b0\u4ec0\u4e48\u6548\u679c, \u6bd4\u5982\u89e3\u51b3\u62a5\u9519? \u9700\u8981\u66f4\u7b80\u4fbf\u65b9\u6cd5? \u53d1\u5c55\u610f\u89c1?</p> <p>\u8fd9\u4f1a\u8ba9\u4ed6\u4eba\u66f4\u6709\u76ee\u7684\u6027\u7684\u89e3\u51b3\u95ee\u9898</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/01-%E9%AB%98%E6%95%88%E6%8F%90%E9%97%AE%E6%8C%87%E5%8D%97.html#_12","title":"\u60ac\u8d4f","text":"<p>\u5982\u679c\u5b9e\u5728\u4e00\u4e2a\u5f00\u653e\u7684\u4ea4\u6d41\u793e\u533a, \u6216\u8005\u793e\u56e2\u7ec4\u7ec7(\u6bd4\u5982NISA), \u8fd9\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u5ffd\u7565</p> <p>\u4f46\u662f\u5982\u679c\u5728\u4e00\u4e2a\u964c\u751f\u7684\u793e\u7fa4\u4e2d, \u5982\u679c\u60f3\u8ba9\u5927\u5bb6\u5173\u6ce8\u4f60\u7684\u95ee\u9898, \u6216\u8005\u4f60\u7684\u95ee\u9898\u6d89\u53ca\u9762\u6bd4\u8f83\u5927, \u5904\u7406\u590d\u6742, \u9002\u5f53\u7684\u60ac\u8d4f\u662f\u5438\u5f15\u4ed6\u4eba\u7684\u6709\u6548\u624b\u6bb5</p> <p>\u4e0d\u8fc7\u6211\u76f8\u4fe1, \u5982\u679c\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u63d0\u95ee, \u77e5\u9053\u7b54\u6848\u7684\u4eba\u662f\u5f88\u613f\u610f\u65e0\u507f\u5e2e\u5fd9\u7684</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html","title":"FAQ","text":"<p>\u6c47\u603b\u4e00\u4e9b\u65b0\u624b\u4f1a\u9047\u5230\u7684\u95ee\u9898, \u4e0d\u5b9a\u671f\u66f4\u65b0\u4e2d</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#_1","title":"\u7ade\u8d5b\u76f8\u5173","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf","title":"Q: \u4ec0\u4e48\u662f CTF","text":"<p>A: \u300cCTF Capture The Flag\u300d\u4e2d\u6587\u4e00\u822c\u8bd1\u4f5c\u593a\u65d7\u8d5b\uff0c\u5728\u7f51\u7edc\u5b89\u5168\u9886\u57df\u4e2d\u6307\u7684\u662f\u7f51\u7edc\u5b89\u5168\u6280\u672f\u4eba\u5458\u4e4b\u95f4\u8fdb\u884c\u6280\u672f\u7ade\u6280\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\u3002CTF \u8d77\u6e90\u4e8e 1996 \u5e74 DEFCON \u5168\u7403\u9ed1\u5ba2\u5927\u4f1a\uff0c\u4ee5\u4ee3\u66ff\u4e4b\u524d\u9ed1\u5ba2\u4eec\u901a\u8fc7\u76f8\u53d1\u8d77\u771f\u5b9e\u653b\u51fb\u8fdb\u884c\u6280\u672f\u6bd4\u62fc\u7684\u65b9\u5f0f\uff1b\u5176\u5c06\u5b89\u5168\u76f8\u5173\u7684\u77e5\u8bc6\u70b9\u62bd\u8c61\u51fa\u6765\u5e76\u52a0\u5165\u5230\u9898\u76ee\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u77e5\u8bc6\u70b9\u7684\u7406\u89e3\u8ba4\u77e5\uff0c\u5177\u4f53\u5730\u8fdb\u884c\u5b9e\u8df5\u6765\u653b\u514b\u9898\u76ee\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-flag","title":"Q: \u4ec0\u4e48\u662f Flag\uff1f","text":"<p>A: \u53c2\u8d5b\u56e2\u961f\u4e4b\u95f4\u901a\u8fc7\u8fdb\u884c\u653b\u9632\u5bf9\u6297\u3001\u7a0b\u5e8f\u5206\u6790\u7b49\u5f62\u5f0f\uff0c\u7387\u5148\u4ece\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6bd4\u8d5b\u73af\u5883\u4e2d\u5f97\u5230\u4e00\u4e32\u5177\u6709\u4e00\u5b9a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u6216\u5176\u4ed6\u5185\u5bb9\uff0c\u5e76\u5c06\u5176\u63d0\u4ea4\u7ed9\u4e3b\u529e\u65b9\uff0c\u4ece\u800c\u593a\u5f97\u5206\u6570\u3002\u4e3a\u4e86\u65b9\u4fbf\u79f0\u547c\uff0c\u6211\u4eec\u628a\u8fd9\u6837\u7684\u5185\u5bb9\u79f0\u4e4b\u4e3a\u201cFlag\u201d</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_1","title":"Q: CTF \u7ade\u8d5b\u6a21\u5f0f\uff1f","text":"<p>A: CTF \u6709\u4e2a\u4eba\u8d5b\u548c\u56e2\u961f\u8d5b\uff0c\u5728\u4e3b\u6d41\u6bd4\u8d5b\u4e2d\u591a\u4e3a\u56e2\u961f\u8d5b\uff1b</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_2","title":"Q: CTF \u7684\u7ade\u8d5b\u65b9\u5411","text":"<p>A: </p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q","title":"Q: \u6211\u53ea\u662f\u4e2a\u840c\u65b0\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u53eb\u6211\u5e08\u5085?","text":"<p>A: CTF \u5708\u5b50\u4e2d\uff0cCTFer \u4eec\u901a\u5e38\u4ee5\"\u5e08\u5085\"\u76f8\u4e92\u79f0\u547c\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-writeup","title":"Q: \u4ec0\u4e48\u662f WriteUP?","text":"<p>A: </p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q-ctf_3","title":"Q: \u5b66\u4e60 CTF \u6709\u4ec0\u4e48\u8981\u6c42\u4e48?","text":"<p>A: \u4fe1\u606f\u68c0\u7d22\u80fd\u529b \u548c \u5b66\u4e60\u80fd\u529b \u8fd9\u4e24\u8005</p> <p>\u5373\u53ef\u8bf4\u4eba\u8bdd\u5c31\u662f\uff0c\u4f1a\u7528\u641c\u7d22\u5f15\uff0c\u77e5\u9053\u600e\u4e48\u68c0\u7d22\u4fe1\u606f\uff0c\u77e5\u9053\u600e\u4e48\u9a8c\u8bc1\u4fe1\u606f\u6b63\u786e\u6027\uff0c\u77e5\u9053\u600e\u4e48\u5728\u5783\u573e\u573a\u91cc\u9762\u7ffb\u6709\u7528\u4fe1\u606f\u7136\u540e\u5c31\u662f\u62ff\u5230\u4fe1\u606f\u4e4b\u540e\uff0c\u5feb\u901f\u5b66\u4e60\uff0c\u77e5\u9053\u600e\u4e48\u8fd0\u7528\u77e5\u8bc6\u70b9\u3002\u81f3\u5c11\uff0c\u522b\u4eba\u7684\u89e3\u9898\u62a5\u544a(\u4e00\u822c\u6211\u4eec\u79f0\u4e4b\u4e3a WriteUp \u7b80\u79f0 WP)\u4f60\u5f97\u770b\u5f97\u61c2\uff0c\u4f60\u4f1a\u770b\u7740\u8ddf\u7740\u590d\u73b0\u3002</p>"},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#_2","title":"\u6e17\u900f\u76f8\u5173","text":""},{"location":"01-QUICK%20START/00-%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/02-FAQ.html#q_1","title":"Q:","text":"<p>A: </p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html","title":"NISA Wiki\u4f7f\u7528\u6307\u5357","text":"<p>\u4e00\u8d77\u6765\u6784\u5efa NISA Wiki \u4e4b\u524d, \u5148\u6765\u5b66\u4e60\u4e00\u4e0b\u5427</p> <p>\u8fd9\u91cc\u4f1a\u5c55\u793a\u4e00\u4e9b\u793a\u4f8b, \u5982\u679c\u9700\u8981\u8bf7\u7ed3\u5408 Markdown \u6587\u4ef6\u548c\u7f51\u9875\u524d\u7aef\u5c55\u793a\u5bf9\u6bd4\u5b66\u4e60</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html","title":"NISA Wiki \u672c\u5730\u9884\u89c8","text":"<p>\u8bf7\u5728\u540c\u6b65\u5230\u4e91\u7aef\u4ed3\u5e93\u524d, \u5148\u5728\u672c\u5730\u8fdb\u884c\u6d4b\u8bd5</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html#clone-","title":"Clone-\u514b\u9686","text":"<p>\u5728\u786e\u4fdd\u5b89\u88c5 git \u4e0e\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee Github \u540e, \u5728\u4e00\u4e2a\u5408\u9002\u7684\u5b58\u50a8\u8def\u5f84, \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4</p> Bash<pre><code>git clone https://github.com/FJNU-NISA/NISA-Wiki\n</code></pre> <p>\u5982\u679c\u987a\u5229\u7684\u8bdd, \u8fd9\u65f6\u4f1a\u4e0b\u8f7d\u4e0b\u6765\u4e00\u4e2a <code>NISA-Wiki</code> \u547d\u540d\u7684\u6587\u4ef6\u5939</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html#python","title":"\u5b89\u88c5Python\u53ca\u5176\u4f9d\u8d56\u5e93","text":"<p>python \u5b89\u88c5\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86, \u4e0b\u9762\u662f\u5b89\u88c5\u4f9d\u8d56\u7684\u547d\u4ee4</p> Bash<pre><code>pip install -r requestment.txt\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/01-NISA%20Wiki%20%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.html#_1","title":"\u542f\u52a8\u672c\u5730\u9884\u89c8\u670d\u52a1","text":"Bash<pre><code>mkdocs serve\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html","title":"NISA Wiki \u7f16\u5199\u89c4\u8303","text":""},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_1","title":"\u91cd\u70b9\u5fc5\u770b","text":"<ol> <li>\u5c3d\u53ef\u80fd\u4e0d\u8981\u79fb\u52a8\u6587\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784, \u8fd9\u4e2a\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5220\u9664\u6587\u4ef6\u540e\u518d\u65b0\u5efa, \u4f1a\u5bfc\u81f4\u534f\u4f5c\u8bb0\u5f55\u4e22\u5931</li> </ol>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#markdown","title":"Markdown \u89c4\u8303","text":"<p>\u8bf7\u5148\u5c3d\u53ef\u80fd\u7684\u5b66\u4e60 Markdown \u7684\u8bed\u6cd5\u53ca\u89c4\u8303, \u719f\u7ec3\u638c\u63e1\u6587\u672c\u7f16\u8f91\u80fd\u529b, Markdown \u89c4\u8303\u6559\u7a0b\u5982\u4e0b</p> <p>https://markdown.com.cn/</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#wiki","title":"Wiki \u7ed3\u6784\u4ecb\u7ecd","text":""},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_2","title":"\u6574\u4f53\u7ed3\u6784\u4ecb\u7ecd","text":"Text Only<pre><code>\\NISA-WIKI\n|   .gitignore   # git \u5ffd\u7565\u7684\u6587\u4ef6, \u5199\u5165\u8fd9\u91cc\u7684\u6587\u4ef6, git \u4f1a\u5ffd\u7565\u5b83(\u6bd4\u5982\u8fd9\u91cc\u5ffd\u7565\u4e86'.cache'\u7f13\u5b58\u6587\u4ef6\u5939)\n|   LICENSE   # \u56e0\u4e3a\u4e0a\u4f20\u5230\u4e86 github, \u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee, \u4e00\u4e2a\u8bb8\u53ef\u8bc1\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684, \u8fd9\u91cc\u9009\u62e9\u4e86 CC4.0 \u534f\u8bae\n|   mkdocs.yml   # \u672c Wiki \u91c7\u7528 Material for MkDocs \u4f5c\u4e3a\u6846\u67b6, \u8fd9\u4e2a\u6587\u4ef6\u662f\u8be5\u6846\u67b6\u7684\u914d\u7f6e\u6587\u4ef6\n|   README.md   # \u57fa\u672c\u6bcf\u4e2a\u5f00\u6e90\u9879\u76ee\u90fd\u4f1a\u6709\u8be5\u6587\u4ef6, \u57fa\u672c\u4f1a\u5199\u7740\u9879\u76ee\u7684\u7b80\u4ecb\u548c\u4f7f\u7528\n|   requestment.txt   # \u672c\u5730\u9884\u89c8\u524d\u9700\u8981\u5b89\u88c5\u7684Python\u4f9d\u8d56\n\\---.cache  # Material for MkDocs \u542f\u52a8\u672c\u5730\u9884\u89c8\u65f6, \u4f1a\u751f\u6210\u7684\u7f13\u5b58\u6587\u4ef6\n\\---.github  # Github \u76f8\u5173\u7684\u914d\u7f6e\u6587\u4ef6\n|   \\---workflows   # Github \u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\u914d\u7f6e\u6587\u4ef6\u653e\u7f6e\u7684\u76ee\u5f55\n|           ci.yml   # \u6bd4\u5982\u8fd9\u91cc\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5de5\u4f5c\u6d41, \u57fa\u672c\u529f\u80fd\u5c31\u662f\u5c06\u6700\u65b0\u540c\u6b65\u7684 Markdown \u6784\u5efa\u4e3a HTML \u9875\u9762, \u653e\u7f6e\u5728 gh-pages \u5206\u652f\u4e2d\n\\---docs  # \u8fd9\u91cc\u5b58\u653e\u7740\u5c31\u662f Wiki \u7684\u6b63\u6587\u4e86, \u4f5c\u4e3a\u975e\u8fd0\u7ef4\u7528\u6237, \u4f60\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u4e86, \u4e0b\u6587\u5728\u8be6\u7ec6\u5c55\u5f00\n    \\--- \u8fd9\u91cc\u7701\u7565\u4e00\u5806\u6587\u4ef6\u5939\n    \\---assets  # \u9644\u4ef6\u5b58\u653e\u76ee\u5f55, \u4e0b\u6587\u4f1a\u4ecb\u7ecd\u5b83\u7684\u4f7f\u7528\u89c4\u8303\n    |       NISA_LOGO.svg\n    \\---javascripts  # \u4e00\u4e9b\u914d\u7f6e Wiki \u65f6\u9700\u8981\u7528\u5230\u7684 js \u6587\u4ef6, \u975e\u8fd0\u7ef4\u7528\u6237\u65e0\u9700\u5728\u610f\u5b83\u4eec\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#wiki_1","title":"Wiki \u6b63\u6587\u7ed3\u6784\u4ecb\u7ecd","text":"<p>\u53ef\u4ee5\u67e5\u770b\u8be5\u534f\u4f5c\u6307\u5357\u7684\u6587\u4ef6\u5939\u7ed3\u6784\u8fdb\u884c\u53c2\u8003</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_3","title":"\u9876\u90e8\u5bfc\u822a\u680f","text":"<p>\u9876\u90e8\u5bfc\u822a\u680f\u662f\u6839\u636e ./docs/ \u76ee\u5f55\u4e0b\u7684\u7b2c\u4e00\u5c42\u6587\u4ef6\u5939\u51b3\u5b9a\u7684, \u6587\u4ef6\u5939\u540d\u5c31\u662f\u5bfc\u822a\u680f\u663e\u793a\u7684\u540d\u79f0</p> <p>\u56e0\u4e3a\u9ed8\u8ba4\u91c7\u7528\u5b57\u5178\u5e8f\u6392\u5e8f, \u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u6570\u5b57\u524d\u7f00\u65b9\u4fbf\u6392\u5e8f(\u672c\u5bfc\u822a\u680f\u5404\u5b50\u9879\u987a\u5e8f\u4e0e\u5c5e\u6027\u65e0\u5173)</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_4","title":"\u5de6\u4fa7\u5bfc\u822a\u680f","text":"<p>\u8fdb\u5165 <code>\u9876\u90e8\u5bfc\u822a\u680f\u7684\u5b50\u9879\u4e2d</code>, \u5c31\u4f1a\u5728\u9875\u9762\u5de6\u4fa7\u770b\u5230\u4e00\u4e2a\u8be5\u5b50\u9879\u7684\u66f4\u8be6\u7ec6\u7684\u5bfc\u822a\u680f</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_5","title":"\u6587\u4ef6\u5939","text":"<p>\u8fd9\u4e2a\u5bfc\u822a\u680f\u4e5f\u662f\u7531\u6587\u4ef6\u5939\u76ee\u5f55\u7ed3\u6784\u51b3\u5b9a\u7684, \u5e76\u4e14\u6bcf\u4e00\u5c42\u6587\u4ef6\u5939\u540d\u4f1a\u5728\u5bfc\u822a\u680f\u4e2d\u663e\u793a\u51fa\u6765</p> <p>\u5e76\u4e14\u6392\u5e8f\u5b83\u4eec\u7684\u6392\u5e8f\u662f\u7531\u6587\u4ef6\u5939\u540d\u7684\u5b57\u5178\u5e8f\u8fdb\u884c\u6392\u5217, \u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u987a\u5e8f\u53ef\u4ee5\u91c7\u7528 <code>\u4e24\u4f4d\u5341\u8fdb\u5236\u6570\u5b57-\u6587\u4ef6\u5939\u540d</code> \u7684\u5f62\u5f0f\u547d\u540d\u6587\u4ef6\u5939</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_6","title":"\u6587\u4ef6","text":"<p>\u4e0d\u8fc7\u5982\u679c\u662f Markdown \u6587\u4ef6, \u6587\u4ef6\u540d\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u663e\u793a\u5728\u5bfc\u822a\u680f\u4e2d, \u800c\u662f\u663e\u793a Markdown \u6587\u4ef6\u7684\u4e00\u7ea7\u6807\u9898, \u5982\u679c\u6ca1\u6709\u4e00\u7ea7\u6807\u9898\u7684\u8bdd, \u624d\u4f1a\u663e\u793a\u6587\u4ef6\u540d</p> <p>\u4f46\u662f Markdown \u6587\u4ef6\u540d\u79f0\u5374\u51b3\u5b9a\u7740\u5bfc\u822a\u680f\u7684\u6392\u5217\u987a\u5e8f, \u6240\u4ee5\u5982\u679c\u8981\u6392\u5e8f\u7684\u8bdd, \u4e5f\u662f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 <code>\u4e24\u4f4d\u5341\u8fdb\u5236\u6570\u5b57-\u6587\u4ef6\u540d</code> \u7684\u5f62\u5f0f\u547d\u540d\u8fdb\u884c\u6392\u5e8f</p> <p>\u5c3d\u53ef\u80fd\u4fdd\u6301 Markdown \u6587\u4ef6\u7684\u4e00\u7ea7\u6807\u9898\u5c31\u662f\u6587\u4ef6\u540d(\u4e00\u7ea7\u6807\u9898\u53ef\u4ee5\u7701\u7565\u6570\u5b57\u524d\u7f00)</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#_7","title":"\u53f3\u4fa7\u76ee\u5f55","text":"<p>\u53f3\u4fa7\u7684\u76ee\u5f55\u662f\u6839\u636e Markdown \u7684 # \u6807\u9898\u751f\u6210\u7684, \u76ee\u524d\u8bbe\u7f6e\u7684\u6700\u5927\u6df1\u5ea6\u662f 5 \u5c42</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#indexmd","title":"index.md","text":"<p>\u5728\u6bcf\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a <code>index.md</code> \u6587\u4ef6, \u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u4f1a\u4f5c\u4e3a\u70b9\u51fb\u8be5\u6587\u4ef6\u5939\u5bfc\u822a\u680f\u65f6\u65f6, \u4f18\u5148\u663e\u793a\u7684\u5185\u5bb9</p> <p>\u5982\u679c\u6ca1\u6709 <code>index.md</code> \u6587\u4ef6\u7684\u8bdd, \u70b9\u51fb\u8be5\u6587\u4ef6\u5939\u5bfc\u822a\u680f\u65f6, \u5219\u4f1a\u8df3\u8f6c\u5230\u8be5\u6587\u4ef6\u5939\u4e2d\u5b57\u5178\u5e8f\u6392\u5e8f\u7684\u7b2c\u4e00\u4e2a Markdown \u6587\u4ef6</p> <p>\u6ce8\u610f: index.md \u6587\u4ef6\u4e2d, \u8bf7\u7f16\u5199\u8be5\u6587\u4ef6\u5939\u5185\u5bb9\u7684\u603b\u7ed3\u6027\u5185\u5bb9, \u8bf7\u4e0d\u8981\u7f16\u5199\u957f\u7bc7\u6b63\u6587</p> <p>\u5982\u679c\u6587\u4ef6\u5939\u5185\u53ea\u6709\u4e00\u7bc7\u6587\u7ae0, \u53ef\u4ee5\u9009\u62e9\u4e0d\u521b\u5efa <code>index.md</code> \u6587\u4ef6, \u4ec5\u4fdd\u7559\u4e00\u7bc7\u6b63\u6587 Markdown, \u6216\u8005\u53d6\u6d88\u6587\u4ef6\u5939, \u76f4\u63a5\u5c06 Markdown \u6587\u4ef6\u76f4\u63a5\u653e\u5728\u4e0a\u4e00\u5c42\u6587\u4ef6\u5939\u4e2d</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/02-NISA%20Wiki%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83.html#assets","title":"assets \u6587\u4ef6\u5939","text":"<p>\u5982\u679c\u9700\u8981\u5728\u6b63\u6587\u4e2d\u6dfb\u52a0\u56fe\u7247, \u5177\u4f53\u8bed\u6cd5\u8bf7\u53c2\u770b Markdown \u8bed\u6cd5\u6587\u6863</p> <p>\u800c <code>\u56fe\u7247\u7684\u6e90\u6587\u4ef6</code> \u8bf7\u653e\u7f6e\u5728\u4e0e <code>\u5f15\u7528\u5176\u7684 Markdown \u6587\u4ef6</code> \u540c\u4e00\u5c42\u76ee\u5f55\u7684 <code>assets</code> \u6587\u4ef6\u5939\u4e2d, \u800c\u4e0d\u662f\u5168\u90e8\u653e\u7f6e\u5728 <code>docs</code> \u76ee\u5f55\u7684\u6587\u4ef6\u5939\u4e2d</p> <p>\u5982\u679c\u9700\u8981\u5f15\u7528\u5728\u7ebf\u56fe\u7247, \u6700\u597d\u5c06\u5176\u4e0b\u8f7d\u4fdd\u5b58\u540e\u5f15\u7528, \u4ee5\u514d\u94fe\u63a5\u5931\u6548, \u5bfc\u81f4\u56fe\u7247\u7f3a\u5931</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/03-NISA%20Wiki%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html","title":"NISA Wiki \u5e38\u89c1\u95ee\u9898","text":""},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/03-NISA%20Wiki%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html#latex","title":"\u6709\u5e8f\u5217\u8868\u4e2d\u5d4c\u5957 Latex \u8bed\u6cd5","text":"<p>\u7531\u4e8e\u4e00\u4e9b\u95ee\u9898\u65e0\u6cd5\u89e3\u51b3, \u53ea\u80fd\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u5b9e\u73b0</p> <ol> <li>\u5206\u6570\uff1a \\[ \\frac{a + b}{c} \\] </li> <li>\u5f00\u65b9\uff1a \\[ \\sqrt{a^2 + b^2} \\] </li> </ol> <p>\u8bed\u6cd5\u539f\u6587\uff1a</p> Text Only<pre><code>1. \u5206\u6570\uff1a\n&gt; $$\n&gt; \\frac{a + b}{c}\n&gt; $$\n2. \u5f00\u65b9\uff1a\n&gt; $$\n&gt; \\sqrt{a^2 + b^2}\n&gt; $$\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html","title":"NISA Wiki \u540c\u6b65\u89c4\u8303","text":"<p>\u5982\u679c\u4f60\u662f\u4f5c\u4e3a NISA \u7684\u4e00\u5458, \u4f60\u9996\u5148\u9700\u8981\u7533\u8bf7\u52a0\u5165 NISA \u7684 Github \u7ec4\u7ec7, \u624d\u80fd\u7f16\u8f91\u8be5\u4ed3\u5e93. \u5f53\u7136, \u5982\u679c\u4f60\u4e0d\u662f\u7ec4\u7ec7\u4e00\u5458, \u6211\u4eec\u4e5f\u5f88\u4e50\u610f\u4f60\u4eec\u63d0 PR</p> <p>\u672c\u6587\u4ee5 Windows \u4e0b, \u4f7f\u7528 VScode \u4e3a\u73af\u5883\u6765\u6f14\u793a</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#clone-","title":"Clone-\u514b\u9686","text":"<p>\u5728\u786e\u4fdd\u5b89\u88c5 git \u4e0e\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee Github \u540e, \u5728\u4e00\u4e2a\u5408\u9002\u7684\u5b58\u50a8\u8def\u5f84, \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4</p> Bash<pre><code>git clone https://github.com/FJNU-NISA/NISA-Wiki\n</code></pre> <p>\u5982\u679c\u987a\u5229\u7684\u8bdd, \u8fd9\u65f6\u4f1a\u4e0b\u8f7d\u4e0b\u6765\u4e00\u4e2a <code>NISA-Wiki</code> \u547d\u540d\u7684\u6587\u4ef6\u5939</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#-pull","title":"\u62c9\u53d6-Pull","text":"<p>\u5982\u679c\u4f60\u521a\u521a\u514b\u9686\u4e0b\u4ed3\u5e93, \u90a3\u4e48\u4f60\u672c\u5730\u7684 Wiki \u7248\u672c\u4e0d\u51fa\u610f\u5916\u5c31\u662f\u6700\u65b0\u7684(\u4e0d\u6392\u9664\u4f60\u521a\u514b\u9686\u5c31\u6709\u4eba\u66f4\u65b0\u4ed3\u5e93), \u90a3\u4e48\u4f60\u53ef\u4ee5\u4e0d\u7528\u5728\u6267\u884c\u62c9\u53d6\u64cd\u4f5c</p> <p>\u4f46\u662f\u5f53\u4f60\u957f\u65f6\u95f4\u6ca1\u6709\u540c\u6b65\u4f60\u7684\u672c\u5730 Wiki, \u90a3\u5e94\u8be5\u5148\u6267\u884c Pull \u6307\u4ee4, \u4ee5\u786e\u4fdd\u4f60\u7684\u672c\u5730 Wiki \u4e0e\u4e91\u7aef Wiki \u7248\u672c\u7edf\u4e00</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#_1","title":"\u547d\u4ee4\u64cd\u4f5c","text":"<p>\u4e0b\u9762\u662f\u4e00\u6761\u7b80\u5355\u7684 Pull \u6307\u4ee4\u4f8b\u5b50, \u4f60\u53ef\u4ee5\u76f4\u63a5\u5bf9\u672c\u4ed3\u5e93\u6267\u884c, \u4ee5\u540c\u6b65\u6700\u65b0\u7684\u7248\u672c(\u5982\u679c\u60f3\u5b66\u4e60\u66f4\u8be6\u7ec6\u7684 Git \u547d\u4ee4\u53ef\u4ee5\u524d\u5f80\u76f8\u5e94\u7684\u9875\u9762\u5b66\u4e60)</p> Bash<pre><code>git pull origin main\n</code></pre>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#vscode","title":"VScode \u64cd\u4f5c","text":"<p>\u5f53\u7136\u5728 VScode \u4e2d\u4e5f\u662f\u53ef\u4ee5\u56fe\u5f62\u5316\u64cd\u4f5c\u7684, \u5982\u4e0b\u56fe\u6240\u793a</p> <p></p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#-write","title":"\u7f16\u5199-Write","text":"<p>\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528 VScode \u4f5c\u4e3a\u7f16\u8f91\u5de5\u5177, \u5176\u6709\u8f83\u597d\u7f16\u5199 Markdown \u548c \u64cd\u4f5c git \u4ed3\u5e93\u7684\u73af\u5883, \u4e0b\u6587</p> <p>\u5177\u4f53\u5185\u5bb9\u89c4\u8303\u8bf7\u770b NISA Wiki \u7f16\u5199\u89c4\u8303</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#-push","title":"\u4e0a\u4f20-Push","text":"<p>\u5f53\u4f60\u7f16\u5199\u5b8c Wiki \u540e, \u60f3\u8981\u540c\u6b65\u5230\u4e91\u7aef\u5c31\u9700\u8981\u4f7f\u7528 Push \u547d\u4ee4</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#_2","title":"\u547d\u4ee4\u64cd\u4f5c","text":"<p>\u5982\u4e0b, \u8fd9\u4e2a\u662f\u4e00\u4e2a\u7b80\u5355\u7684 push \u547d\u4ee4, \u53ef\u4ee5\u76f4\u63a5\u5c06\u672c\u5730\u7684\u6587\u4ef6\u540c\u6b65\u5230\u4e91\u7aef\u4e2d(\u5982\u679c\u60f3\u5b66\u4e60\u66f4\u8be6\u7ec6\u7684 Git \u547d\u4ee4\u53ef\u4ee5\u524d\u5f80\u76f8\u5e94\u7684\u9875\u9762\u5b66\u4e60)</p> Bash<pre><code>git push origin main\n</code></pre> <p>\u76f4\u63a5\u8fd0\u884c\u8fd9\u6761\u547d\u4ee4, \u4f60\u4f1a\u5f97\u5230 <code>Everything up-to-date</code> \u7684\u56de\u663e</p> <p>\u4f60\u4ee5\u4e3a\u5168\u90e8\u540c\u6b65\u4e0a\u53bb\u4e86? \u5176\u5b9e\u5e76\u6ca1\u6709, \u56e0\u4e3a\u5728 push \u4e4b\u524d, \u4f60\u8fd8\u9700\u8981\u8fd0\u884c add \u548c commit \u547d\u4ee4</p> <p>push \u53ea\u662f\u628a\u5f53\u524d\u672c\u5730\u7684 git \u8282\u70b9\u540c\u6b65\u4e91, \u4f46\u662f\u6ca1\u6709\u8fd0\u884c add \u548c commit \u547d\u4ee4\u4e4b\u524d, \u5e76\u672a\u6709\u65b0\u7684 git \u8282\u70b9</p> <p>\u6240\u4ee5\u8981\u5148\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4, \u5efa\u7acb git \u8282\u70b9</p> Bash<pre><code>git add \u8981\u6dfb\u52a0\u4fee\u6539\u7684\u6587\u4ef6\u540d1\n... \u7701\u7565\u591a\u4e2aadd\u547d\u4ee4\ngit add \u8981\u6dfb\u52a0\u4fee\u6539\u7684\u6587\u4ef6\u540dn\n\ngit commit -m \"\u63d0\u4ea4\u4fe1\u606f\"\n</code></pre> <p>\u5982\u679c\u60f3\u76f4\u63a5 add \u6240\u6709\u7684\u4fee\u6539\u6587\u4ef6, \u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c <code>git add .</code></p> <p>\u5bf9\u4e8e <code>\u63d0\u4ea4\u4fe1\u606f</code> \u586b\u5199\u7684\u5185\u5bb9\u5219\u662f\u5bf9\u4e0a\u8ff0 add \u6587\u4ef6\u4fee\u6539\u4e86\u4ec0\u4e48\u5185\u5bb9\u7684\u603b\u7ed3</p> <p>\u5728 add \u548c commit \u4e4b\u540e, \u5c31\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c push \u547d\u4ee4\u4e86</p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#vscode_1","title":"VScode \u64cd\u4f5c","text":"<p>\u800c\u8fd9\u4e9b\u547d\u4ee4, \u5982\u679c\u5728 VSCode \u4e2d\u5c06\u4f1a\u7279\u522b\u7b80\u5355</p> <p>add \u547d\u4ee4\u76f8\u5f53\u4e8e\u70b9\u51fb\u4e0b\u56fe\u4f4d\u7f6e(\u5982\u679c\u662f\u8981\u5355\u72ec add \u4e00\u4e2a\u6587\u4ef6, \u5219\u70b9\u51fb\u6587\u4ef6\u7684 <code>+</code> \u5373\u53ef)</p> <p></p> <p>\u7136\u540e\u5c31\u662f commit \u547d\u4ee4</p> <p></p> <p>\u6700\u540e\u5c31\u662f\u4e0a\u4f20\u4e91\u7aef, \u6ce8\u610f\u4e91\u6735\u7684\u6807\u5fd7, \u662f\u5f53\u65f6\u5df2\u7ecf\u4e0a\u4f20\u4e91\u7aef\u7684\u4f4d\u7f6e</p> <p></p>"},{"location":"01-QUICK%20START/01-NISA%20Wiki%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/04-NISA%20Wiki%20%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html#_3","title":"\u6700\u540e\u63d0\u793a","text":"<p>\u8bf7\u9075\u5b88\u4ee5\u4e0b\u884c\u4e3a:</p> <ol> <li>\u4e0d\u8981\u9891\u7e41\u7684 commit, \u5c3d\u53ef\u80fd\u786e\u4fdd\u4e00\u6b21\u5b8c\u6574\u7684\u4fee\u6539\u540e\u5728\u8fdb\u884c commit</li> <li>commit \u7684\u6d88\u606f\u8bf7\u8ba4\u771f\u586b\u5199, \u4e0d\u8981\u586b\u5199\u65e0\u610f\u4e49\u7684\u5185\u5bb9</li> </ol>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/index.html","title":"AI\u5927\u6a21\u578b\u4f7f\u7528\u6280\u5de7","text":"<p>\u5408\u7406\u7684\u4f7f\u7528AI\uff0c\u53ef\u4ee5\u6781\u5927\u7684\u63d0\u9ad8\u5b66\u4e60\u6548\u7387</p>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B8%B8%E8%A7%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%8E%A8%E8%8D%90.html","title":"\u5e38\u89c1\u7684\u5927\u8bed\u8a00\u6a21\u578b\u63a8\u8350","text":"<p>AI \u5927\u8bed\u8a00\u6a21\u578b\u53d1\u5c55\u8fed\u4ee3\u5f88\u5feb, \u6ca1\u529e\u6cd5\u8bf4\u54ea\u5bb6\u5927\u8bed\u8a00\u6a21\u578b\u6700\u5f3a, \u5e76\u4e14\u5404\u5bb6\u5927\u8bed\u8a00\u6a21\u578b\u5404\u6709\u4f18\u52a3, \u627e\u5230\u81ea\u5df1\u6700\u559c\u6b22\u7684\u5c31\u597d, \u4e0b\u6587\u7b80\u5355\u5217\u4e3e\u4e00\u4e9b, \u540e\u7eed\u518d\u7ec6\u8bf4\u5404\u4e2a\u7684\u4f18\u52a3</p>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B8%B8%E8%A7%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%8E%A8%E8%8D%90.html#_2","title":"\u56fd\u5185","text":"<p>Deepseek</p> <p>\u8c46\u5305</p>"},{"location":"01-QUICK%20START/02-AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B8%B8%E8%A7%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E6%8E%A8%E8%8D%90.html#_3","title":"\u56fd\u5916","text":"<p>ChatGPT</p> <p>Google Gemini &amp; Google AI Studio</p> <p>claude</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html","title":"\u5e38\u7528\u5de5\u5177\u4f7f\u7528\u6307\u5357","text":"<p>\u8fd9\u91cc\u653e\u4e00\u4e9b\u5e38\u89c1\u5de5\u5177\u7684\u6307\u5357\u5427</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/010%20Editor/index.html","title":"010 Editor","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/010%20Editor/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>010 Editor \u662f\u7531 SweetScape Software \u5f00\u53d1\u7684\u4e00\u6b3e\u5f3a\u5927\u7684\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u5206\u6790\u3001\u53cd\u5411\u5de5\u7a0b\u3001\u8c03\u8bd5\u4ee5\u53ca\u6570\u636e\u6062\u590d\u7b49\u9886\u57df</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/010%20Editor/index.html#_2","title":"\u4e0b\u8f7d","text":"<p>\u5b98\u7f51\u4e0b\u8f7d\u5730\u5740: https://www.sweetscape.com/010editor/</p> <p>\u5b66\u4e60\u7248\u8865\u4e01: https://www.52pojie.cn/thread-1821946-1-1.html</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/BurpSuite/index.html","title":"BurpSuite\u4f7f\u7528\u6307\u5357","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/BurpSuite/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>Burp Suite \u662f\u7531 PortSwigger \u516c\u53f8\u5f00\u53d1\u7684\u4e00\u6b3eWeb \u5b89\u5168\u6d4b\u8bd5\u5de5\u5177\u5957\u4ef6\uff0c\u5e7f\u6cdb\u7528\u4e8e\u6e17\u900f\u6d4b\u8bd5\u3001\u5b89\u5168\u5ba1\u8ba1\u3001\u6f0f\u6d1e\u626b\u63cf\u7b49\u9886\u57df\uff0c\u7279\u522b\u9002\u5408\u6d4b\u8bd5 Web \u5e94\u7528\u7684\u5b89\u5168\u6027</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/BurpSuite/index.html#_2","title":"\u4e0b\u8f7d","text":"<p>\u5b66\u4e60\u7248\u4e0b\u8f7d\u5730\u5740: https://www.52pojie.cn/thread-2005151-1-1.html</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Github%E4%BD%BF%E7%94%A8.html","title":"Github \u4f7f\u7528","text":"<p>\u5b98\u7f51\u5730\u5740: https://github.com/</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Github%E4%BD%BF%E7%94%A8.html#_1","title":"\u6ce8\u518c","text":"<p>\u53c2\u8003\u6587\u7ae0 https://www.cnblogs.com/moshuying/p/15367181.html</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html","title":"Git\u57fa\u672c\u4f7f\u7528","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#git_1","title":"\u5b89\u88c5 Git","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#windows","title":"Windows \u4e0a\u5b89\u88c5","text":"<p>CSDN\u4e0a\u7684\u8be6\u7ec6\u6559\u7a0b</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#git_2","title":"\u914d\u7f6e Git","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_1","title":"\u8bbe\u7f6e\u90ae\u7bb1\u548c\u7528\u6237\u540d","text":"Bash<pre><code>git config --global user.name \u7528\u6237\u540d\ngit config --global user.email \u90ae\u7bb1\n</code></pre> <p>\u5176\u4e2d <code>--global</code> \u4ee3\u8868\u5168\u5c40\u914d\u7f6e, \u5982\u679c\u4e0d\u8bbe\u7f6e, \u53ea\u5bf9\u5f53\u524d\u6240\u5904\u4ed3\u5e93\u751f\u6548</p> <p>\u5982\u679c\u60f3\u628a\u4ed3\u5e93\u540c\u6b65\u5230 Github \u4e0a\u540e, \u53ef\u4ee5\u6b63\u786e\u663e\u793a\u81ea\u5df1\u8d26\u53f7\u548c\u5934\u50cf, \u9700\u8981\u6b63\u786e\u8bbe\u7f6e\u4e0e Github \u76f8\u540c\u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1</p> <p>\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u81ea\u5df1\u7684\u90ae\u7bb1, \u5728\u540c\u6b65\u4ed3\u5e93\u65f6, Github \u4f1a\u53d1\u51fa\u8b66\u544a, \u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u628a\u90ae\u7bb1\u6539\u4e3a **@users.noreply.github.com \u7684\u90ae\u7bb1, \u53ef\u4ee5\u524d\u5f80 https://github.com/settings/emails, \u67e5\u770b\u81ea\u5df1\u5bf9\u5e94\u7684\u5730\u5740, \u4ee5\u8d77\u5230\u4fdd\u62a4\u9690\u79c1\u7684\u4f5c\u7528</p> <p></p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#git_3","title":"Git \u5e38\u89c1\u4f7f\u7528\u547d\u4ee4","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_2","title":"\u521d\u59cb\u5316\u4ed3\u5e93","text":"<p>\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684 Git \u4ed3\u5e93\uff1a</p> Bash<pre><code>git init\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_3","title":"\u6dfb\u52a0\u6587\u4ef6\u8fdb\u6682\u5b58\u533a","text":"<p>\u5c06\u6587\u4ef6\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff08staging area\uff09\uff1a</p> Bash<pre><code># \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\ngit add \u6587\u4ef6\u540d\n\n# \u6dfb\u52a0\u6240\u6709\u4fee\u6539\u7684\u6587\u4ef6\ngit add .\n\n# \u6dfb\u52a0\u6240\u6709\u6587\u4ef6\uff08\u5305\u62ec\u65b0\u6587\u4ef6\u548c\u5df2\u5220\u9664\u7684\u6587\u4ef6\uff09\ngit add -A\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_4","title":"\u63d0\u4ea4\u6682\u5b58\u533a\u6587\u4ef6","text":"<p>\u5c06\u6682\u5b58\u533a\u7684\u6587\u4ef6\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\uff1a</p> Bash<pre><code># \u63d0\u4ea4\u5e76\u6dfb\u52a0\u63d0\u4ea4\u4fe1\u606f\ngit commit -m \"\u63d0\u4ea4\u4fe1\u606f\"\n\n# \u6dfb\u52a0\u5e76\u63d0\u4ea4\uff08\u8df3\u8fc7\u6682\u5b58\u533a\uff09\ngit commit -am \"\u63d0\u4ea4\u4fe1\u606f\"\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_5","title":"\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6","text":"<p>\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u83b7\u53d6\u6700\u65b0\u4ee3\u7801\uff1a</p> Bash<pre><code># \u62c9\u53d6\u5e76\u5408\u5e76\u8fdc\u7a0b\u5206\u652f\ngit pull\n\n# \u6307\u5b9a\u8fdc\u7a0b\u4ed3\u5e93\u548c\u5206\u652f\ngit pull origin main\n\n# \u83b7\u53d6\u8fdc\u7a0b\u66f4\u65b0\u4f46\u4e0d\u5408\u5e76\ngit fetch\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_6","title":"\u63a8\u9001\u81f3\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u5c06\u672c\u5730\u63d0\u4ea4\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff1a</p> Bash<pre><code># \u63a8\u9001\u5230\u9ed8\u8ba4\u8fdc\u7a0b\u5206\u652f\ngit push\n\n# \u6307\u5b9a\u8fdc\u7a0b\u4ed3\u5e93\u548c\u5206\u652f\ngit push origin main\n\n# \u9996\u6b21\u63a8\u9001\u5e76\u8bbe\u7f6e\u4e0a\u6e38\u5206\u652f\ngit push -u origin main\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_7","title":"\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u5173\u8054\u672c\u5730\u4ed3\u5e93\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\uff1a</p> Bash<pre><code># \u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93\ngit remote add origin \u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\n\n# \u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93\ngit remote -v\n\n# \u4fee\u6539\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\ngit remote set-url origin \u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_8","title":"\u5176\u4ed6\u5e38\u7528\u547d\u4ee4","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_9","title":"\u67e5\u770b\u72b6\u6001\u548c\u5386\u53f2","text":"Bash<pre><code># \u67e5\u770b\u4ed3\u5e93\u72b6\u6001\ngit status\n\n# \u67e5\u770b\u63d0\u4ea4\u5386\u53f2\ngit log\n\n# \u67e5\u770b\u7b80\u6d01\u7684\u63d0\u4ea4\u5386\u53f2\ngit log --oneline\n\n# \u67e5\u770b\u6587\u4ef6\u5dee\u5f02\ngit diff\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_10","title":"\u5206\u652f\u64cd\u4f5c","text":"Bash<pre><code># \u67e5\u770b\u6240\u6709\u5206\u652f\ngit branch -a\n\n# \u521b\u5efa\u65b0\u5206\u652f\ngit branch \u5206\u652f\u540d\n\n# \u5207\u6362\u5206\u652f\ngit checkout \u5206\u652f\u540d\n\n# \u521b\u5efa\u5e76\u5207\u6362\u5230\u65b0\u5206\u652f\ngit checkout -b \u5206\u652f\u540d\n\n# \u5408\u5e76\u5206\u652f\ngit merge \u5206\u652f\u540d\n\n# \u5220\u9664\u5206\u652f\ngit branch -d \u5206\u652f\u540d\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#_11","title":"\u64a4\u9500\u64cd\u4f5c","text":"Bash<pre><code># \u64a4\u9500\u5de5\u4f5c\u533a\u7684\u4fee\u6539\ngit checkout -- \u6587\u4ef6\u540d\n\n# \u64a4\u9500\u6682\u5b58\u533a\u7684\u4fee\u6539\ngit reset HEAD \u6587\u4ef6\u540d\n\n# \u64a4\u9500\u6700\u8fd1\u4e00\u6b21\u63d0\u4ea4\uff08\u4fdd\u7559\u4fee\u6539\uff09\ngit reset --soft HEAD^\n\n# \u64a4\u9500\u6700\u8fd1\u4e00\u6b21\u63d0\u4ea4\uff08\u4e0d\u4fdd\u7559\u4fee\u6539\uff09\ngit reset --hard HEAD^\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Yakit/index.html","title":"Yakit","text":""},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Yakit/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>Yakit \u662f\u7531 Yaklang \u56e2\u961f\u5f00\u53d1\u7684\u4e00\u6b3e\u9762\u5411\u5b89\u5168\u6d4b\u8bd5\u4eba\u5458\u7684 \u7f51\u7edc\u534f\u8bae\u52a8\u6001\u4ea4\u4e92\u5e73\u53f0\uff0c\u4e3b\u8981\u7528\u4e8e\u652f\u6301\u6f0f\u6d1e\u9a8c\u8bc1\u4e0e\u5229\u7528\u3002\u5b83\u7684\u76ee\u6807\u662f\u63d0\u9ad8\u7f51\u7edc\u534f\u8bae\u5c42\u9762\u7684\u6d4b\u8bd5\u6548\u7387\uff0c\u7279\u522b\u662f\u5728\u9762\u5bf9\u5404\u79cd\u5b9a\u5236\u534f\u8bae\u3001\u79c1\u6709\u534f\u8bae\u6216\u9700\u8981\u7cbe\u7ec6\u63a7\u5236\u62a5\u6587\u7684\u573a\u666f\u4e0b\u3002\u4e0e BurpSuite \u5f02\u66f2\u540c\u5de5\u4e4b\u5904</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Yakit/index.html#_2","title":"\u4e0b\u8f7d","text":"<p>\u5b98\u7f51: https://www.yaklang.com/</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html","title":"Markdown \u57fa\u672c\u8bed\u6cd5","text":"<p>Markdown \u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u6807\u8bb0\u8bed\u8a00\uff0c\u5e38\u7528\u4e8e\u7f16\u5199\u8bf4\u660e\u6587\u6863\u3001\u6280\u672f\u7b14\u8bb0\u3001\u535a\u5ba2\u7b49\u3002\u5b83\u8bed\u6cd5\u7b80\u6d01\u3001\u6613\u8bfb\u6613\u5199\uff0c\u9002\u5408\u5feb\u901f\u4e66\u5199\u7ed3\u6784\u5316\u5185\u5bb9\u3002</p> <p>\u6700\u65b9\u4fbf\u7684\u7f16\u8f91\u5668\u5c31\u662fvscode\uff0c\u65b0\u5efa\u4e2a <code>.md</code> \u6587\u4ef6\u5c31\u884c</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_1","title":"\u6807\u9898","text":"<p>\u4f7f\u7528 <code>#</code> \u8868\u793a\u6807\u9898\uff0c\u6700\u591a\u652f\u6301\u516d\u7ea7\u6807\u9898\u3002</p> Markdown<pre><code># \u4e00\u7ea7\u6807\u9898\n## \u4e8c\u7ea7\u6807\u9898\n### \u4e09\u7ea7\u6807\u9898\n#### \u56db\u7ea7\u6807\u9898\n##### \u4e94\u7ea7\u6807\u9898\n###### \u516d\u7ea7\u6807\u9898\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_2","title":"\u6bb5\u843d\u4e0e\u6362\u884c","text":"<p>\u6bb5\u843d\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002 \u884c\u672b\u52a0\u4e24\u4e2a\u7a7a\u683c\u53ef\u4ee5\u6362\u884c\u3002</p> Markdown<pre><code>\u8fd9\u662f\u7b2c\u4e00\u884c  \n\u8fd9\u662f\u7b2c\u4e8c\u884c\uff08\u901a\u8fc7\u4e24\u4e2a\u7a7a\u683c\u6362\u884c\uff09\n\n\u8fd9\u662f\u7b2c\u4e09\u884c\uff08\uff09\u901a\u8fc7\u7a7a\u884c\u5207\u6362\u6bb5\u843d\n</code></pre> <p>\u8fd9\u662f\u7b2c\u4e00\u884c \u8fd9\u662f\u7b2c\u4e8c\u884c\uff08\u901a\u8fc7\u4e24\u4e2a\u7a7a\u683c\u6362\u884c\uff09</p> <p>\u8fd9\u662f\u7b2c\u4e09\u884c\uff08\uff09\u901a\u8fc7\u7a7a\u884c\u5207\u6362\u6bb5\u843d</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_3","title":"\u5f3a\u8c03\uff08\u52a0\u7c97 / \u659c\u4f53\uff09","text":"Markdown<pre><code>*\u659c\u4f53* \u6216 _\u659c\u4f53_  \n**\u52a0\u7c97** \u6216 __\u52a0\u7c97__  \n***\u52a0\u7c97\u659c\u4f53***\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p>\u659c\u4f53 \u6216 \u659c\u4f53 \u52a0\u7c97 \u6216 \u52a0\u7c97 \u52a0\u7c97\u659c\u4f53</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_4","title":"\u5f15\u7528","text":"<p>Markdown<pre><code>&gt; \u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6bb5\u843d\n&gt;&gt; \u53ef\u4ee5\u5d4c\u5957\u5f15\u7528\n</code></pre> \u6548\u679c\uff1a</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6bb5\u843d</p> <p>\u53ef\u4ee5\u5d4c\u5957\u5f15\u7528</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_5","title":"\u4ee3\u7801\u5757","text":"<p>\u884c\u5185\u4ee3\u7801\uff1a</p> <p>Markdown<pre><code>\u4f7f\u7528\u5355\u5f15\u53f7`\u62ec\u4f4f\u4f60\u9700\u8981\u7684\u90e8\u5206`\n</code></pre> \u6548\u679c\uff1a</p> <p>\u4f7f\u7528\u5355\u5f15\u53f7<code>\u62ec\u4f4f\u4f60\u9700\u8981\u7684\u90e8\u5206</code></p> <p>\u591a\u884c\u4ee3\u7801\u5757\uff1a</p> <p>\u4f7f\u7528\u4e09\u4e2a\u53cd\u5f15\u53f7\u5305\u88f9\u4ee3\u7801\uff0c\u53ef\u4ee5\u6307\u5b9a\u8bed\u8a00\u9ad8\u4eae\u3002</p> <p>```py</p> <p>print(\"Hello, Markdown!\")</p> <p>```</p> Python<pre><code>print(\"Hello, Markdown!\")\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_6","title":"\u5217\u8868","text":"<p>\u65e0\u5e8f\u5217\u8868\uff0c\u8fd9\u4e09\u8005\u5747\u53ef\uff1a</p> Markdown<pre><code>- \u9879\u76eeA\n* \u9879\u76eeB\n+ \u9879\u76eeC\n</code></pre> <ul> <li>\u9879\u76eeA</li> <li>\u9879\u76eeB</li> <li>\u9879\u76eeC</li> </ul> <p>\u6709\u5e8f\u5217\u8868\uff1a</p> Markdown<pre><code>1. \u7b2c\u4e00\u9879\n2. \u7b2c\u4e8c\u9879\n3. \u7b2c\u4e09\u9879\n</code></pre> <ol> <li>\u7b2c\u4e00\u9879</li> <li>\u7b2c\u4e8c\u9879</li> <li>\u7b2c\u4e09\u9879</li> </ol>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_7","title":"\u5206\u5272\u7ebf","text":"<p>\u4f7f\u7528\u4e09\u4e2a\u6216\u4ee5\u4e0a\u7684 -\u3001* \u6216 _ \u4f5c\u4e3a\u5206\u9694\u7ebf\uff1a</p> Markdown<pre><code>---\n***\n___\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_8","title":"\u94fe\u63a5","text":"<p>\u884c\u5185\u5f0f\u94fe\u63a5\uff1a</p> Markdown<pre><code>[NISA-WIKI](https://fjnu-nisa.github.io/NISA-Wiki)\n</code></pre> <p>NISA-WIKI</p> <p>\u5e26\u6807\u9898\u94fe\u63a5\uff08\u9f20\u6807\u60ac\u6d6e\u63d0\u793a\uff09\uff1a</p> Markdown<pre><code>[NISA-WIKI](https://fjnu-nisa.github.io/NISA-Wiki \"\u8fd9\u662fNISA-WIKI\")\n</code></pre> <p>NISA-WIKI</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_9","title":"\u56fe\u7247","text":"<p>\u8bed\u6cd5\u7c7b\u4f3c\u94fe\u63a5\uff0c\u53ea\u662f\u5728\u524d\u9762\u52a0 !</p> Markdown<pre><code>![\u56fe\u7247\u63cf\u8ff0](https://example.com/image.png)\n</code></pre>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_10","title":"\u8868\u683c","text":"Markdown<pre><code>| \u59d3\u540d | \u5b66\u53f7 | \u6210\u7ee9 |\n| :--: | :--: | ---: |\n| \u5f20\u4e09 | 1001 |  90  |\n| \u674e\u56db | 1002 |  85  |\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> \u59d3\u540d \u5b66\u53f7 \u6210\u7ee9 \u5f20\u4e09 1001 90 \u674e\u56db 1002 85 <p>\u8bf4\u660e\uff1a</p> <p>:--: \u8868\u793a\u5c45\u4e2d</p> <p>:-- \u8868\u793a\u5de6\u5bf9\u9f50</p> <p>--: \u8868\u793a\u53f3\u5bf9\u9f50</p>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_11","title":"\u4efb\u52a1\u5217\u8868","text":"Markdown<pre><code>- [x] \u5b8c\u6210CTF\u9898\u76ee\n- [ ] \u9605\u8bfb\u6e17\u900f\u6d4b\u8bd5\u6587\u6863\n- [ ] \u63d0\u4ea4\u6f0f\u6d1e\u62a5\u544a\n</code></pre> <p>\u6548\u679c\uff1a</p> <ul> <li>[x] \u5b8c\u6210CTF\u9898\u76ee</li> <li>[ ] \u9605\u8bfb\u6e17\u900f\u6d4b\u8bd5\u6587\u6863</li> <li>[ ] \u63d0\u4ea4\u6f0f\u6d1e\u62a5\u544a</li> </ul>"},{"location":"01-QUICK%20START/03-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/index.html#_12","title":"\u8f6c\u4e49\u5b57\u7b26","text":"<p>\u4ee5\u4e0b\u5b57\u7b26\u5982\u9700\u663e\u793a\u539f\u6837\uff0c\u9700\u8981\u52a0\u53cd\u659c\u6760  \u8fdb\u884c\u8f6c\u4e49\uff1a</p> Markdown<pre><code>\\* \\_ \\` \\# \\+ \\- \\. \\!\n</code></pre> <p>* _ ` # + - . !</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/Github%E5%AD%A6%E7%94%9F%E5%8C%85%E7%94%B3%E8%AF%B7%E6%8C%87%E5%8D%97.html","title":"Github\u5b66\u751f\u5305\u7533\u8bf7\u6307\u5357","text":"<p>Github\u5b66\u751f\u5305\u662f\u4ec0\u4e48?</p> <p>GitHub \u5b66\u751f\u5305\uff08GitHub Student Developer Pack\uff09\u662f GitHub \u9762\u5411\u5b66\u751f\u63d0\u4f9b\u7684\u4e00\u7cfb\u5217\u514d\u8d39\u5f00\u53d1\u5de5\u5177\u3001\u670d\u52a1\u548c\u8d44\u6e90\u5408\u96c6\u3002\u4f60\u53ef\u4ee5\u514d\u8d39\u6216\u5927\u5e45\u6298\u6263\u5730\u4f7f\u7528\u4e00\u4e9b\u672c\u6765\u9700\u8981\u4ed8\u8d39\u7684\u5f00\u53d1\u5de5\u5177\u548c\u670d\u52a1, \u5c31\u6bd4\u5982\u6ee1\u8840\u7248Copilot(\u5f3a\u5927\u7684\u4ee3\u7801\u8f85\u52a9AI), \u8fd8\u6709\u5c31\u662fAzure\u670d\u52a1\u5668(\u53ef\u4ee5\u62ff\u6765\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2, \u4ee3\u7406\u7b49)\u3002</p>"},{"location":"01-QUICK%20START/04-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/Github%E5%AD%A6%E7%94%9F%E5%8C%85%E7%94%B3%E8%AF%B7%E6%8C%87%E5%8D%97.html#_1","title":"\u7533\u8bf7\u6307\u5357","text":"<p>\u5b66\u957f\u535a\u5ba2</p>"},{"location":"02-WEB/index.html","title":"WEB \u5b89\u5168","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/CSRF%E6%94%BB%E5%87%BB/index.html","title":"CSRF\u653b\u51fb","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/SQL%E6%B3%A8%E5%85%A5/index.html","title":"SQL\u6ce8\u5165","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/SSRF%E6%BC%8F%E6%B4%9E/index.html","title":"SSRF\u6f0f\u6d1e","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/index.html","title":"SSTI\u6a21\u677f\u6ce8\u5165","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/XSS%E6%94%BB%E5%87%BB/index.html","title":"XSS\u653b\u51fb","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/XXE%E6%BC%8F%E6%B4%9E/index.html","title":"XXE\u6f0f\u6d1e","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/index.html","title":"\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/index.html","title":"\u6587\u4ef6\u4e0a\u4f20","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"02-WEB/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/index.html","title":"\u6587\u4ef6\u5305\u542b","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"03-MISC/index.html","title":"MISC-\u6742\u9879","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"04-CRYPTO/index.html","title":"CRYPTO-\u5bc6\u7801\u5b66","text":"<p>\u5bc6\u7801\u5b66\u5728CTF\u4e94\u5927\u65b9\u5411\u4e2d\uff0c\u53ef\u8c13\u662f\u6700\u6df1\u6700\u96be\u7684\u65b9\u5411\uff0c\u60f3\u8981\u5728\u5168\u56fd\u6bd4\u8d5b\u5f97\u5230\u4e00\u5b9a\u7684\u6210\u7ee9\uff0c\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\u53bb\u5b66\u4e60\u7406\u8bba\u77e5\u8bc6\u548c\u8fdb\u884c\u4ee3\u7801\u8bad\u7ec3\u3002\u5c3d\u7ba1\u5f53\u4eca\u5f88\u591a\u4ee3\u7801\u90fd\u53ef\u4ee5\u501f\u52a9AI\u53bb\u5b9e\u73b0\uff0c\u4f46\u5fc5\u8981\u7684\u7ec3\u4e60\u662f\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>\u672cWiki\u4ec5\u4f9b\u8bfb\u8005\u4f5c\u4e3a\u5b66\u4e60\u53c2\u8003\uff0c\u5b66\u4e60\u518d\u591a\u7406\u8bba\u77e5\u8bc6\u4e5f\u4e0d\u5982\u8fdb\u5165NSSCTF\u6216\u8005BUUCTF\u5237\u51e0\u5341\u9898\uff0c\u6216\u8005\u76f4\u63a5\u53c2\u52a0\u51e0\u573a\u6bd4\u8d5b\u5e76\u8fdb\u884c\u8d5b\u540e\u590d\u76d8\u8865\u9898\uff1b\u76f8\u4fe1\u7ecf\u8fc7\u51e0\u4e2a\u6708\u751a\u81f3\u534a\u5e74\u7684\u5b66\u4e60\uff0c\u4f60\u5c06\u4f1a\u7a81\u98de\u731b\u8fdb</p> <p>\u5982\u679c\u4f60\u672a\u6765\u60f3\u4ece\u4e8b\u5bc6\u7801\u5b66\u76f8\u5173\u4e13\u4e1a\u7684\u5de5\u4f5c\uff0c\u8bfb\u535a\u662f\u5f88\u96be\u907f\u514d\u7684\uff1b\u4f46\u540c\u6837\u7684\uff0c\u5982\u679c\u4f60\u6709\u5174\u8da3\u8bfb\u7814\u751a\u81f3\u8bfb\u535a\uff0c\u5bc6\u7801\u5b66\u5c06\u4f1a\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u9009\u62e9\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\u901a\u8fc7CTF\u7ade\u8d5b\u4e86\u89e3\u5e76\u719f\u6089\u5bc6\u7801\u5b66\uff0c\u5c06\u6765\u4ece\u4e8b\u5bc6\u7801\u5b66\u76f8\u5173\u79d1\u7814\u5de5\u4f5c\u5c06\u4f1a\u76f8\u5bf9\u7545\u901a\u65e0\u963b\uff0c\u5e76\u4e14\u5c55\u73b0\u51fa\u5bc6\u7801\u5b66\u666e\u901a\u7814\u7a76\u751f\u96be\u4ee5\u6bd4\u62df\u7684\u4ee3\u7801\u80fd\u529b\uff1b\u5e08\u5927\u7684\u7f51\u5b89\u4e13\u4e1a\u5168\u7701\u7b2c\u4e00\u540d\u6bcb\u5eb8\u7f6e\u7591\uff0c\u5728\u8fd9\u91cc\u4ece\u4e8b\u5bc6\u7801\u5b66\u5b66\u4e60\u548c\u79d1\u7814\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u786e\u5b9e\u662f\u66f4\u9ad8\u7ea7\u522b\u7684\u5e73\u53f0\u3002\u4f46\u662f\u7f51\u5b89\u534f\u4f1a\u7684\u5bc6\u7801\u5b66\uff0c\u5168\u51ed\u81ea\u5b66~</p> <p>\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u76f8\u4e92\u6c9f\u901a\u4ea4\u6d41\uff0c\u4f46\u662f\u5185\u9a71\u529b\u662f\u76f8\u5f53\u91cd\u8981\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u52a0\u6cb9\u5427\uff01</p>"},{"location":"04-CRYPTO/00-%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/index.html","title":"\u6d4b\u8bd5\u57fa\u672c\u529f\u80fd","text":""},{"location":"04-CRYPTO/00-%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/01-%E6%B5%8B%E8%AF%95markdown%E5%8A%9F%E8%83%BD.html","title":"\u6d4b\u8bd5markdown\u529f\u80fd","text":"<p>\u52a0\u7c97</p> <p>\u659c\u4f53\u6587\u672c</p> <p>\u5220\u9664\u7ebf\u6587\u672c</p> <ul> <li>111</li> <li>222<ul> <li>444</li> </ul> </li> <li> <p>333</p> </li> <li> <p>123</p> </li> <li>234</li> <li>345</li> </ul> <p>\u5f15\u7528\u5757</p> <p><code>\u55b5\u55b5\u55b5</code></p> Python<pre><code>#\u4ee3\u7801\u5757\nprint(\"Hello, word!\")\nprint(\"Hello, execl!\")\nprint(\"Hello, PPT!\")\n</code></pre> <p>\u5f88\u68d2\u7684\u535a\u5ba2</p> <p></p>"},{"location":"04-CRYPTO/00-%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/02-%E6%B5%8B%E8%AF%95LaTeX%E5%8A%9F%E8%83%BD.html","title":"\u6d4b\u8bd5LaTeX\u529f\u80fd","text":"<p>\\(E = mc^2\\)\u3002</p> \\[ \\int_{-\\infty}^{\\infty} e^{-x^2} \\, dx = \\sqrt{\\pi} \\] <ol> <li>\u5206\u6570\uff1a</li> </ol> \\[ \\frac{a + b}{c} \\] <ol> <li>\u5f00\u65b9\uff1a</li> </ol> \\[ \\sqrt{a^2 + b^2} \\] <ol> <li>\u6781\u9650\uff1a</li> </ol> \\[ \\lim_{x \\to 0} \\frac{\\sin x}{x} = 1 \\] <ol> <li>\u6c42\u548c\u4e0e\u4e58\u79ef\uff1a</li> </ol> \\[ \\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6}, \\quad &gt; &gt; \\prod_{i=1}^{n} i = n! \\] <ol> <li>\u77e9\u9635\uff1a</li> </ol> \\[ \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\] <ol> <li>\u903b\u8f91\u8868\u8fbe\u5f0f\uff1a</li> </ol> \\[ \\forall x \\in \\mathbb{R},\\ \\exists y &gt; 0,\\quad x + y &gt; x \\]"},{"location":"04-CRYPTO/00-%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD/03-%E6%B5%8B%E8%AF%95emoji%E5%8A%9F%E8%83%BD.html","title":"\u6d4b\u8bd5emoji\u529f\u80fd","text":"<p>\ud83d\ude00 \ud83d\ude0e \u2705 \ud83d\udd25 \ud83d\udca1 \u2728 \ud83e\udde0 \ud83d\udc0d</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/index.html","title":"\u5bc6\u7801\u5b66\u5927\u81f4\u5b66\u4e9b\u4ec0\u4e48","text":"<p>\u8d70\u8fc7\u8def\u8fc7\u4e0d\u8981\u9519\u8fc7\uff0c\u6a59\u5473\u5bc6\u7801\u5b66\u7cd5\u5b88\u7684\u7b2c\u4e00\u6b65\u662f\u77e5\u9053\u5b83\u5b66\u4ec0\u4e48\uff0c\u8fd9\u6837\u624d\u80fd\u628a\u57fa\u7840\u638c\u63e1\u55bd\uff0c\u7136\u540e\u4e0d\u65ad\u5b66\u4e60\u65b0\u77e5\u8bc6\u5e76\u7ec3\u4e60\uff0c\u6700\u7ec8\u6a59\u5473\u7cd5\u5b88</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html","title":"\u5bc6\u7801\u5b66\u901a\u7528\u57fa\u7840","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html#_2","title":"\u53e4\u5178\u5bc6\u7801","text":"<p>\u51ef\u6492\u5bc6\u7801</p> <p>\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801</p> <p>\u6805\u680f\u5bc6\u7801</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html#_3","title":"\u6570\u5b66\u57fa\u7840","text":"<p>\u6570\u8bba\uff08\u6a21\u8fd0\u7b97\u3001\u6b27\u62c9\u51fd\u6570\u3001\u8d28\u56e0\u6570\u5206\u89e3\uff09</p> <p>\u4ee3\u6570\uff08\u7fa4\u3001\u73af\u3001\u57df\u7684\u57fa\u672c\u6982\u5ff5\uff09</p> <p>\u6982\u7387\u8bba\uff08\u968f\u673a\u6027\u5206\u6790\u3001\u671f\u671b\u4e0e\u65b9\u5dee\uff09</p> <p>\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\uff08P\u7c7b\u3001NP\u7c7b\u3001NP\u5b8c\u5168\u95ee\u9898\uff09</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80.html#_4","title":"\u540e\u91cf\u5b50\u5bc6\u7801\u5b66\u524d\u7f6e\u77e5\u8bc6","text":"<p>\u91cf\u5b50\u8ba1\u7b97\u673a\u8ba1\u7b97\u539f\u7406</p> <p>\u521d\u6b65\u5b66\u4e60\u683c\u95ee\u9898\uff08Lattice Problem\uff09</p> <p>\u77e9\u9635\u8bba\u57fa\u7840</p> <p>\u521d\u6b65\u5b66\u4e60\u5b66\u4e60\u5177\u6709\u8bef\u5dee\uff08LWE\uff09\u95ee\u9898</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html","title":"CTF\u4e2d\u7684\u5bc6\u7801\u5b66","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_1","title":"\u73b0\u4ee3\u5bc6\u7801\u5b66\u524d\u7f6e\u77e5\u8bc6","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_2","title":"\u5e38\u7528\u5de5\u5177","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_3","title":"\u901a\u7528\u5de5\u5177","text":"<p>CyberChef</p> <p>Hashcat</p> <p>John the Ripper</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#sage","title":"sage","text":"<p>\u4ee3\u6570\u8fd0\u7b97\u3001\u56e0\u6570\u5206\u89e3\u3001\u692d\u5706\u66f2\u7ebf\u8ba1\u7b97</p> <p>\u7b97\u529b\u4e00\u822c\u4f4e\u4e8e\u5728\u7ebf\u7f51\u7ad9 factordb</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#python","title":"python","text":"<p>\u6700\u5e38\u7528\u7684\u5de5\u5177\uff0c\u4e5f\u6700\u5177\u6709\u666e\u9002\u6027</p> <p>\u5e38\u7528\u51fd\u6570\u5e93\uff1a</p> <ul> <li><code>math</code>\uff1a\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\u3002</li> <li><code>random</code> \u548c <code>secrets</code>\uff1a\u968f\u673a\u6570\u751f\u6210\u3002</li> <li><code>hashlib</code>\uff1a\u8ba1\u7b97\u6563\u5217\u503c\u3002</li> <li><code>pycryptodome</code>\uff1a\u5b9e\u73b0\u5bf9\u79f0\u52a0\u5bc6\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002</li> <li><code>gmpy2</code>\uff1a</li> </ul>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#yafu","title":"yafu","text":"<p>\u57fa\u4e8epython\u7684\u5de5\u5177\uff0c\u5e38\u7528\u6765\u5728\u6574\u6570\u57df\u5185\u8fdb\u884c</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#chatgpt","title":"chatgpt","text":"<p>\u7528\u4e8e\u8f85\u52a9\u4f5c\u7528\uff0c\u800c\u975e\u76f4\u63a5\u53c2\u4e0e\u5bc6\u7801\u5b66\u6838\u5fc3\u8ba1\u7b97</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_4","title":"\u7f16\u7801\u4e0e\u8f6c\u6362","text":"<p>Base64</p> <p>URL\u7f16\u7801</p> <p>Hex\u7f16\u7801</p> <p>\u76f8\u5173\u5de5\u5177</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_5","title":"\u968f\u673a\u6570\u4e0e\u4f2a\u968f\u673a\u6570","text":"<p>\u968f\u673a\u6570\u751f\u6210\u539f\u7406\u4e0e\u4f2a\u968f\u673a\u6570\u9884\u6d4b</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_6","title":"\u5bf9\u79f0\u52a0\u5bc6","text":"<p>\u4f7f\u7528\u76f8\u540c\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\u548c\u89e3\u5bc6</p> <p>\u4f18\u70b9\uff1a\u9ad8\u6548\u5feb\u901f\uff0c\u9002\u5408\u5904\u7406\u5927\u6570\u636e</p> <p>\u7f3a\u70b9\uff1a\u5bc6\u94a5\u7ba1\u7406\u56f0\u96be</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#aes","title":"AES\uff08\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6\uff09","text":"<p>\u52a0\u5bc6\u6a21\u5f0f\uff1aECB\u3001CBC\u3001CFB\u3001OFB\u3001GCM</p> <p>\u5206\u7ec4\u957f\u5ea6\u56fa\u5b9a\u4e3a128\u4f4d\uff0c\u5bc6\u94a5\u957f\u5ea6\u4e3a128\u3001192\u3001256\u4f4d</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#des","title":"DES\uff08\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff09","text":"<p>\u5206\u7ec4\u957f\u5ea6\u4e3a64\u4f4d\uff0c\u5bc6\u94a5\u957f\u5ea6\u4e3a56\u4f4d</p> <p>\u5b89\u5168\u6027\u4e0d\u8db3\uff0c\u6613\u53d7\u66b4\u529b\u7834\u89e3\uff0c\u5e38\u7528\u4e8e\u5386\u53f2\u9057\u7559\u7cfb\u7edf</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#3des","title":"3DES\uff08\u4e09\u91cd\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff09","text":"<p>\u4f7f\u7528\u4e09\u4e2a\u4e0d\u540c\u7684DES\u5bc6\u94a5\uff0c\u63d0\u9ad8\u5b89\u5168\u6027\uff1b\u4f46\u6027\u80fd\u8f83\u5dee</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#blowfish","title":"Blowfish","text":"<p>\u5206\u7ec4\u957f\u5ea6\u4e3a64\u4f4d\uff0c\u5bc6\u94a5\u957f\u5ea61-448\u4f4d\uff0c\u901f\u5ea6\u5feb\u4e14\u7075\u6d3b</p> <p>\u5e38\u7528\u4e8e\u5bc6\u7801\u4fdd\u62a4\u5de5\u5177\u3002</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_7","title":"\u975e\u5bf9\u79f0\u52a0\u5bc6","text":"<p>\u4e00\u5bf9\u5bc6\u94a5\uff0c\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6\u3002</p> <p>\u4f18\u70b9\uff1a\u5bc6\u94a5\u5206\u53d1\u7b80\u5355</p> <p>\u7f3a\u70b9\uff1a\u8ba1\u7b97\u6548\u7387\u8f83\u4f4e</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_8","title":"\u7b97\u6cd5","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsarivestshamiradleman","title":"RSA\uff08Rivest\u2013Shamir\u2013Adleman\uff09","text":"<p>\u57fa\u4e8e\u7684\u6570\u5b66\u56f0\u96be\u95ee\u9898\uff1a\u57fa\u4e8e\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u56f0\u96be\u6027</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#ecc","title":"ECC\uff08\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u5b66\uff09","text":"<p>\u57fa\u4e8e\u7684\u6570\u5b66\u56f0\u96be\u95ee\u9898\uff1a\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\uff08ECDLP\uff09</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#elgamal","title":"ElGamal","text":"<p>\u7531DH\uff08Diffie-Hellman\u5bc6\u94a5\u4ea4\u6362\uff09\u4ea7\u751f\u7684\u52a0\u5bc6\u7b97\u6cd5</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_9","title":"\u5e38\u89c1\u653b\u51fb","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsa-","title":"RSA-\u76f4\u63a5\u5206\u89e3","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsa-_1","title":"RSA-\u4f4e\u5bc6\u5ea6\u6307\u6570\u653b\u51fb","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#rsa-_2","title":"RSA-\u7ef4\u7eb3\u653b\u51fb","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_10","title":"\u6563\u5217\u5bc6\u7801","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_11","title":"\u524d\u7f6e\u77e5\u8bc6","text":"<p>\u6297\u78b0\u649e\u5b89\u5168\u6027\u548c\u4e0d\u53ef\u9006\u5b89\u5168\u6027</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_12","title":"\u5177\u4f53\u7b97\u6cd5","text":"<p>MD5</p> <p>SHA\u7cfb\u5217</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_13","title":"\u78b0\u649e\u4e0e\u7834\u89e3","text":"<p>\u751f\u65e5\u653b\u51fb\u3001\u5f69\u8679\u8868</p> <p>\u5de5\u5177\u4e0e\u811a\u672c\u5b9e\u73b0</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/02-CTF%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6.html#_14","title":"\u540e\u91cf\u5b50\u5bc6\u7801\u5b66","text":"<p>\u80cc\u666f\uff1a\u91cf\u5b50\u8ba1\u7b97\u5bf9\u4f20\u7edf\u52a0\u5bc6\u7b97\u6cd5\u7684\u5a01\u80c1</p> <p>\u57fa\u4e8e\u683c\u7684\u5bc6\u7801\u5b66\uff08\u5982NTRU\u3001LWE\uff09</p> <p>\u54c8\u5e0c\u7b7e\u540d\u65b9\u6848</p> <p>\u4ee3\u7801\u5bc6\u7801\u5b66</p> <ol> <li> <ul> <li>\u5e38\u7528\u89e3\u5bc6\u5de5\u5177\uff08\u5982CyberChef\u3001Hashcat\u3001John the Ripper\u7b49\uff09</li> </ul> </li> <li>\u7f16\u5199\u81ea\u5df1\u7684\u811a\u672c\uff08Python\u4e0e\u5e38\u7528\u5bc6\u7801\u5e93\uff09</li> <li>\u81ea\u52a8\u5316\u811a\u672c\u5316\u7834\u89e3\u65b9\u6cd5</li> <li>\u6848\u4f8b\u5206\u6790</li> <li>\u56fd\u5185\u5916\u7ecf\u5178CTF\u6bd4\u8d5b\u7684\u5bc6\u7801\u5b66\u9898\u76ee\u89e3\u6790</li> <li>\u89e3\u9898\u6d41\u7a0b\u4e0e\u601d\u7ef4\u5206\u4eab</li> </ol>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html","title":"\u5bc6\u7801\u5b66\u79d1\u7814\u65b9\u5411","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_2","title":"\u5165\u95e8\u8def\u5f84","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_3","title":"\u57fa\u7840\u77e5\u8bc6","text":"<p>\u79d1\u666e\u4e66\u7c4d\u300a\u6570\u5b57\u7b7e\u540d\u5bc6\u53f2 \u4ece\u6025\u9700\u5230\u6709\u8da3\u300b\u90ed\u798f\u6625</p> <p>\u5165\u95e8\u4e66\u7c4d\u300aModern Cryptography: Theory and Practice\u300bMao Wenbo \u6216\u5176\u4e2d\u6587\u7248</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_4","title":"\u5b89\u5168\u89c4\u7ea6","text":"<p>\u5165\u95e8\u4e66\u7c4d\u300aIntroduction to Security Reduction\u300bFuchun Guo \u6216\u5176\u4e2d\u6587\u7248</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#30","title":"\u516c\u94a5\u5bc6\u780130\u7bc7","text":"<p>\u5f3a\u70c8\u63a8\u8350\u300a\u516c\u94a5\u5bc6\u7801\u65b9\u6848\u6784\u9020\u53ca\u5b89\u5168\u8bc1\u660e\u7684\u77e5\u8bc6\u8981\u70b9\u548c\u65b9\u6cd5\u8bba\u300b\u8d75\u81fb  </p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_5","title":"\u5e38\u7528\u8d44\u6e90","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_6","title":"\u8bba\u6587\u68c0\u7d22","text":"<p>\u8c37\u6b4c\u5b66\u672f</p> <p>DBLP</p> <p>\u627e\u5b66\u59d0\u8981</p>"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#big4","title":"\u4e09\u5927\u5bc6\u4e0eBIG4","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_7","title":"\u5bc6\u7801\u5b66\u4e09\u5927\u9876\u4f1a","text":"\u7b80\u79f0 \u540d\u79f0 \u51fa\u7248\u793e \u4f1a\u8bae\u7f51\u5740 \u63a8\u8350\u7b49\u7ea7 Crypto International Cryptology Conference Springer https://iacr.org/meetings/crypto/ A Eurocrypt European Cryptology Conference Springer https://iacr.org/meetings/eurocrypt/ A Asiacrypt Annual International Conferenceon the Theory and Application of Cryptology and Information Security Springer https://iacr.org/meetings/asiacrypt/ A"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_8","title":"\u4fe1\u606f\u5b89\u5168\u56db\u5927\u9876\u4f1a\u4e0e\u5206\u7ea7","text":"\u7f16\u53f7 \u4f1a\u8bae\u7b80\u79f0 \u4f1a\u8bae\u540d\u79f0 \u51fa\u7248\u793e \u4f1a\u8bae\u7f51\u5740 \u63a8\u8350\u7b49\u7ea7 1 CCS ACM Conference on Computer and Communications Security ACM http://dblp.uni-trier.de/db/conf/ccs/ A 2 S&amp;P IEEE Symposium on Security and Phivacy IEEE http://dblp.uni-trier.de/db/conf/sp/ A 3 Usenix Security Usenix Security Symposium USENIX Association http://dblp.uni-trier.de/db/conf/uss/ A 4 NDSS ISOC Network and Disthibuted System SecuritySyumposium ISOC https://www.ndss-symposium.org/ B"},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_9","title":"\u8bba\u6587\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#ccf","title":"CCF\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_10","title":"\u4e2d\u79d1\u9662\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sci","title":"SCI\u8bc4\u7ea7","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_11","title":"\u70ed\u95e8\u65b9\u5411","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_12","title":"\u540e\u91cf\u5b50\u5bc6\u7801\u5b66","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_13","title":"\u540c\u6001\u52a0\u5bc6","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_14","title":"\u533a\u5757\u94fe","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#mpc","title":"\u591a\u65b9\u5b89\u5168\u8ba1\u7b97\uff08MPC\uff09","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_15","title":"\u4e0d\u662f\u592a\u70ed\u95e8\u4f46\u662f\u6bd4\u8f83\u5bb9\u6613\u505a\u7684\u65b9\u5411","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_16","title":"\u56fd\u5bc6","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sm2","title":"SM2","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sm3","title":"SM3","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#sm9","title":"SM9","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_17","title":"\u7fa4\u7b7e\u540d/\u73af\u7b7e\u540d","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_18","title":"\u53d8\u8272\u9f99\u54c8\u5e0c/\u53ef\u4fee\u6539\u533a\u5757\u94fe","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_19","title":"\u5bc6\u94a5\u6cc4\u9732","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_20","title":"\u5373\u65f6\u9677\u95e8","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_21","title":"\u76f2\u7b7e\u540d","text":""},{"location":"04-CRYPTO/01-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%A7%E8%87%B4%E5%AD%A6%E4%BA%9B%E4%BB%80%E4%B9%88/03-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%A7%91%E7%A0%94%E6%96%B9%E5%90%91.html#_22","title":"\u9690\u5199","text":""},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/index.html","title":"SageMath\u7b80\u8981\u6559\u7a0b","text":"<p>SageMath\u662f\u4e00\u4e2aPython\u5728\u6570\u5b66\u5e94\u7528\u4e0a\u7684\u4e00\u4e2a\u6269\u5c55\u7a0b\u5e8f\uff0c\u5728\u638c\u63e1Python\u7684\u57fa\u672c\u8bed\u6cd5\u4e4b\u540eSageMath\u76f8\u5f53\u4e8e\u591a\u4e86\u5f88\u591a\u81ea\u5e26\u6269\u5c55\u5e93</p> <p>\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u5199\u4e86\u4e2a\u7b80\u8981\u7684\u6559\u7a0b</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/01-%E9%AB%98%E7%89%88%E6%9C%ACSageMath%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Aflatter%E9%85%8D%E7%BD%AE.html","title":"\u9ad8\u7248\u672cSageMath\u5b89\u88c5\u4ee5\u53caflatter\u914d\u7f6e","text":"<p>\u7531\u4e8eWindows\u652f\u6301\u7684SageMath\u505c\u7559\u57289.3\uff0c\u5efa\u8bae\u53c2\u8003Shin's Blog\u5b89\u88c5\u66f4\u9ad8\u7248\u672c\u7684SageMath\u548cflatter</p> <p>\u7b80\u5355\u6765\u8bf4flatter\u5c31\u662f\u4e2a\u52a0\u901fLLL\u7b97\u6cd5\u7684\u5de5\u5177\uff0c\u7b80\u4ecb\u53ef\u89c1\uff1ahttps://github.com/keeganryan/flatter</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html","title":"SageMath\u7b80\u4ecb","text":"<p>SageMath\u662f\u4e00\u4e2aPython\u5728\u6570\u5b66\u5e94\u7528\u4e0a\u7684\u4e00\u4e2a\u6269\u5c55\u7a0b\u5e8f\uff0c\u5728\u638c\u63e1Python\u7684\u57fa\u672c\u8bed\u6cd5\u4e4b\u540eSageMath\u76f8\u5f53\u4e8e\u591a\u4e86\u5f88\u591a\u81ea\u5e26\u6269\u5c55\u5e93</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#1-python","title":"1. \u4e0ePython\u7684\u4e0d\u540c\u4e4b\u5904","text":"Bash<pre><code>type(5)\n&lt;class 'sage.rings.integer.Integer'&gt;\n</code></pre> <p>5\u7684\u7c7b\u578b\u4e0d\u662fint\uff0c\u800c\u662f\u6574\u6570\u73af\u4e0a\u7684\u5143\u7d20</p> Bash<pre><code>5**3        # \u8868\u793a5\u7684\u4e09\u6b21\u65b9\n5^3         # \u8868\u793a5\u7684\u4e09\u6b21\u65b9\uff0cpython\u4e2d\u8868\u793a\u5f02\u6216\n5^^3        # \u8868\u793a5\u5f02\u62163\n</code></pre>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#2","title":"2. \u57fa\u672c\u7684\u73af\uff0c\u57df","text":"<ol> <li>\u6574\u6570\u73af\uff1aZZ</li> <li>\u6709\u7406\u6570\u73af\uff1aQQ</li> <li>\u5b9e\u6570\u57df\uff1aRR</li> <li>\u590d\u6570\u57df\uff1aCC</li> <li>\u591a\u9879\u5f0f\u73af\uff1aPolynomialRing()</li> </ol> <p>\u7528\u7684\u6700\u591a\u7684\u662f<code>PolynomialRing()</code></p> Bash<pre><code>PQ.&lt;x&gt; = PolynomialRing(QQ)\n</code></pre> <p>PQ\uff1a\u662f\u591a\u9879\u5f0f\u73af\u81ea\u5b9a\u4e49\u7684\u540d\u5b57</p> <p>x\uff1a\u53d8\u91cf\u540d</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#3","title":"3. \u57fa\u672c\u6570\u8bba\u51fd\u6570","text":"<p>1.\u6c42\u9006\uff1ae\u6a21n\u7684\u9006</p> <p>\u5982\u679c<code>e</code>\u662f\u5b9a\u4e49\u5728\\(Zmod(n)\\)\u4e0a\u7684\u5143\u7d20\uff0c\u76f4\u63a5<code>e^-1</code>\u5373\u53ef\u5f97\u5230\u9006\u5143\u3002 \u5426\u5219\u76f4\u63a5\u4f7f\u7528<code>inverse_mod(e,n)</code>\uff0c\u4e00\u822c\u60c5\u51b5\u90fd\u662f\u7528<code>Crypto.Util.number</code>\u6a21\u5757\u4e2d\u7684<code>inverse(e,n)</code></p> <p>2.\u6700\u5927\u516c\u56e0\u6570\uff1a(a,b)\u7684\u6700\u5927\u516c\u56e0\u6570</p> <p><code>gcd(a,b)</code></p> <p>3.\u6700\u5c0f\u516c\u500d\u6570\uff1a(a,b)\u7684\u6700\u5c0f\u516c\u500d\u6570</p> <p><code>lcm(a,b)</code></p> <p>4.\u6a21\u5e42\uff1a\\(e^x \\mod n\\)</p> <p>\u5982\u679c<code>e</code>\u662f\u5b9a\u4e49\u5728\\(Zmod(n)\\)\u4e0a\u7684\u5143\u7d20\uff0c\u76f4\u63a5<code>e^x</code>\u5373\u53ef\uff0c\u5426\u5219\u4f7f\u7528<code>pow(e,x,n)</code></p> <p>5.\u7d20\u6570\u5224\u65ad\uff1a</p> Bash<pre><code>x = 7\nx.is_prime()\n# True\n</code></pre> <p>\u6211\u4e00\u822c\u7528Crypto.Util.number\u6a21\u5757\u4e2d\u7684<code>isPrime(x)</code></p> <p>6.\u9636\u4e58\uff1a</p> <p><code>factorial(x)</code></p> <p>7.\u6b27\u62c9\u51fd\u6570</p> Bash<pre><code>euler_phi(n)\n</code></pre> <p>\u6c42\\(\\phi(n)\\)</p> <p>8.\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406</p> Bash<pre><code>crt([m1,m2],[n1,n2])\n</code></pre> <p>\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4</p> \\[ \\begin{align} x \\equiv m_1 \\mod n_1 \\\\ x \\equiv m_2 \\mod n_2 \\end{align} \\] <p>9.\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5</p> Bash<pre><code>d,x,y = xgcd(a,b)\n</code></pre> \\[ d = gcd(a,b) = ax + by \\] <p><code>gmpy2.gcdext(a,b)</code></p> <p>10.\u7d20\u6570\u5206\u89e3</p> Bash<pre><code>factor(1024)\n# 2^10 \nprime_divisors(1024)\n# [2]\ndivisors(1024)\n# [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n</code></pre> <p>\\(p_1^{e_1} * p_2^{e_2} ... p_n^{e_n}\\)</p> <p>11.\u5f00\u6839</p> <p>\u6574\u6570\u57df\u5f00\u6839</p> \\[ x^m = y \\] <p>\u5df2\u77e5\\(y,m\\)\u6c42\\(x\\)</p> Bash<pre><code>y = 87^8\ny.nth_root(8)\n# 87\n</code></pre> <p>\u6709\u9650\u57df\u5f00\u6839</p> \\[ x^m \\equiv y \\mod N \\] <p>\u5df2\u77e5\\(y,m,N\\)\u6c42\\(x\\)</p> Bash<pre><code>y = pow(78,888,65537)\nx = Zmod(65537)(y).nth_root(888)\nprint(x)\n# 78\n</code></pre> \\[ c \\equiv m^e \\mod n \\] <p><code>x = Zmod(n)(c).nth_root(e)</code></p> <p>\u6ce8\u610f\uff1a\u5f00\u6839\u6709\u591a\u89e3\uff0c<code>nth_root</code>\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a\u89e3\uff0c\u5982\u679c\u9700\u8981\u5f97\u5230\u6240\u6709\u89e3\uff0c\u53ef\u4ee5\u591a\u52a0\u4e00\u4e2a\u53c2\u6570</p> <p><code>x = Zmod(65537)(y).nth_root(888,all=True)</code></p> Bash<pre><code>y = pow(78,888,65537)\nx = Zmod(65537)(y).nth_root(888,all=True)\nprint(x)\n# [78, 64289, 19968, 8197, 65459, 1248, 45569, 57340]\n</code></pre> <p>12.\u79bb\u6563\u5bf9\u6570 sage\u5b9e\u73b0\u4e86\u591a\u79cd\u79bb\u6563\u5bf9\u6570\u7684\u6c42\u89e3\u65b9\u6cd5</p> \\[ y \\equiv x^m \\mod p \\] <p>\u53c2\u6570\u8bf4\u660e\uff1a\u6c42\u89e3\u4ee5<code>base</code>\u4e3a\u5e95\uff0c<code>a</code>\u7684\u5bf9\u6570\uff1b<code>ord</code>\u4e3a<code>base</code>\u7684\u9636\uff08\u53ef\u4ee5\u7f3a\u7701\uff09\uff0c<code>operation</code>\u53ef\u4ee5\u662f<code>+</code>\uff0c<code>*</code>\uff0c\u9ed8\u8ba4\u662f<code>*</code>\uff1b<code>bound</code>\u662f\u4e00\u4e2a\u533a\u95f4<code>(ld,ud)</code>\uff0c\u9700\u8981\u4fdd\u8bc1\u6240\u8ba1\u7b97\u7684\u5bf9\u6570\u5728\u6b64\u533a\u95f4\u5185</p> <ul> <li><code>discrete_log(a,base,ord,operation)</code>   \u901a\u7528\u7684\u6c42\u79bb\u6563\u5bf9\u6570\u7684\u65b9\u6cd5</li> <li><code>discrete_log_rho(a,base,ord,operation)</code>   \u6c42\u79bb\u6563\u5bf9\u6570\u7684Pollard-Rho\u7b97\u6cd5</li> <li><code>discrete_log_lambda(a,base,bounds,operation)</code> \u200b       \u6c42\u79bb\u6563\u5bf9\u6570\u7684Pollard-kangaroo\u7b97\u6cd5\uff08\u4e5f\u79f0lambda\u7b97\u6cd5\uff09</li> <li>bsgs(base,a,bounds,operation)   \u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5 \u5f53<code>operation</code>\u4e3a<code>+</code>\u65f6\uff0c\u4e00\u822c\u662f\u5e94\u7528\u5728\u692d\u5706\u66f2\u7ebf\u7684\u79bb\u6563\u5bf9\u6570</li> </ul>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#4","title":"4. \u7ebf\u6027\u4ee3\u6570\u76f8\u5173\u51fd\u6570","text":"<ul> <li>\u77e9\u9635\u7684\u5b9a\u4e49\u8fd0\u7b97</li> </ul> <p>1.\u4e00\u822c\u77e9\u9635\u5b9a\u4e49</p> Bash<pre><code># \u5b9a\u4e49\u6574\u6570\u73af\u4e0a\u7684\u77e9\u9635\nA = Matrix(ZZ,[\n[1,2,3],\n[4,5,6],\n[7,8,9]\n])\n# \u6a212\u6709\u9650\u57df\u7684\u77e9\u9635\nB = Matrix(GF(2),A)\nB = Matrix(Zmod(2),A)\n# \u5411\u91cf\u5b9a\u4e49\nv = vector(ZZ,[1,2,3])\nv = vector(GF(2),[1,2,3])\n# \u5b9a\u4e49\u77e9\u9635\u4f46\u4e0d\u521d\u59cb\u5316:GF(2)\u4e0a\u768410 * 10\u77e9\u9635\u9ed8\u8ba4\u6240\u6709\u5143\u7d20\u4e3a0\nM = Matrix(GF(2),10,10)\n</code></pre> <p>2.\u5206\u5757\u77e9\u9635\u5b9a\u4e49\uff1a</p> \\[ M = \\begin{bmatrix} A &amp; B \\\\ C &amp; D \\end{bmatrix} \\] Bash<pre><code>A = Matrix(GF(2),10,10)\nB = Matrix(GF(2),10,30)\nC = Matrix(GF(2),5,10)\nD = Matrix(GF(2),5,30)\nM = block_matrix([\n[A,B],\n[C,D]\n])\n# \u77e9\u9635\u7684\u89c4\u6a21\n</code></pre> <p>3.\u77e9\u9635\u8fd0\u7b97</p> Python<pre><code>M1 = Matrix([\n    [1,2],\n    [1,3]\n])\nM2 = Matrix([\n    [2,1],\n    [2,3]\n])\nM1 + M2\n\"\"\"\n[3 3]\n[3 6]\n\"\"\"\nM1 * M2\n\"\"\"\n[ 6  7]\n[ 8 10]\n\"\"\"\n</code></pre> <p>\u8f6c\u7f6e\uff1a<code>M.transpose()</code></p> <p>\u6c42\u9006\uff1a<code>M.inverse()</code>\u6216\u8005<code>M^(-1)</code></p> <p>\u7279\u5f81\u503c\uff1a<code>M.eigenvalues()</code></p> <p>\u7279\u5f81\u5411\u91cf\uff08\u53f3\uff09\uff1a<code>M.eigenvalues_right()</code></p> <p>\u884c\u5217\u5f0f\uff1a<code>M.det()</code></p> <p>\u6c42\u79e9\uff1a<code>M.rank()</code></p> <ul> <li>\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4</li> </ul> \\[ \\left\\{\\begin{matrix} a_{11}x_1 + a_{12}x_2 + ... + a_{1m}x_m = b_1\\\\ a_{21}x_1 + a_{22}x_2 + ... + a_{2m}x_m = b_2\\\\ \\vdots\\\\ a_{n1}x_1 + a_{n2}x_2 + ... + a_{nm}x_m = b_n\\\\ \\end{matrix}\\right. \\] <p>\u77e9\u9635\u8868\u793a\uff1a\\(Ax = B\\)</p> \\[ A = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; ... &amp; a_{1m}\\\\ a_{21} &amp; a_{22} &amp; ... &amp; a_{2m}\\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\ a_{n1} &amp; a_{n2} &amp; ... &amp; a_{nm} \\end{bmatrix} \\quad  x = \\begin{bmatrix} x_1\\\\ x_2\\\\ \\vdots \\\\ x_m \\end{bmatrix} \\quad  B = \\begin{bmatrix} b_1\\\\ b_2\\\\ \\vdots \\\\ b_n \\end{bmatrix} \\] Python<pre><code>x = A.solve_right(B)\n</code></pre> <p>\u5982\u679c\u662f\u6c42\u89e3\\(xA = B\\)</p> Python<pre><code>x = A.solve_left(B)\n</code></pre> <p>SageMath\u8fd8\u96c6\u6210\u4e86\u53f3\uff08\u5de6\uff09\u6838\u7a7a\u95f4\u7684\u6c42\u89e3\uff0c\u5373\\(AX = 0\\)\u548c\\(XA = 0\\)\u7684\u6240\u6709\u89e3\u7a7a\u95f4</p> Python<pre><code>X = A.left_kernel()     # XA = 0\nX = A.right_kernel()    # AX = 0\n# \u77e9\u9635\u5f62\u5f0f\nX = A.right_kernel_matrix()\n</code></pre> <ul> <li>\u5bf9\u4e00\u822c\u65b9\u7a0b\uff08\u6a21\u65b9\u7a0b\uff09\u7684\u6c42\u89e3</li> </ul> Python<pre><code># \u89e3\u4e00\u822c\u65b9\u7a0b\nx,y = var('x,y')\nf1 = x + y == 10\nf2 = x - y == 0\nsolve([f1,f2],[x,y])\n\"\"\"\n[[x == 5, y == 5]]\n\"\"\"\n\n# \u89e3\u6a21\u65b9\u7a0b\nx,y = var('x,y')\nf1 = x + y == 66\nf2 = x - y == 23\nsolve_mod([f1,f2],97)\n\"\"\"\n[(93, 70)]\n\"\"\"\n</code></pre>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#5","title":"5.\u591a\u9879\u5f0f\u73af\u53ca\u5176\u51fd\u6570","text":"<ul> <li>\u591a\u9879\u5f0f\u73af\u5b9a\u4e49</li> </ul> Python<pre><code># \u5b9a\u4e49\u5728\u6709\u7406\u6570\u73af\u4e0a\u7684\u4e00\u5143\u591a\u9879\u5f0f\u73af\nPQ.&lt;x&gt; = PolynomialRing(QQ)\n# PQ\uff1a\u591a\u9879\u5f0f\u73af\u7684\u540d\u5b57\uff0c\u81ea\u5b9a\u4e49\n# x\uff1a\u53d8\u91cf\u7684\u540d\u5b57\uff0c\u81ea\u5b9a\u4e49\n\n# \u4ee5\u4e0b\u662f\u7b49\u4ef7\u5b9a\u4e49\nPQ = PolynomialRing(QQ,'x')\nx = PQ.gen()\n# \u6216\u8005\nPQ = QQ['t']\n</code></pre> <p>\u4e8c\u5143\u591a\u9879\u5f0f\u73af\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a</p> Python<pre><code>PQ.&lt;x,y&gt; = PolynomialRing(QQ,implementation=\"generic\")\n# \u7b49\u4ef7\u4e8e\nPQ = PolynomialRing(QQ,['x','y'])\nx,y = PQ.gens()\n</code></pre> <ul> <li>\u591a\u9879\u5f0f\u5b9a\u4e49</li> </ul> <p>\u5728\u5b9a\u4e49\u597d\u591a\u9879\u5f0f\u73af\u4e4b\u540e<code>PQ.&lt;x&gt; = PolynomialRing(QQ)</code></p> Python<pre><code>PQ.&lt;x&gt; = PolynomialRing(QQ)\nf = 4*x^3 + 2*x + 1\n\n# \u53ef\u4ee5\u7528\u5217\u8868\u5b9e\u73b0\uff0c\u5217\u8868\u7684\u5143\u7d20\u5c31\u662f\u591a\u9879\u5f0f\u7684\u7cfb\u6570\uff08\u5347\u5e42\uff09\nf1 = PQ([1,2,0,4])\nprint(f1)\n\"\"\"\n4*x^3 + 2*x + 1\n\"\"\"\n</code></pre> <p>\u751f\u6210\u968f\u673a\u591a\u9879\u5f0f</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nS = R.random_element(degree)\nprint(S)\n\"\"\"\n30809*x^7 + 43675*x^6 + 37650*x^5 + 19133*x^4 + 28302*x^3 + 41523*x^2 + 38027*x + 47569\n\"\"\"\n</code></pre> <ul> <li>\u591a\u9879\u5f0f\u76f8\u5173\u8fd0\u7b97\u3001\u51fd\u6570</li> </ul> <p>\u591a\u9879\u5f0f\u5206\u89e3\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nf = R.random_element(degree) * R.random_element(degree)\nprint(f.factor())\n\"\"\"\n(36316) * (x + 11701) * (x + 51377) * (x^6 + 26446*x^5 + 34386*x^4 + 20045*x^3 + 48014*x^2 + 1511*x + 29582) * (x^6 + 28718*x^5 + 5682*x^4 + 36526*x^3 + 24869*x^2 + 16439*x + 26532)\n\"\"\"\n</code></pre> <p>\u591a\u9879\u5f0f\u6700\u5927\u516c\u56e0\u5f0f\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\ng = R.random_element(degree)\nf1 = R.random_element(degree) * g\nf2 = R.random_element(degree) * g\nprint(gcd(f1,f2))\n\"\"\"\nx^7 + 17968*x^6 + 5649*x^5 + 15968*x^4 + 39491*x^3 + 10960*x^2 + 11793*x + 43186\n\"\"\"\n</code></pre> <p>\u9996\u4e00\u591a\u9879\u5f0f\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nf = R.random_element()\nprint(f.monic())\n</code></pre> <p>\u591a\u9879\u5f0f\u7684\u6839\uff1a</p> Python<pre><code>R.&lt;x&gt; = PolynomialRing(Zmod(65537))\ndegree = 7\nf = R.random_element()\nprint(f.roots())\n\"\"\"\n[(49655, 1), (23052, 1)]\n\"\"\"\n</code></pre> <p>Groebner basis\uff1a</p> <p>\u5728\u5df2\u77e5\u6a21\u65b9\u7a0b\u7684\u4e00\u4e9b\u5173\u7cfb\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Groebner basis\u5f97\u5230\u4e00\u4e9b\u65b9\u7a0b\u7684\u6839</p> Python<pre><code>G = GF(next_prime(getrandbits(512)))\na = G(getrandbits(512))\nb = G(getrandbits(512))\nc = a + b + 233\na3 = a^3 \nb3 = b^3\nc3 = c^3\n\nx,y,z = G['x,y,z'].gens()\nI = ideal([z - x - y -233, x^3 - a3, y^3 - b3, z^3 - c3])\nB = I.groebner_basis()\nprint(B)\n\"\"\"\n[x + 2531298875913075551623080047366256605361394651747390176151541916607157452100557045589219380619372113471085086020988642643234366348428408128300737756479339, y + 9415924508923578913613719564884371252781291871935977042763901912456038422181722504308404500554549074832959153436325409624718881868450958162294882284278023, z + 1071131270017849170544175220642133725088124729933657075977649390709780255972543853576917359530421767134795718578905900102821973462764119981798880043620730]\n\"\"\"\n</code></pre> <p>\u5206\u522b\u662fa,b,c\u7684\u503c</p>"},{"location":"04-CRYPTO/02-SageMath%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/02-SageMath%E7%AE%80%E4%BB%8B.html#6","title":"6.\u683c\u76f8\u5173\u51fd\u6570","text":"<p>\u5e38\u7528\u7684\u4e24\u4e2a\uff1a</p> <ul> <li>LLL</li> </ul> Python<pre><code>M = Matrix.random(ZZ,5,5)\nM.LLL()\n</code></pre> <ul> <li>CopperSmith\u7b97\u6cd5</li> </ul>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/index.html","title":"\u5178\u578b\u9898\u76ee","text":"<p>\u7eb8\u4e0a\u5f97\u6765\u7ec8\u89c9\u6d45\uff0c\u7edd\u77e5\u6b64\u4e8b\u8981\u8eac\u884c</p> <p>\u770b\u518d\u591a\u7406\u8bba\uff0c\u4e5f\u4e0d\u5982\u5237\u4e00\u767e\u9898</p> <p>\u672c\u7ae0\u8282\u603b\u7ed3\u4e86\u4e00\u4e9b\u7ecf\u5178\u9898\u76ee\uff0c\u591a\u6570\u6765\u6e90\u4e8eBUUOJ\uff0c\u4f9b\u8bfb\u8005\u5b66\u4e60\uff1b\u8bfb\u8005\u4e5f\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u9898\u76ee\u8fdb\u884c\u63d0\u5347</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/01-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81.html","title":"\u53e4\u5178\u5bc6\u7801","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html","title":"\u7ecf\u5178\u73b0\u4ee3\u975e\u5bf9\u79f0\u7b97\u6cd5","text":"<p>\u7b97\u6cd5\u539f\u7406\uff1amod \u8fd0\u7b97\u662f\u4e0d\u53ef\u9006\u7684\uff0c\u6216\u8005\u8bf4\u5f88\u96be\u9006\u8f6c</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html#rsa","title":"RSA\u52a0\u5bc6\u7b97\u6cd5","text":"<p>\u7b97\u6cd5\u539f\u7406\uff1a</p> Text Only<pre><code>1.\u751f\u6210\u4e00\u5bf9\u8d28\u6570p\u3001q\uff0c\u8ba1\u7b97n = p * q\n2.\u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570 \u03c6(n) = (p-1) * (q-1)\uff0c\u8bb0\u4f5cm\n3.\u627e\u5230\u4e00\u4e2a\u6570\u5b57e\uff0c\u4e0em\u4e92\u8d28\n4.\u8ba1\u7b97e\u5728mod m\u57df\u4e0a\u7684\u9006\u5143\uff0c\u8bb0\u4e3ad\n5.(n,e)\u4e3a\u516c\u94a5\uff0c(n,d)\u4e3a\u79c1\u94a5\n</code></pre> <p>\u52a0\u5bc6\uff1a \u5bc6\u6587=\u660e\u6587^e mod n</p> <p>\u89e3\u5bc6\uff1a \u660e\u6587=\u5bc6\u6587^e mod n</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html#dh","title":"DH\u7b97\u6cd5","text":"<p>Diffie - Hellman \u5bc6\u94a5\u4ea4\u6362\u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u79d8\u94a5\u5171\u4eab\u7f51\u7edc\u534f\u8bae\uff0c\u65e0\u6cd5\u907f\u514d\u4e2d\u95f4\u4eba\u653b\u51fb\u3002</p> <p>\u7b97\u6cd5\u539f\u7406\uff1a\u5047\u8bbeAli\u548cBob\u9700\u8981\u76f8\u4e92\u901a\u4fe1\u5e76\u5171\u4eab\u5bc6\u94a5</p> Text Only<pre><code>1.Ali\u548cBob\u6709\u4e00\u5bf9\u5171\u4eab\u53c2\u6570P\u3001G\uff08\u516c\u94a5\uff09\uff0c\u6b64\u4fe1\u606f\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u8bc6\u522b\u3002\n2.Ali\u81ea\u5df1\u5148\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570A\uff08Ali\u7684\u79c1\u94a5\uff09\uff0c\u5e76\u4e0d\u5c06A\u544a\u8bc9\u4efb\u4f55\u4eba\u3002\n3.Bob\u81ea\u5df1\u5148\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570B\uff08Bob\u7684\u79c1\u94a5\uff09\uff0c\u5e76\u4e0d\u5c06B\u544a\u8bc9\u4efb\u4f55\u4eba\u3002\n4.Ali\u8ba1\u7b97 $G^A mod P$ \u7684\u503c\u4f20\u9012\u7ed9Bob\uff0cBob\u8ba1\u7b97 G^B mod P \u7684\u503c\u4f20\u9012\u7ed9Ali\n5.Ali\u5c06Bob\u4f20\u9012\u7684\u503c ^A mod P \uff0cBob\u5c06Ali\u4f20\u9012\u7684\u503c ^B mod P\uff0c\u6b64\u65f6\u4e8c\u4eba\u83b7\u5f97\u7684\u6570\u5b57\u90fd\u4e3a S=G^{A*B} mod P\n6.\u4e8c\u8005\u53ef\u4ee5\u5229\u7528S\u5bf9\u4e00\u4e32\u660e\u6587\u8fdb\u884c\u52a0\u5bc6\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html#dhe","title":"DHE\u7b97\u6cd5","text":"<p>static DH\u7b97\u6cd5\uff08\u5df2\u7ecf\u88ab\u5e9f\u5f03\uff09\uff1a\u901a\u8baf\u7684\u53cc\u65b9\u4e2d\uff0c\u4e00\u65b9\u7684\u79c1\u94a5\u662f\u9759\u6001\u7684\uff0c\u6bcf\u6b21\u5bc6\u94a5\u534f\u5546\u7684\u65f6\u5019\u6709\u4e00\u65b9\u7684\u79c1\u94a5\u90fd\u6709\u4e00\u6837\u7684\uff0c\u4e00\u822c\u662f\u670d\u52a1\u5668\u65b9\u56fa\u5b9a\uff0ca\u4e0d\u53d8\uff0c\u5ba2\u6237\u7aef\u7684\u79c1\u94a5\u968f\u673a\u751f\u6210\u3002</p> <p>hacker\u53ef\u4ee5\u622a\u83b7\u6d77\u91cf\u5bc6\u94a5\u534f\u5546\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\uff0c\u5bb9\u7eb3\u540e\u8ba1\u7b97\u51fa\u4f1a\u8bdd\u5bc6\u94a5\uff0c\u8fdb\u800c\u4e4b\u524d\u622a\u83b7\u7684\u52a0\u5bc6\u6570\u636e\u4f1a\u88ab\u7834\u89e3</p> <p>DHE\u7b97\u6cd5\uff08\u73b0\u5728\u5e38\u7528\u7684\uff09\uff1aE\u6307ephemeral\uff08\u4e34\u65f6\u6027\u7684\uff09\uff0c\u6bcf\u6b21\u670d\u52a1\u5668\u7684\u79c1\u94a5\u4e5f\u662f\u968f\u673a\u751f\u6210\uff1b\u7f3a\u70b9\u662f\u7b97\u6cd5\u8ba1\u7b97\u6027\u80fd\u4e0d\u4f73\uff0c\u9700\u8981\u8fdb\u884c\u5927\u91cf\u4e58\u6cd5\u8fd0\u7b97</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html#ecc","title":"ECC\u7b97\u6cd5","text":"<p>\u692d\u5706\u66f2\u7ebf\u57fa\u672c\u516c\u5f0f\uff1a y<sup>2=x</sup>3+ax+b</p> <p>\u52a0\u6cd5\u8fd0\u7b97\uff1a\u53d6\u4e24\u4e2a\u70b9A\u548c\u70b9B\u786e\u5b9a\u4e00\u6761\u76f4\u7ebf\uff08\u5982\u679c\u76f8\u5207\uff0c\u5219A=B\uff0c\u53d6\u5207\u7ebf\uff09\uff0c\u76f8\u4ea4\u66f2\u7ebf\u4e8e\u7b2c\u4e09\u70b9\uff0c\u5173\u4e8ex\u8f74\u7684\u5bf9\u79f0\u70b9\u4e3a\u70b9C\uff0c\u79f0\u4e3a\u4e00\u6b21\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u52a0\u6cd5\u8fd0\u7b97</p> Text Only<pre><code>1.Alice\u751f\u6210\u4e00\u4e2a\u79c1\u94a5a\u548c\u4e00\u4e2a\u516c\u94a5G\uff0c\u8ba1\u7b97\u5f97\u5230\u516c\u94a5 A= a \u00b7 G\uff0c\u8868\u793aG\u8fd9\u4e2a\u70b9\u8fdb\u884c\u8fd0\u7b97a\u6b21\n2.Bob\u63a5\u6536\u516c\u94a5\uff0c\u5f97\u5230G\u3001A\uff0c\u751f\u6210\u4e00\u4e2a\u79c1\u94a5b\uff0c\u8ba1\u7b97\u5f97\u5230\u516c\u94a5 B= b \u00b7 G\n3.\u6700\u7ec8\u5bc6\u94a5=a \u00b7 B=b \u00b7 A = a \u00b7 b \u00b7 G\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html#ecdheunfixed","title":"ECDHE\u7b97\u6cd5\uff08unfixed\uff09","text":"<p>\u5728DHE\u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\u5229\u7528\u4e86ECC\u692d\u5706\u66f2\u7ebf\u7279\u6027\uff0c\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u8ba1\u7b97\u91cf\u8ba1\u7b97\u51fa\u516c\u94a5\u53ca\u5176\u6700\u7ec8\u4f1a\u8bdd\u7684\u5bc6\u94a5</p> <p>1.Ali\u548cBob\u4e8b\u5148\u5546\u91cf\u597d\u7528\u54ea\u79cd\u692d\u5706\u66f2\u7ebf(a,b)\u53ca\u5176\u66f2\u7ebf\u4e0a\u7684\u57fa\u70b9(G),\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u516c\u5f00\u7684 2.Ali\u548cBob\u5404\u81ea\u968f\u673a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u4f5c\u4e3a\u79c1\u94a5d\uff0c\u4ee4\u57fa\u70b9G\u8fdb\u884cd\u6b21\u8fd0\u7b97\u5f97\u5230\u70b9Q\uff0c\u6b64\u65f6Ali\u7684\u516c\u94a5\u4e3aQ1\uff0cBob\u7684\u516c\u94a5\u4e3aQ2 3.\u5f85\u8865\u5145</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/02-%E7%BB%8F%E5%85%B8%E7%8E%B0%E4%BB%A3%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95.html#_2","title":"\u4e60\u9898","text":"<p>[\u653b\u9632\u4e16\u754c]easy_ECC</p> Text Only<pre><code>\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6Ep(a,b)\u53c2\u6570\u4e3a\np = 15424654874903\na = 16546484\nb = 4548674875\nG(6478678675,5636379357093)\n\u79c1\u94a5\u4e3a\nk = 546768\n\u6c42\u516c\u94a5K(x,y)\n10951795347874930624\n</code></pre> <p>\u4f7f\u7528\u79bb\u7ebf\u5de5\u5177\u5373\u53ef</p> <p></p> <p>\u518d\u8ba1\u7b97Rx\u548cRy\u7684\u52a0\u548c\u5373\u4e3aflag</p> <p></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html","title":"RSA","text":"<p>\uff08\u90e8\u5206\u5185\u5bb9\u672a\u5206\u7c7b\u5b8c\u5168\uff0c\u4f46\u57fa\u672c\u53ef\u4f9b\u9605\u8bfb\u5b66\u4e60\uff09</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#_1","title":"\u4e00\u4e9b\u7b80\u5355\u9898\u76ee\uff0c\u6765\u70ed\u70ed\u8eab","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#n","title":"\u66b4\u529b\u7834\u89e3n","text":"<p>1.\u4f7f\u7528 \u5728\u7ebf\u5de5\u5177\u5206\u89e3\u5927\u8d28\u6570</p> <p>2.\u4f7f\u7528\u62d3\u6b27\u5f97\u5230\u79c1\u94a5d</p> Python<pre><code>def exgcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        gcd, x, y = ex(b % a, a)\n        return (gcd, y - (b // a) * x, x)\n</code></pre> <p>3.\u8ba1\u7b97flag bytes_to_long\u540e\u7684\u53d8\u91cfm</p> Python<pre><code>m = pow( c , d , n )\n</code></pre> <p>4.\u5c06\u6574\u6570m\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32flag</p> Python<pre><code>m = 11604008605541818712966720001582142618375831382642459409129147724359509689501272522137152998605953387230762300554700585488547840790592562824581160993059033\n\n# \u5c06\u6574\u6570\u8f6c\u5316\u4e3a\u5b57\u8282\u4e32\nflag = m.to_bytes((m.bit_length() + 7) // 8, 'big')\n\n# \u8f93\u51fa\u5b57\u8282\u4e32\nprint(flag)\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#baby_rsa","title":"Baby_RSA","text":"<p>\u56e0\u4e3a c = ( m ^ e ) % n</p> <p>\u6240\u4ee5 c = ( m ^ e ) - k * n , \u5176\u4e2d k\u2208 N*</p> <p>\u9898\u76ee\u5df2\u77e5 c , e , n\uff0c\u6c42m\uff1b\u4e14 c \u548c n \u90fd\u662f\u6bd4\u8f83\u5927\u7684\u6570\uff0c\u76f8\u5bf9\u63a5\u8fd1\u3002</p> <p>\u6545\u53ef\u4ee5\u679a\u4e3e k \u7684\u503c\uff0c\u5f97\u5230m\u7684\u503c</p> Text Only<pre><code>def solve( c , e , n ):\n    k = 0\n    while 1:\n        m = c + k * n\n        result , check = gmpy2.iroot(m, e)#\u6c42\u5927\u6574\u6570x\u5f00n\u6b21\u6839,result\u662f\u8fd4\u56de\u7684\u7ed3\u679c\uff0ccheck\u6765\u5224\u65ad\u662f\u5426\u6b63\u5e38\u8fd4\u56de\n        if check == 1:\n            return check\n        k += 1\nm = solve( c , e , n )\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#crt_rsa","title":"Crt_RSA","text":"<p>n\u662f\u4e24\u4e2a\u5927\u8d28\u6570\u7684\u4e58\u79ef\uff0c\u56e0\u4e3a\u6570\u592a\u5927\u800c\u5bfc\u81f4\u89e3\u5bc6\u7f13\u6162</p> <p>\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u53ef\u4ee5\u5e2e\u52a9\u4f18\u5316\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u5c06<code>\u6a21\u5e42\u8fd0\u7b97</code>\u5206\u89e3\u4e3a<code>\u5bf9\u4e0d\u540c\u6a21\u6570\u7684\u6a21\u5e42\u8fd0\u7b97</code>\uff0c\u4ece\u800c\u964d\u4f4e\u590d\u6742\u5ea6</p> Text Only<pre><code>e = 3\nn = [n1,n2,n3]\nc = [c1,c2,c3]\nM, mod = crt(n, c)#M\u662fCRT\u7684\u7ed3\u679c\uff0c\u5373\u5408\u5e76\u591a\u4e2aRSA\u6a21\u6570\u540e\u5f97\u5230\u7684\u7ed3\u679c\nm, check = gmpy2.iroot(M, e)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#embryorsa","title":"EmbryoRSA","text":"<p>1.\u8ba1\u7b97n\u548c\u03c6(n)</p> Python<pre><code>n = p * q\npn = (p-1) * (q-1)\n</code></pre> <p>2.\u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u627e\u5230d</p> Python<pre><code>def extended_gcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        gcd, x, y = extended_gcd(b % a, a)\n        return (gcd, y - (b // a) * x, x)\n</code></pre> <p>3.\u5f97\u5230\u79c1\u94a5d</p> Python<pre><code>gcd, x, y = extended_gcd(e, phi_n)\nd = x % pn\n</code></pre> <p>4.\u5f97\u5230flag</p> Text Only<pre><code>m = pow( c , d , n )\nprint( ans )\nflag = m.to_bytes((m.bit_length() + 7) // 8, 'big')\nprint(flag)\n</code></pre> <p>RSA\u7b97\u6cd5</p> <p>\u751f\u6210\u79d8\u94a5</p> <p>1.\u51c6\u5907\u4e24\u4e2a\u5927\u8d28\u6570p\u548cq\uff0c\u5c06\u4ed6\u4eec\u76f8\u4e58\u5f97\u5230n=pq</p> <p>2.m=\u03c6(n)=(p-1)(q-1) 3.\u627e\u4e00\u4e2a\u6570e\u6ee1\u8db3 gcd(m,e) = 1 4.ed mod m = 1\uff08\u8ba1\u7b97e\u5728mod m\u4e0b\u7684\u9006\u5143\uff0c\u8bb0\u4e3ad\uff09 5.(n,e)\u4e3a\u516c\u94a5\uff0c(n,d)\u4e3a\u79c1\u94a5</p> <p>RSA\u79d8\u94a5\u751f\u6210\u4ee3\u7801</p> Python<pre><code>p = 1000000007\nq = 1000000009\ne = 65521\nn = p * q\nm = (p-1) * (q-1)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, x, y = extended_gcd(b % a, a)\n        return (g, y - (b // a) * x, x)\n\ndef mod_inverse(e, m):\n    g, x, y = extended_gcd(e, m)\n    if g != 1:\n        raise ValueError(\"The modular inverse does not exist\")\n    else:\n        return x % m\n\nd = mod_inverse(e, m)\n\nprint(f\"\u516c\u94a5\u662f({n},{e})\")\nprint(f\"\u79c1\u94a5\u662f({n},{d})\")\n</code></pre> <p>RSA\u52a0\u5bc6\u4ee3\u7801</p> Python<pre><code>from Crypto.Util.number import bytes_to_long\n#from Cryptodome.Util.number import bytes_to_long\n\nflag = 'hello world'\nflag_bytes = flag.encode('utf-8')  # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\nx = int.from_bytes(flag_bytes, byteorder='big')  # \u4f7f\u7528big-endian\u5b57\u8282\u5e8f\nn = 77\ne = 17\ny = pow(x, e, n)\nprint(y)\n</code></pre> <p>RSA\u89e3\u5bc6\u4ee3\u7801</p> Python<pre><code>y = 27\nn = 77\nd = 53\ne = 17\n\n\n# \u89e3\u5bc6\u5bc6\u6587\nx = pow(y, d, n)\n\n# \u5c06\u89e3\u5bc6\u540e\u7684\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\nflag_bytes = x.to_bytes((x.bit_length() + 7) // 8, byteorder='big')\n\n# \u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\nflag = flag_bytes.decode('utf-8')\n\nprint(\"\u89e3\u5bc6\u540e\u7684\u660e\u6587:\", flag)\n</code></pre> <p>\u51fa\u73b0\u7684\u95ee\u9898</p> <p>1.<code>pip install pycryptodome</code>\u62a5\u9519</p> <p><code>pip install --user pycryptodome</code></p> <p>\uff08ChatGPT\u89e3\u51b3\uff09</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctf-rsa","title":"BUUCTF\u9898\u5e93-RSA","text":"<p>\u6b64\u540e\u8fd9\u90e8\u5206\u7684\u9898\u76ee\uff0c\u5747\u6765\u81eaBUUOJ</p> <p>\u5728\u6b64\u7bc7wp\u4e2d\uff0c\u7edf\u4e00\u89c4\u5b9a\uff0cp\u548cq\u8868\u793a\u4e24\u4e2a\u5927\u8d28\u6570\uff0c\u4ed6\u4eec\u7684\u4e58\u79ef\u8bb0\u4f5cn\uff0cn\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)\uff0c\u516c\u94a5\u662f(n,e)\uff0c\u79c1\u94a5\u662f(n,d)\uff0c\u660e\u6587\u662fm\uff0c\u5bc6\u6587\u662fc\uff0c\u6ee1\u8db3<code>c = m^e mod n</code> <code>m = c^d mod n</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsarsa-p-q-e-cm","title":"rsarsa \u5df2\u77e5p q e c\uff0c\u6c42m","text":"Text Only<pre><code>import gmpy2\n\np =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483\nq =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407\ne =  65537\nc =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034\n\nn = p * q\nphi = (p-1) * (q-1)\nd = gmpy2.invert(e,phi)\nflag = pow( c , d , n )\n\nprint(flag)\n</code></pre> <p>flag{5577446633554466577768879988}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa-p-q-e-d","title":"RSA \u5df2\u77e5p q e \uff0c\u6c42d","text":"Text Only<pre><code>import gmpy2\n\np=473398607161\nq=4511491\ne=17\nphi = (p-1) * (q-1)\n\nd = pow( e , phi-2 , phi )#m\u975e\u8d28\u6570\uff0c\u4e0d\u80fd\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\nprint(d)#\u9519\u8bef\u7b54\u6848\n\nd = gmpy2.invert( e , phi )\nprint(d)\n</code></pre> <p>flag{125631357777427553}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa1-dpdq","title":"RSA1 \u5df2\u77e5dp,dq","text":"<p>\u5df2\u77e5p q dp dq c</p> <p><code>dp = d % ( p - 1 ) , dq = d % ( q - 1 )</code></p> <p><code>m1 = y^dp mod p , m2 = y^dq mod q</code></p> <p><code>m = ( ( m2 - m1 ) * Inv( invert( q , p ) ) % p ) * q + m2</code></p> <p>\u8bc1\u660e</p> <p></p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\np = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 \nq = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 \ndp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 \ndq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 \nc = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852\n\nm1 = pow( c , dp , p )\nm2 = pow( c , dq , q )\nm = (((m2-m1) * gmpy2.invert( q , p ) ) % p ) * q + m2\n\nprint( long_to_bytes(m) )\n</code></pre> <p>flag{W31c0m3_70_Ch1n470wn}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa2-dp","title":"RSA2 dp\u6cc4\u9732","text":"<p>\u5df2\u77e5e , n , c , dp</p> <p>\u8bc1\u660e</p> <p></p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\ne = 65537\nn = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113\ndp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657\nc = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751\n\nfor i in range( 1 , e ):\n    if (dp*e-1)%i == 0:#\u5224\u65adp\u5b58\u5728\n        if n%(((dp*e-1)//i)+1) == 0 :#p\u53ef\u4ee5\u628an\u6574\u9664\n            p = (dp*e-1)//i+1\n            q = n // p\n            phi = (p-1) * (q-1)\n            d = gmpy2.invert(e,phi)\n            m = pow( c , d , n )\n\nprint( long_to_bytes(m) )\n</code></pre> <p>flag{wow_leaking_dp_breaks_rsa?_98924743502}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa3","title":"RSA3 \u5171\u819c\u653b\u51fb","text":"<p>\u5df2\u77e5n,c1,e1,c2,e2</p> <p>\u8bc1\u660e</p> <p></p> Text Only<pre><code>from gmpy2 import invert\nfrom Crypto.Util.number import long_to_bytes\nn=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801\nc1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361\ne1=11187289\nc2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397\ne2=9647291\n\ndef exgcd( a , b ):\n    if a == 0:\n        return ( b , 0 , 1)\n    else:\n        g , y , x = exgcd( b%a , a )\n        return ( g , x-(b//a)*y , y )\n\njudge , s1 , s2 = exgcd( e1 , e2 )\n\nif s1 &lt; 0:\n    s1 = - s1\n    c1 = invert( c1 , n )\nelif s2 &lt; 0:\n    s2 = - s2\n    c2 = invert( c2 , n )\nm = pow( c1 , s1 , n ) * pow( c2 , s2 , n ) % n\n\nprint( long_to_bytes(m) )\n</code></pre> <p>flag{49d91077a1abcb14f1a9d546c80be9ef}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa_1","title":"RSA","text":"<p>\u5c06pub.key\u7528\u8bb0\u4e8b\u672c\u6253\u5f00\u5f97\u5230\u516c\u94a5</p> <p>\u4f7f\u7528\u516c\u94a5\u89e3\u6790\u7f51\u7ad9\u8fdb\u884c\u89e3\u6790http://www.hiencode.com/pub_asys.html</p> <p></p> <p>n\u4e0d\u662f\u7279\u522b\u5927\uff0c\u4f7f\u7528\u5728\u7ebf\u7f51\u7ad9\u8fdb\u884c\u5927\u8d28\u6570\u5206\u89e3http://www.factordb.com/</p> <p></p> Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nfrom gmpy2 import invert\nimport rsa\n\np = 285960468890451637935629440372639283459\nq = 304008741604601924494328155975272418463\ne = 65537\nn = p * q\nphi = (p-1) * (q-1)\nd = invert( e , phi )\n\nkey = rsa.PrivateKey(n,e,d,q,p)#\u79c1\u94a5\u5305\u542b(n,e,d,p,q)\nwith open(\"C:\\\\Users\\\\coper\\\\Downloads\\\\0eaf8d6c-3fe5-4549-9e81-94ac42535e7b\\\\flag.enc\",\"rb\") as f:  #\u4ee5\u4e8c\u8fdb\u5236\u8bfb\u6a21\u5f0f\uff0c\u8bfb\u53d6\u5bc6\u6587  \n    f = f.read()\n    print(rsa.decrypt(f,key))# f:\u516c\u94a5\u52a0\u5bc6\u7ed3\u679c  key:\u79c1\u94a5\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsaroll","title":"rsaroll","text":"<p>\u5bf9\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u591a\u4e2a\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6</p> Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nfrom gmpy2 import invert\n\np = 18443\nq = 49891\ne = 19\nn = p * q\nphi = (p-1) * (q-1)\nd = invert( e , phi )\n\nflag = []\nwith open(\"C:\\\\Users\\\\coper\\\\Downloads\\\\02c01a13-3a86-47de-8648-f03328a5e5d8\\\\RsaRoll\\\\data.txt\",\"r\") as f:  #\u4ee5\u4e8c\u8fdb\u5236\u8bfb\u6a21\u5f0f\uff0c\u8bfb\u53d6\u5bc6\u6587  \n    for line in f.readlines():\n        line = line.strip('\\n')\n        flag.append(chr(pow(int(line),d,n)))\nfor i in flag:\n    print(i,end='')\n</code></pre> <p>flag{13212je2ue28fy71w8u87y31r78eu1e2}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#dangerous-rsa","title":"Dangerous RSA","text":"<p>\u4f4e\u52a0\u5bc6\u6307\u6570\u653b\u51fb\u3002\u6761\u4ef6\uff1ae\u975e\u5e38\u5c0f\uff08python\u592atm\u795e\u5947\u4e86\uff09</p> <p><code>c = m^e % n</code></p> <p>1.<code>m^e &lt; n</code>\u65f6\uff0c<code>c = m^e</code> 2.<code>m^e &gt; n</code>\u65f6\uff0c<code>c = m^e - k*n</code>\uff0c\u5373 <code>m^e = k*n+C</code>\u3002\u5bf9k\u8fdb\u884c\u7206\u7834\uff0c\u53ea\u8981k\u6ee1\u8db3 k*n+C\u80fd\u5f00e\u6b21\u65b9\u6839\u5c31\u53ef\u4ee5</p> <p>gmpy2\u5e93\u4e2diroot(a,b) \u8868\u793a\u5bf9a\u5f00b\u6b21\u65b9\u6839\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u7b54\u6848\uff0c\u7b2c\u4e8c\u4e2a\u6570\u8868\u793a\u662f\u4e0d\u662f\u6574\u6570</p> <p>\u8fd0\u884c\u65f6\u53d1\u73b0n\u7684\u6570\u503c\u4e2d\u591a\u4e00\u4e2a'L'\uff0c\u4e0d\u662f16\u8fdb\u5236\uff0c\u5220\u6389\u5373\u53ef\u83b7\u5f97flag</p> Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nn = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793\nc = 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365\ne = 0x3\nk = 0\n\nwhile 1:\n    flag = gmpy2.iroot( c+k*n , e )\n    if flag[1] == True:\n        print( long_to_bytes(flag[0]) )\n        break\n    k = k + 1\n</code></pre> <p>flag{25df8caf006ee5db94d48144c33b2c3b}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa2","title":"rsa2","text":"<p>\u53ea\u6709\u516c\u94a5\uff0c\u90fd\u5f88\u5927</p> <p>RSAwienerHacker\u79bb\u7ebf\u5de5\u5177\u8fdb\u884c\u7834\u89e3</p> <p></p> <p>hashlib\u5728python3\u4e0a\u8fd0\u884c\u4e0d\u4e86\uff0c\u5f97\u7528python2</p> <p></p> <p>flag{47bf28da384590448e0b0d23909a25a4}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa_2","title":"\u4e00\u4e9b\u6bd4\u8d5b\u4e2d\u7684 RSA \u76f8\u5173\u9898\u76ee","text":""},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#guet-ctf2019babyrsa","title":"[GUET-CTF2019]BabyRSA","text":"<p>p + q = x , (p+1)*(q+1) = y</p> <p>y=(p+1)*(q+1)=p*q+p+q+1=n+x+1</p> <p>n=y-x-1</p> <p></p> <p>flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfafctf2018rsa","title":"[BUUCTF\u00b7AFCTF2018]\u53ef\u601c\u7684RSA","text":"<p>public.key:</p> Text Only<pre><code>-----BEGIN PUBLIC KEY-----\nMIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/4\n3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv\ntcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59\nNeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT\n+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt\nSi8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM\n5q5TAgMBAAE=\n-----END PUBLIC KEY-----\n</code></pre> <p>flag.enc:</p> Text Only<pre><code>GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==\n</code></pre> <p>\u8bfb\u53d6public.key</p> Text Only<pre><code>from Crypto.PublicKey import RSA\nf = open('public.key', 'rb').read()\npub = RSA.importKey(f)\nn = pub.n\ne = pub.e\nprint(n, '\\n', e)\n</code></pre> <p>\u5f97\u5230\u7684n\u8fdb\u884c\u5206\u89e3</p> <p></p> <p>\u7f16\u5199\u811a\u672c\u5373\u53ef\u89e3\u5bc6</p> Text Only<pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom base64 import b64decode\nimport libnum\nimport gmpy2\n\ne = 65537\np = 3133337\nq = 25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939\nn = p * q\nphi = (p-1)*(q-1)\nd = int(gmpy2.invert( e , phi ))#\u8fd9\u4e00\u6b65\u4e00\u5b9a\u8981\u8f6c\u6210int\uff0c\u4e0d\u7136mpz\u4f1a\u62a5\u9519\n\nkey_info = RSA.construct((n, e, d, p, q))\nkey = RSA.importKey(key_info.exportKey())\nkey = PKCS1_OAEP.new(key)\nf = open('flag.enc', 'r').read()\nc = b64decode(f)\nflag = key.decrypt(c)\nprint(flag)\n</code></pre> <p>flag:<code>flag{R54_|5_$0_B0rin9}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#ctfshownoeasyrsa","title":"[CTFshow\u5143\u65e6\u6c34\u53cb\u8d5b]NOeasyRSA","text":"Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nfrom Crypto.Util.strxor import strxor\nfrom random import randint\nfrom flag import FLAG\n\ndef f(x, n):  \n    return (pow(u,n,p)*x + v*(1-pow(u,n,p))*pow(1-u, -1, p)) % p  \n\np = 97201997431130462639713476119411091922677381239967611061717766639853376871260165905989218335681560177626304205941143288128749532327607316527719299945637260643711897738116821179208534292854942631428531228316344113303402450588666012800739695018334321748049518585617428717505851025279186520225325765864212731597\nu = 14011530787746260724685809284106528245188320623672333581950055679051366424425259006994945665868546765648275822501035229606171697373122374288934559593175958252416643298136731105775907857798815936190074350794406666922357841091849449562922724459876362600203284195621546769313749721476449207319566681142955460891977927184371401451946649848065952527323468939007868874410618846898618148752279316070498097254384228565132693552949206926391461108714034141321700284318834819732949544823937032615318011463993204345644038210938407875147446570896826729265366024224612406740371824999201173579640264979086368843819069035017648357042\nv = 16560637729264127314502582188855146263038095275553321912067588804088156431664370603746929023264744622682435376065011098909463163865218610904571775751705336266271206718700427773757241393847274601309127403955317959981271158685681135990095066557078560050980575698278958401980987514566688310172721963092100285717921465575782434632190913355536291988686994429739581469633462010143996998589435537178075521590880467628369030177392034117774853431604525531066071844562073814187461299329339694285509725214674761990940902460186665127466202741989052293452290042871514149972640901432877318075354158973805495004367245286709191395753\nw = 30714296289538837760400431621661767909419746909959905820574067592409316977551664652203146506867115455464665524418603262821119202980897986798059489126166547078057148348119365709992892615014626003313040730934533283339617856938614948620116906770806796378275546490794161777851252745862081462799572448648587153412425374338967601487603800379070501278705056791472269999767679535887678042527423534392867454254712641029797659150392148648565421400107500607994226410206105774620083214215531253544274444448346065590895353139670885420838370607181375842930315910289979440845957719622069769102831263579510660283634808483329218819353\na = randint(0, 2**2048)\nb = randint(0, 2**2048)\nA = f(w, a)\nB = f(w, b)\nkey = long_to_bytes(f(B, a))[:len(FLAG)]\nenc = strxor(FLAG, key)\nprint(f\"{A = }\")\nprint(f\"{B = }\")\nprint(f\"{enc = }\")\n\n\"\"\"\nA = 19000912802080599027672447674783518419279033741329820736608320648294849832904652704615322546923683308427498322653162857743332527479657555691849627174691056234736228204031597391109766621450008024310365149769851160904834246087493085291270515883474521052340305802461028930107070785434600793548735004323108063823\nB = 73344156869667785951629011239443984128961974188783039136848369309843181351498207375582387449307849089511875560536212143659712959631858144127598424003355287131145957594729789310869405545587664999655457134475561514111282513273352679348722584469527242626837672035004800949907749224093056447758969518003237425788\nenc = b'\\xfd\\xc1\\xb7\\x9d\"$\\xc2\\xb0\\xb5\\xee\\xf89\\xa4V\\x8e\\x17\\x01K9\\xbc.\\x92=\\x85\\x80\\xd4\\x03\\xefAl\"\\xbd\\x8b\\xcdL\\xb5\\xa3!'\n\"\"\"\n</code></pre> <p>\u53ea\u8981\u601d\u60f3\u4e0d\u6ed1\u5761\uff0c\u8fd9\u9898\u5c31\u662f\u63a8\u63a8\u5f0f\u5b50\uff08\u545c\u545c\u545c\u6211\u81ea\u5df1\u505a\u7684\u65f6\u5019\u628a\u6284\u9519\u597d\u51e0\u4e2a\u6570\u6b7b\u6d3b\u8c03\u4e0d\u51fa\u6765\u545c\u545c...\uff09</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\nfrom Crypto.Util.strxor import strxor\n\np = 97201997431130462639713476119411091922677381239967611061717766639853376871260165905989218335681560177626304205941143288128749532327607316527719299945637260643711897738116821179208534292854942631428531228316344113303402450588666012800739695018334321748049518585617428717505851025279186520225325765864212731597\nu = 14011530787746260724685809284106528245188320623672333581950055679051366424425259006994945665868546765648275822501035229606171697373122374288934559593175958252416643298136731105775907857798815936190074350794406666922357841091849449562922724459876362600203284195621546769313749721476449207319566681142955460891977927184371401451946649848065952527323468939007868874410618846898618148752279316070498097254384228565132693552949206926391461108714034141321700284318834819732949544823937032615318011463993204345644038210938407875147446570896826729265366024224612406740371824999201173579640264979086368843819069035017648357042\nv = 16560637729264127314502582188855146263038095275553321912067588804088156431664370603746929023264744622682435376065011098909463163865218610904571775751705336266271206718700427773757241393847274601309127403955317959981271158685681135990095066557078560050980575698278958401980987514566688310172721963092100285717921465575782434632190913355536291988686994429739581469633462010143996998589435537178075521590880467628369030177392034117774853431604525531066071844562073814187461299329339694285509725214674761990940902460186665127466202741989052293452290042871514149972640901432877318075354158973805495004367245286709191395753\nw = 30714296289538837760400431621661767909419746909959905820574067592409316977551664652203146506867115455464665524418603262821119202980897986798059489126166547078057148348119365709992892615014626003313040730934533283339617856938614948620116906770806796378275546490794161777851252745862081462799572448648587153412425374338967601487603800379070501278705056791472269999767679535887678042527423534392867454254712641029797659150392148648565421400107500607994226410206105774620083214215531253544274444448346065590895353139670885420838370607181375842930315910289979440845957719622069769102831263579510660283634808483329218819353\nA = 19000912802080599027672447674783518419279033741329820736608320648294849832904652704615322546923683308427498322653162857743332527479657555691849627174691056234736228204031597391109766621450008024310365149769851160904834246087493085291270515883474521052340305802461028930107070785434600793548735004323108063823\nB = 73344156869667785951629011239443984128961974188783039136848369309843181351498207375582387449307849089511875560536212143659712959631858144127598424003355287131145957594729789310869405545587664999655457134475561514111282513273352679348722584469527242626837672035004800949907749224093056447758969518003237425788\nenc = b'\\xfd\\xc1\\xb7\\x9d\"$\\xc2\\xb0\\xb5\\xee\\xf89\\xa4V\\x8e\\x17\\x01K9\\xbc.\\x92=\\x85\\x80\\xd4\\x03\\xefAl\"\\xbd\\x8b\\xcdL\\xb5\\xa3!'\n\nua = ((u-1)*A+v)*gmpy2.invert((u-1)*w+v,p) % p\nkey = (ua * B + v * ( 1 - ua ) * gmpy2.invert( 1-u , p ) ) % p\nflag = strxor( enc , long_to_bytes(key)[:len(enc)] )\nprint( flag )\n</code></pre> <p>flag:<code>ctfshow{This_Is_Really_Not_So_Smooth!}</code></p> <p>\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u53d6\u8d1f\u8fd0\u7b97\u5728\u6a21\u57df\u4e0a\u5bf9\u503c\u6ca1\u6709\u6539\u53d8</p> Text Only<pre><code>ua = ((u-1)*A+v)*gmpy2.invert((u-1)*w+v,p) % p\nub = ((A*((1-u))-v) * gmpy2.invert(w*(1-u)-v,p)) % p\nassert ua == ub\n</code></pre> <p>\u901a\u8fc7yafu\u8ba1\u7b97\uff0cp\u662f\u8d28\u6570</p> <p></p> <p>\u56de\u7b54\uff1a\u56e0\u4e3a\u6709\u9006\u5143\uff0c\u662f\u5206\u5f0f\uff1b\u5206\u5b50\u5206\u6bcd\u540c\u65f6\u53d6\u8d1f\uff0c\u503c\u4e0d\u53d8</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#ctfshownoeasyrsa_1","title":"[CTFshow\u5143\u65e6\u6c34\u53cb\u8d5b]NOeasyRSA","text":"Text Only<pre><code>import random\nfrom hashlib import md5\nfrom Crypto.Util.number import *\nfrom flag import flag\n\ndef get_state(kbits, k):\n    seed = [(random.getrandbits(kbits) &gt;&gt; k) &amp; 0xfffffff for i in range(624)]\n    state = (3, tuple(seed + [0]), None)\n    return state\n\n\ndef give_gift(kbits, num):\n    gift = [random.getrandbits(kbits) for i in range(num)]\n    e = random.getrandbits(7)\n    l_num = num - e\n    s_box = list(range(num))\n    random.shuffle(s_box)\n    l_gift = [gift[i] for i in s_box[:l_num]]\n    return (l_gift, s_box[:l_num], e)\n\n\ndef enc_flag(state, e):\n    key = bytes_to_long(md5(long_to_bytes(state[1][e])).digest())\n    enc = bytes_to_long(flag) ^ key\n    return enc\n\n\nkbits, k, num = random.randrange(64), random.randrange(16), random.randrange(400, 600)\nstate = get_state(kbits, k)\nrandom.setstate(state)\ngift = give_gift(kbits, num)\nenc = enc_flag(state, gift[2])\nprint(gift, enc)\n\n# ([91463260584, 97520150804, 134987178347, 134745660347, 23369346769, 88869916197, 67723104206, 132211190015, 74383600340, 57357411421, 80301226226, 2847043233, 46071508714, 76391425800, 71113777427, 12603028605, 127607785895, 82661956584, 48539405830, 131191473154, 137430688091, 48026249914, 105523652421, 58217141456, 135651011411, 37099885733, 101903983367, 117525416468, 49720139903, 123719748136, 58611168240, 68135859850, 6355615539, 23769720298, 7999623487, 19601432037, 49460687576, 34510812373, 97988805553, 120381187017, 37643325426, 79314538948, 128727827227, 41938289773, 74120986880, 29052999070, 21215042789, 76176648906, 82899209179, 90338690991, 102277220210, 109016314367, 2419923303, 75246152672, 109203867772, 87030346778, 119151949871, 134868756437, 124854798665, 122116306769, 31536426951, 82104297926, 118556737102, 78417017414, 81807286830, 24688295471, 126360674284, 8870569872, 105339369180, 61910863416, 56597235604, 50122937080, 135836683348, 75685244539, 112566491901, 86217144353, 110999080631, 91114786530, 94967775022, 52680440255, 76947914257, 133052296759, 22589975272, 104632324223, 47428022416, 106941367714, 119250845700, 80196618477, 92917756830, 52764061858, 82855761133, 26800124167, 129317288037, 44051967549, 70500283649, 165355182, 78293334339, 45001066520, 84638985033, 32566871344, 38421055041, 56145488218, 83396525174, 116762960131, 58381974438, 132249926372, 36091120717, 35213963219, 88756092150, 45288405267, 27461079382, 19589246113, 28308681656, 47161727545, 69898448282, 22959597168, 132569999975, 100557577568, 127037292334, 29708117311, 33229333831, 29311547868, 135347707719, 85435007922, 54540391811, 109544478077, 66841548339, 47159376439, 42574542524, 62176229940, 3138675000, 21267865120, 22618290315, 126018690563, 21590061225, 9799239940, 10617934652, 40956988582, 131053131140, 90043238501, 81283244185, 109338223936, 68311960398, 25088200986, 28895564195, 17646619057, 82775422880, 81522377214, 28334564831, 100791800926, 85872403124, 127915503356, 72496838376, 109007653011, 96263138881, 69693106974, 4718076407, 68334177311, 31708464646, 96111162918, 48965277868, 54931198292, 105535767797, 105680940066, 109968562576, 23573023928, 48569942163, 106967716286, 94835446653, 92803971955, 53791818332, 14453746086, 132101017989, 26361874022, 32122658200, 51724426274, 114997634813, 75838224666, 89848273104, 73619960674, 97795812498, 132466249292, 25997032367, 40732063573, 59142286405, 68524304985, 49545031400, 28044368864, 95700359624, 108201671504, 127043767055, 9384509797, 120972803416, 41782179648, 76653307257, 44056421640, 101631026937, 99078185959, 54885001820, 69316726710, 19710227322, 86035277688, 42289562955, 98051921147, 79098792488, 106490144808, 13834874, 69114014086, 4418515159, 109316722991, 92603496375, 68830244931, 111949257703, 102637560761, 5012149380, 43811237017, 4526712578, 102995188930, 9165821006, 63456393327, 68912422322, 104913358841, 108860651772, 52967416635, 84227988465, 101715630295, 26297443306, 110653579906, 91487440397, 116959430145, 83499469513, 48913630229, 76988993305, 41832173701, 13694488408, 135450931748, 39634435716, 41679152695, 126540504548, 91399825525, 99004649347, 19517357430, 8279948639, 133596449559, 1449103211, 50732184406, 52247676129, 74928416312, 64326525401, 124673786795, 92042480385, 24404916254, 99622146133, 51463314254, 36722967192, 4007778602, 39109534005, 120478575332, 99886542155, 5756463131, 91679854224, 3608646835, 35655876863, 121959477025, 20408412916, 36341277711, 43627610089, 24855949002, 128669830633, 70347508117, 9425085453, 2022963949, 5053312318, 63243834495, 21497715007, 5936366400, 44266914863, 119468825913, 91726986385, 126494307832, 93847533617, 22070910941, 20204251399, 42254244260, 60489335607, 40705184865, 80919639775, 73360223499, 132743946450, 88897376509, 103144368275, 9982808097, 131532980487, 91081435155, 78915930938, 72790758029, 120696671493, 78255313725, 13309583510, 23841020581, 116634908326, 73400462338, 57323203784, 46210923108, 41134724194, 43089395737, 118503520944, 111039189867, 99418263301, 59298127775, 45252940179, 40345195432, 16841439060, 100422187771, 65791698364, 61167532292, 30338914082, 14930863404, 4703203112, 124912009656, 9195518396, 18552364400, 7303227315, 105753747788, 3079040268, 116480022128, 1215344111, 9934249637, 76178148585, 20033461169, 87344780021, 72391242953, 129540048833, 15495213032, 49963621916, 84362224351, 97100635498, 105086571577, 51150506310, 118045067326, 65966867679, 7925108854, 131280748402, 66481282233, 107509392827, 78521145687, 35456851157, 97461157961, 30244093674, 24123083085, 27909475052, 69646113342, 131930611276, 97792139629, 135917828529, 32305782568, 59325645293, 84962280113, 74529748221, 22659244720, 54776660364, 66934871192, 14824496938, 37231294479, 102244198902, 31674646475, 128196911226, 90158594889, 121714346066, 64647669235, 105263204191, 127988380741, 130175056631, 114272442969, 135960937840, 62465712860, 32333037569, 137012433094, 92929672123, 86030288893, 73602847949, 58136148471, 118893337093, 97692245318, 99539974338, 116231441994, 32445182154, 115683286754, 114711297102, 102210385893, 7687212992, 73626254322, 242951419, 5952493527, 96817591608, 45197171621, 122928115217, 106192593180, 99889552302, 125596158762, 136959359712, 67291405558, 71974425715, 115789979144, 59321975202, 84748820897, 133266408556, 6800817333, 110678933813, 96832595879, 97681824039, 89341148630, 84626208563, 58523733456, 93000780873, 68444996084, 775177345, 17204124036, 129474447019, 73589942581, 65415043899, 131703332659, 101783987222, 61388598262, 103435807803, 104030629529, 19123072760, 63612557945, 38245223725, 54345357864, 62016904380, 34602169486, 51229280420, 66624757580, 68760378559, 131556923700, 21935621011, 36349470821, 10120892182, 25883848878, 71735922493, 62883391871, 90647098, 41388569318, 52175456448, 71822304690, 19251125978, 91308465291, 50110754397, 91050175581, 83697004380, 6165622900, 129188497722, 71424103672, 57569171583, 13220579058, 118266862549, 21791521844, 70064705221, 83120075317, 83316886784, 111745960042, 26241940218, 32402511427, 118604113535, 98847819357, 117058412964, 57680263912, 83166477192], [508, 300, 327, 517, 431, 195, 41, 162, 110, 358, 433, 105, 40, 256, 172, 50, 474, 55, 67, 284, 215, 118, 513, 98, 120, 26, 155, 298, 4, 233, 243, 267, 428, 478, 494, 226, 146, 488, 20, 113, 143, 136, 49, 236, 128, 346, 501, 264, 498, 0, 413, 30, 410, 99, 1, 220, 443, 369, 290, 374, 119, 511, 483, 199, 248, 351, 388, 335, 131, 79, 496, 245, 414, 244, 158, 451, 255, 412, 47, 473, 254, 95, 299, 462, 169, 519, 493, 12, 257, 385, 432, 417, 59, 93, 455, 324, 52, 90, 407, 288, 112, 34, 528, 29, 192, 101, 419, 203, 123, 176, 177, 167, 204, 445, 416, 485, 196, 302, 424, 425, 6, 418, 258, 17, 370, 262, 227, 326, 387, 294, 295, 174, 25, 188, 81, 408, 469, 11, 472, 80, 400, 84, 382, 448, 201, 344, 7, 502, 163, 312, 484, 349, 239, 108, 411, 315, 303, 377, 36, 383, 78, 339, 491, 271, 216, 187, 322, 140, 405, 296, 402, 516, 450, 22, 482, 361, 371, 249, 453, 64, 152, 72, 194, 66, 345, 492, 447, 58, 486, 357, 149, 200, 83, 212, 219, 504, 333, 23, 439, 376, 457, 332, 153, 348, 210, 237, 173, 359, 129, 179, 426, 71, 19, 321, 338, 444, 139, 307, 515, 88, 266, 475, 182, 323, 336, 354, 272, 384, 330, 2, 211, 446, 238, 397, 230, 278, 141, 506, 181, 70, 316, 314, 459, 235, 121, 286, 76, 518, 280, 43, 111, 62, 487, 429, 524, 364, 86, 228, 353, 275, 104, 441, 268, 13, 500, 68, 87, 109, 403, 520, 231, 391, 42, 51, 328, 253, 436, 60, 497, 313, 481, 522, 53, 61, 420, 225, 189, 325, 183, 56, 100, 229, 27, 39, 3, 184, 291, 415, 454, 75, 28, 107, 347, 421, 166, 224, 279, 16, 342, 206, 207, 171, 368, 198, 456, 464, 406, 365, 151, 320, 161, 9, 89, 479, 142, 259, 401, 232, 523, 449, 150, 218, 15, 97, 287, 133, 458, 221, 63, 185, 350, 74, 135, 404, 466, 214, 116, 507, 355, 213, 178, 318, 423, 126, 395, 465, 440, 452, 157, 366, 190, 343, 467, 247, 509, 91, 205, 114, 193, 409, 375, 269, 373, 389, 148, 69, 396, 398, 317, 145, 122, 147, 512, 32, 130, 386, 94, 435, 310, 57, 422, 308, 305, 217, 8, 154, 156, 309, 223, 44, 24, 82, 160, 392, 477, 356, 134, 54, 138, 378, 331, 379, 250, 96, 489, 306, 399, 46, 18, 283, 470, 21, 360, 209, 168, 495, 180, 514, 191, 270, 510, 381, 186, 442, 31, 390, 5, 85, 92, 363, 33, 127, 197, 285, 380, 265, 48, 352, 505, 208, 438, 329, 468, 282, 45, 159, 301, 362, 341, 65, 263, 393, 222, 521, 175, 293, 37, 490, 35], 60) 912396759652812740801869061695733452669218533249083289698313292427681899514848561025221753354562922565560034\n</code></pre> <p>\u9996\u5148\u8bfb\u4ee3\u7801</p> Text Only<pre><code>#\u751f\u6210\u4e09\u4e2a\u968f\u673a\u6570\uff0c\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u5c5e\u4e8e\u53ef\u7206\u7834\u8303\u56f4\nkbits, k, num = random.randrange(64), random.randrange(16), random.randrange(400, 600)\n\n#\u751f\u6210624\u4e2a\u4e0d\u5927\u4e8e28bits\u7684\u968f\u673a\u6570\uff0c\u6253\u5305\u8fdbstate\u91cc\nseed = [(random.getrandbits(kbits) &gt;&gt; k) &amp; 0xfffffff for i in range(624)]\nstate = (3, tuple(seed + [0]), None)\n\n#\u8bbe\u7f6e\u968f\u673a\u6570\u5185\u90e8\u72b6\u6001\nrandom.setstate(state)\n\n#\u751f\u6210\u4e00\u4e2a\u968f\u673a\u957f\u5ea6\uff0c\u968f\u673a\u5927\u5c0f\u7684gift\ngift = [random.getrandbits(kbits) for i in range(num)]\n#\u751f\u6210\u4e00\u4e2ae\uff0c\u4e0d\u5927\u4e8e7bits\ne = random.getrandbits(7)\nl_num = num - e\n#\u5c06\u5c0f\u4e8enum\u7684\u6570\u6784\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u6253\u4e71\u987a\u5e8f\ns_box = list(range(num))\nrandom.shuffle(s_box)\n#\u628a\u53c8\u662f\u4e00\u4e2a\u968f\u673a\u7684\u6570\u6253\u5305\u8fdbgift\nl_gift = [gift[i] for i in s_box[:l_num]]\ngift = (l_gift, s_box[:l_num], e)\n\n#\u7528\u4e00\u4e2a\u968f\u673a\u7684\u4e0d\u5927\u4e8e28bits\u7684\u6570\u751f\u6210\u5bc6\u94a5\nkey = bytes_to_long(md5(long_to_bytes(state[1][gift[2]])).digest())\nenc = bytes_to_long(flag) ^ key\n\nprint(gift, enc)\n</code></pre> <p>\u8bfb\u4e86\u534a\u5929\uff0c\u624d\u53d1\u73b0\u524d\u9762\u7684\u5168\u662f\u968f\u673a\u6570\u7684\u968f\u673a\u6570\uff0c\u53ea\u6709key\u7684\u751f\u6210\u8fd9\u4e00\u53e5\u6709\u7528\uff0c\u76f4\u63a5\u7206\u7834\u4e00\u4e2a\u5927\u5c0f\u4e0d\u5927\u4e8e28bits\u7684\u6570\u5373\u53ef</p> <p>\u7ed9\u4e86\u4e00\u5806gift\uff0c\u5bf9\u4e8e\u5f97\u5230flag\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528</p> Text Only<pre><code>from hashlib import md5\nfrom Crypto.Util.number import *\n\nenc = 912396759652812740801869061695733452669218533249083289698313292427681899514848561025221753354562922565560034\n\nfor i in range( int(0xfffffff)+1 ):\n    key = bytes_to_long(md5(long_to_bytes(i)).digest())\n    flag = long_to_bytes(key^enc)\n    if \"\\\\\" in str(flag):\n        continue\n    else:\n        print( i , flag )\n</code></pre> <p>\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u76f4\u63a5\u67e5\u5173\u952e\u5b57<code>ctfshow</code>\u51fa\u73b0\u7684\u6570\u636e\u8fc7\u591a\uff0c\u800ctable\u6211\u53c8\u4e0d\u4f1a\u7528\uff0c\u6545\u53ef\u4ee5\u76f4\u63a5\u67e5\u627e\u4e0d\u5b58\u5728\u5341\u516d\u8fdb\u5236\u65e0\u6cd5\u7ffb\u8bd1\u6210\u5b57\u7b26\u7684\uff0c\u53ef\u4ee5\u5f97\u5230flag</p> <p></p> <p>\u627e\u51fa\u4e00\u4e2a\u6ca1\u6709\u5947\u602a\u5b57\u7b26\u3001\u5927\u62ec\u53f7\u5728\u6700\u540e\u9762\u7684\u5373\u4e3aflag</p> <p>\u89c2\u8d4f\u4e86\u5b66\u957f\u7684\u4ee3\u7801\uff0c\u5de7\u5999\u5730\u8fd0\u7528\u4e86table\uff0c\u4e0d\u7528\u624b\u52a8\u9009\u62e9flag\u4e86\uff08\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u90fd\u662f\u7ebf\u6027\u7684\uff09</p> <p>\u8fd8\u6709tqdm\uff0c\u6709\u4e86\u5b83\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u8fdb\u5ea6\u6761\u4e86\uff08\u4e0d\u8fc7\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u7684\u7535\u8111\u4e0a\u7528tqdm\u603b\u662f\u5361\u5d29\u6389\uff09</p> Text Only<pre><code>from tqdm import tqdm\nfrom Crypto.Util.number import *\nfrom hashlib import md5\nimport string\n\ndef dec(num):\n    num = int(num)\n    key = bytes_to_long(md5(long_to_bytes(num)).digest())\n    m = enc ^ key\n    m = long_to_bytes(m)\n    try:\n        flag = m.decode()\n        if all(f in table for f in flag):\n            print(flag)\n            print(f\"num = {num}\")\n    except:\n        return\n\ntable = string.ascii_letters + '0123456789_-{}'\n\nenc = 912396759652812740801869061695733452669218533249083289698313292427681899514848561025221753354562922565560034\n\nfor i in tqdm(range(0xfffffff+1)):\n    dec(i)\n</code></pre> <p>flag:<code>ctfshow{F2AD971D-66C2-2D1D-69D6-CE7DE2A49B35}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#ctfshow","title":"[CTFshow\u5143\u65e6\u6c34\u53cb\u8d5b]\u54ea\u4f4d\u5e08\u5085\u77e5\u9053\u8fd9\u4e2a\u662f\u4ec0\u4e48\u5bc6\u7801\u554a\uff1f","text":"Text Only<pre><code>import os\nfrom Crypto.Util.number import *\n\nF = lambda x: x * F(x-1) if x &gt; 0 else 1\nG = lambda x, y: F(x) // (F(y) * F(x-y))\n\ndef get_keys(n: int):\n    p = getPrime(-11+45-14)\n    print('Please wait...')\n    s_list, t_list, u_list = [], [], []\n    for i in range(n):\n        print(f'Progress: {i+1} / {n}')\n        while True:\n            t, s = sorted(getPrime(101) for _ in 'NB')\n            u = (G(s, t) % p) &amp; 0xFF\n            if (u != 0):\n                s_list.append(s)\n                t_list.append(t)\n                u_list.append(u)\n                break\n    return (s_list, t_list, p), u_list \n\nFLAG = os.getenv('FLAG', 'ctfshow{never_gonna_give_you_flag}')\nprint( FLAG )\npubkey, privkey = get_keys(len(FLAG))\nprint( pubkey, privkey )\nciphertext = bytes(x ^ k for x, k in zip(FLAG.encode(), privkey))\nprint(f'{pubkey = }')\nprint(f'{ciphertext.hex() = }')\n</code></pre> <p>F\u662f\u9636\u4e58\uff0cG\u662f\u7ec4\u5408\u6570\u7684\u8ba1\u7b97\u8fc7\u7a0b</p> <p>\u5362\u5361\u65af\u5b9a\u7406\uff08OI-wiki\uff09</p> <p></p> Text Only<pre><code>from Crypto.Util.number import *\nfrom Crypto.Util.number import long_to_bytes\nimport gmpy2\n\npubkey = ([2244095333388513367565281205621, 2260083173627571225575272017643, 2232571619487249695276209431911, 1366892418499855676258266570183, 2453504829447242891596294199551, 1749886540398964782388250510153, 2400368813718195311072803190537, 2412199908745985611198006411271, 2136151769918417200012573467547, 2188326070621506831342201179489, 2490975888687886171609455918979, 2520972296586880497850481220517, 2505441601685892494158922143537, 2223691958889488499464345149631, 2419970291634469073461115862923, 1913431629076248544274472723887, 1516525599480634064271895075589, 1748534379194448515689583072903, 2254654291529452465905257115983, 2036853065650744279222351374007, 1942468846337869648732525843309, 2201940065043223214975123483717, 2420554654468916631069996311243, 1578933527329599278882739520739, 2185608727926152268827042689247, 2138991356060432718559850740837, 1993202582269353654593882658857, 1851957155599032687165578632711, 1675430935325353825921279241939, 1539732791462031791764734543397, 1452444069464058198195009866663, 1853102085689472930613090539653, 2422886163436887722911429199407, 2478151413643348620173265601687, 2081728653302754258684980999897, 1869475969698886966223998022243, 2514233209214621717689871577799, 1565641057982670427875243690007, 2470941525500295562801927618117, 1957593611795889447618691712899, 2380166810104233903974756831281, 2310844976072657607087683813659, 2138906021714896472557340201269, 2133283066222174180401711231107, 2307615052065649723749209072291], [1950345581706607236958613312239, 1513963021166149007673751427809, 2209549849936350178706915353711, 1282304331826641551367349314389, 1285901314103578143578261497933, 1732171004069526252052648123229, 1885905081824428587397820753449, 2156360504061214962564655540577, 2114387282072764844800146882587, 1713540614501303042289450513031, 1718611954585760080721231776949, 2395901674478208382890220594709, 1953786497785706690568567652501, 1434952765892339228311211916623, 1434633435633106679937918543013, 1272002714370288579710832521801, 1345903574845925448968871221921, 1599178580175752823633130749379, 2050880877544639868041580689117, 1268507788047119658102789429151, 1550740527937339681775447782103, 2026060127920636700353677740333, 2320801697813895006451348616587, 1489309276821468831592096904009, 1343134452830065788367338410993, 1825449623429915829785766822487, 1385771207130987392492516965847, 1681955135857458220104835916897, 1608580883454393934111909197727, 1417761672076182691155757676783, 1339284864034936616590020649969, 1741000210994367137067807994129, 1416704333290652593089933548759, 1833600804996263316791298228287, 1740533709307600192323357511421, 1516475145585568797228308698679, 2284536672877756851447268908997, 1271126734775727764840925368047, 1674941925848400149104085993761, 1826602689042665336846528498857, 1987838509832756026588063009051, 1689378070597281801400506154393, 1490675164221922597195547712943, 1601946500767026172849726987951, 2081320371490185790723799153587], 560113)\nciphertext = int('8b232301d0d8b5a681c1c982b04763b8765a8bbfb2bdf7332d0990f2a04b487dff3ffb0c6f1b1faefcd3037cf7',16)\n( s_list , t_list , p ) = pubkey\n\ndef C( n , m , p ):\n    up , down = 1 , 1\n    for i in range( n - m + 1 , n + 1 ):\n        up = up * i % p\n    for i in range( 1 , m + 1 ):\n        down = down * i % p\n    return up * gmpy2.invert( down , p ) % p\n\ndef lucas( n , m , p ):\n    if m == 0:\n        return 1\n    return C( n % p , m % p , p ) * lucas( n // p , m // p , p ) % p\n\n\nu_list = []\nfor s,t in zip(s_list,t_list):\n    u_list.append( lucas(s,t,p) &amp; 0xFF )\n\nflag = bytes(x ^ k for x, k in zip(long_to_bytes(ciphertext), u_list))\nprint(flag)\n</code></pre> <p>flag:<code>ctfshow{a786316f-b09b-4b83-b52c-8e20ef3c23d7}</code>\uff08\u52a8\u6001\uff09</p> <p></p> <p>\u9996\u6b21\u5b8c\u6574\u590d\u76d8\u4e86\u4e00\u573a\u6bd4\u8d5b\u7684\u6240\u6709\u5bc6\u7801\u5b66\u9898\u3002</p> <p>\u540e\u7eed\u8fd8\u9700\u8981\u5b8c\u5584\u7684\uff0c\u6709<code>sign_rand</code>\u7684\u6b63\u89e3\u90e8\u5206\u548c<code>\u54ea\u4f4d\u5e08\u5085\u77e5\u9053\u8fd9\u4e2a\u662f\u4ec0\u4e48\uff1f</code>\u7684\u5362\u5361\u65af\u5b9a\u7406\u7684\u63a8\u5230\u548c\u62d3\u5c55\u5362\u5361\u65af\u5b9a\u7406</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfgwctf2019babyrsa","title":"[BUUCTF\u00b7GWCTF2019]BabyRSA","text":"Text Only<pre><code>import hashlib\nimport sympy\nfrom Crypto.Util.number import *\n\nflag = 'GWHT{******}'\nsecret = '******'\n\nassert(len(flag) == 38)\n\nhalf = len(flag) / 2\n\nflag1 = flag[:half]\nflag2 = flag[half:]\n\nsecret_num = getPrime(1024) * bytes_to_long(secret)\n\np = sympy.nextprime(secret_num)\nq = sympy.nextprime(p)\n\nN = p * q\n\ne = 0x10001\n\nF1 = bytes_to_long(flag1)\nF2 = bytes_to_long(flag2)\n\nc1 = F1 + F2\nc2 = pow(F1, 3) + pow(F2, 3)\nassert(c2 &lt; N)\n\nm1 = pow(c1, e, N)\nm2 = pow(c2, e, N)\n\noutput = open('secret', 'w')\noutput.write('N=' + str(N) + '\\n')\noutput.write('m1=' + str(m1) + '\\n')\noutput.write('m2=' + str(m2) + '\\n')\noutput.close()\n\"\"\"\nN=636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163\nm1=90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239\nm2=487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546\n\"\"\"\n</code></pre> <p>p\u548cq\u662f\u76f8\u90bb\u7684\u8d28\u6570\uff0c\u4e00\u773cyafu</p> <p></p> <p>\u6210\u529f\u5206\u89e3</p> <p>\u540e\u9762\u9700\u8981\u89e3\u65b9\u7a0b \\(c_1=f_1+f_2 \\ , \\ c_2 = f_1^3 + f_2^3\\)</p> <p>\u4f7f\u7528python\u7684solve\u51fd\u6570\u5373\u53ef\u6c42\u89e3</p> Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nfrom sympy import *\nfrom sympy.abc import x,y\nimport gmpy2\n\nm1=90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239\nm2=487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546\np = 797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377748737\nq = 797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377747699\nn = p * q ; phi = (p-1) * (q-1) ; e = 0x10001 ; d = gmpy2.invert( e , phi )\nc1 = pow( m1 , d , n ) ; c2 = pow( m2 , d , n )\n\nres = solve( [ x+y-c1 , pow(x,3)+pow(y,3)-c2 ] , [ x , y ] )\nprint( long_to_bytes( res[0][1] ) + long_to_bytes( res[0][0] ) )\n</code></pre> <p>flag:<code>flag{f709e0e2cfe7e530ca8972959a1033b2}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#nssctf-round16-basicpr","title":"[NSSCTF Round#16 Basic]pr","text":"Text Only<pre><code>from Crypto.Util.number import *\nimport random\n\nflag=plaintext = 'NSSCTF{****************}'\ncharset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\npadding_length = 100 - len(plaintext)\n\nfor _ in range(padding_length):\n    plaintext += random.choice(charset)\n\npublic_exponent = 31413537523\nmessage = bytes_to_long(plaintext.encode())\nassert message &gt; (1 &lt;&lt; 512)\nassert message &lt; (1 &lt;&lt; 1024)\n\nprime_p = getPrime(512)\nprime_q = getPrime(512)\nprime_r = getPrime(512)\nn1 = prime_p * prime_q\nn2 = prime_q * prime_r\nciphertext1 = pow(message, public_exponent, n1)\nciphertext2 = pow(message, public_exponent, n2)\nprint('c1=', ciphertext1)\nprint('c2=', ciphertext2)\nprint('p=', prime_p)\nprint('r=', prime_r)\nprint( plaintext )\nprint( prime_q )\n\n\n'''\nc1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695\nc2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752\np= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123\nr= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383\n'''\n</code></pre> <p>\u8d5b\u65f6\u60f3\u5230\u4e86crt\uff0c\u4f46\u662f\u72af\u4e86\u4f4e\u7ea7\u9519\u8bef\uff0c\u5bfc\u81f4\u6ca1\u6709\u5728\u8d5b\u65f6\u51faflag---&gt;</p> <p>\u4e5f\u662f\u56e0\u4e3a\u5bf9\u4e8e\u6a21\u8fd0\u7b97\u7684\u6027\u8d28\u638c\u63e1\u4e0d\u591f\u719f\u7ec3\uff0c\u653e\u5f03crt\u4e4b\u540e\u4e00\u76f4\u60f3\u6c42q\uff0c\u56e0\u800c\u4e00\u76f4\u6ca1\u6709\u51fa\u6765</p> Text Only<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nc1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695\nc2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752\np= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123\nr= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383\ne = 31413537523\n\ndef crtt( c , p ):\n    M = 1\n    for i in p:\n        M = M * i\n    m = []\n    for i in range(len(p)):\n        m.append(M // p[i])\n    x = 0\n    for i in range(len(c)):\n        x = x + c[i]*m[i]*gmpy2.invert(m[i],p[i])\n    return x % M\n\nc = crtt( [ c1 , c2 ] , [ p , r ] )\nphi = ( p-1 ) * (r-1)\nd = gmpy2.invert( e , phi )\n\nprint( long_to_bytes(pow( c , d , p*r )) )\n</code></pre> <p>flag:<code>NSSCTF{yUanshEnx1ncHun2o23!}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#isctf2023","title":"[isctf2023]\u4e03\u4e03\u7684\u6b27\u62c9","text":"<p>\u4f7f\u7528\u5927\u8d28\u6570\u5206\u89e3\u5728\u7ebf\u7f51\u7ad9\uff0c\u5f97\u5230 n=p^8</p> <p>\u5df2\u77e5n=p<sup>x\u65f6\uff0c\u03c6(n)=p</sup>x-p^(x-1)\uff08\u6b27\u62c9\u51fd\u6570\u7684\u7b2c\u4e8c\u79cd\u5feb\u901f\u8ba1\u7b97\u65b9\u5f0f\uff09</p> <p>\u5219phi=p<sup>8-p</sup>7</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\ne=\nn=\nc=\np=\nphi = p**8-p**7\nd = gmpy2.invert( e , phi )\nprint( long_to_bytes( pow(c,d,n) ) )\n</code></pre> <p>ISCTF{3237saq-21se82-3s74f8-8h84ps7-9qw45v7-6bs531-s26h23-c7iu01}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#isctf2023signin","title":"[isctf2023]signin","text":"<p>Schmidt-Samoa\u5bc6\u7801\u7cfb\u7edf</p> <p>\u5bc6\u94a5\u751f\u6210\uff1a\u9009\u53d6\u4e24\u4e2a\u5927\u8d28\u6570\uff0c\u8ba1\u7b97N=p^2*q\uff1b\u8ba1\u7b97d=invert(N,\u03c6(p*q))</p> <p>\u52a0\u5bc6\uff1ac=m^N mod N</p> <p>\u89e3\u5bc6\uff1am=c^d mod p*q</p> Text Only<pre><code>import gmpy2\n\nc = \nN = \nd = \n\npq = gmpy2.gcd(pow(2,d*N,N) - 2,N)\nm = pow(c,d,pq)\n\nprint( long_to_bytes(m) )\n</code></pre> <p>ISCTF{aeb8be10-ff19-42cf-8cfd-2ce71ac418e8}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#isctf2023easy_aes","title":"[isctf2023]Easy_AES","text":"Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\nfrom Crypto.Util.number import *\nfrom Crypto.Cipher import AES\nimport os\n\nflag = b\"ISCTF{\"\nkey = b\"1513562561656285\"\n\nhint = int(b'0x47405a4847405a48470000021a0f2870',16)\n\nprint( hint )\n\nfor i in range( 49 , 50 ):\n    t = b\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\" + flag + chr(i).encode()\n    print( chr(i) )\n    #print( bytes_to_long(t) ^ hint )\n    key = long_to_bytes( bytes_to_long(t) ^ hint )\n    print( key )\n\"\"\"\nflag = b\"ISCTF{asnxjbnmkishubxhxbasxmscmskldjvl}\"\nkey = b\"NISANISANISANISA\"\nenc = b'bsF\\xb6m\\xcf\\x94\\x9fg1\\xfaxG\\xd4\\xa3\\x04\\xfb\\x9c\\xac\\xed\\xbe\\xc4\\xc0\\xb5\\x899|u\\xbf9e\\xe0\\xa6\\xdb5\\xa8x\\x84\\x95(\\xc6\\x18\\xfe\\x07\\x88\\x02\\xe1v'\n\n\nfor i in range( 10 ):\n    #iv = b'\\xac\\xec\\xec\\x1d\\xd4@\\xdd\\xf6\\xcf\\xda\\xbcb\\xdeg\\x06\\x9d'\n    iv = os.urandom(16)\n    aes = AES.new(key,AES.MODE_CBC,iv)\n    flag = aes.decrypt( enc )\n    #print( iv )\n    print( flag )\n    #print( flag[:5] )\n\nflag{b106cea3fb848e7bea310c9851f15c1}\n\"\"\"\n</code></pre> <p>flag{1b106cea3fb848e7bea310c9851f15c1}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#nssctf-round16-basicbreak","title":"[NSSCTF Round#16 Basic]break","text":"Text Only<pre><code>Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDd\nZ23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6n\nubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfA\nXXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5\nmiGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9r\ns2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC7\n1KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1\nQVLVHl0Yu0I/1/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7Ds\ntouA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS\n27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H\n2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+697\nxM+dMUW0LML6oUE9ZjEiAY/5\n-----END PRIVATE KEY-----\n</code></pre> Text Only<pre><code>6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655\n</code></pre> <p>\u5bf9\u4e8e\u4e00\u4e2apem\u79c1\u94a5\u6587\u4ef6\uff0c\u5305\u542b\uff1a</p> Text Only<pre><code>RSAPrivateKey ::= SEQUENCE {\nversion Version,\nmodulus INTEGER, -- n\npublicExponent INTEGER, -- e\nprivateExponent INTEGER, -- d\nprime1 INTEGER, -- p\nprime2 INTEGER, -- q\nexponent1 INTEGER, -- d mod (p-1)\nexponent2 INTEGER, -- d mod (q-1)\ncoefficient INTEGER, -- (inverse of q) mod p\notherPrimeInfos OtherPrimeInfos OPTIONAL\n}\n</code></pre> <p>\u7f16\u5199\u811a\u672c\u5229\u7528<code>02</code>\u5206\u5272</p> Text Only<pre><code>from base64 import *\n\na ='''Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDd\nZ23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6n\nubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfA\nXXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5\nmiGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9r\ns2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC7\n1KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1\nQVLVHl0Yu0I/1/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7Ds\ntouA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS\n27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H\n2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+697\nxM+dMUW0LML6oUE9ZjEiAY/5'''\n\ntxt = \"\"\nfor i in a.split():\n    txt = txt + str(b64decode(i).hex())\n\ntxt = txt.split(\"02\")\n\nfor i in txt:\n    print( i )\n</code></pre> <p>\u5f97\u5230\u8fd0\u884c\u7ed3\u679c\uff1a</p> Text Only<pre><code>05cf2d493aef1899b6a18b82cc8cfe620e27c3\n818100e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645\n818100bbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289\n818100bbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a0\ncbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5\n81803fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab76\n08b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf\n8cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9\n</code></pre> <p>\u83b7\u53d6\u5230\u6700\u540e\u51e0\u7ec4\u6570\u636e</p> Text Only<pre><code>from Crypto.Util.number import *\nimport gmpy2\n\nq = 0x00e26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645\nc = 6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655\ne = 0x10001\nm = pow(c, gmpy2.invert(e, q-1),q)\nprint( long_to_bytes(m) )\n</code></pre> <p>flag:<code>NSSCTF{oi!_you_find___what_i_Wa1t_talK_y0n!!!}</code></p> <p>\u76f8\u5173\u8003\u70b9\uff1aopenssl rsa</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfnctf2019babyrsa","title":"[BUUCTF\u00b7NCTF2019]babyRSA","text":"Text Only<pre><code>from Crypto.Util.number import *\nfrom flag import flag\n\ndef nextPrime(n):\n    n += 2 if n &amp; 1 else 1\n    while not isPrime(n):\n        n += 2\n    return n\n\np = getPrime(1024)\nq = nextPrime(p)\nn = p * q\ne = 0x10001\nd = inverse(e, (p-1) * (q-1))\nc = pow(bytes_to_long(flag.encode()), e, n)\n\n# d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913\n# c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804\n</code></pre> <p>\u6211\u4eec\u5df2\u77e5 \\(e*d \\equiv 1\\ mod\\ phi\\)</p> <p>\u6052\u7b49\u5f0f\u5316\u7b49\u5f0f\u5f97\u5230\uff1a\\(e*d=1+k*phi\\)</p> Text Only<pre><code>d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913\ne = 0x10001\ned = str(bin( e * d - 1 ))\nprint( ed , len(ed)-2 )#\u628a\u524d\u7f00'0b'\u53bb\u6389\n</code></pre> <p>\\(e*d\\) \u957f\u5ea6\u4e3a \\(2064\\)\uff0c\u800c \\(phi\\) \u7684\u957f\u5ea6\u5e94\u5f53\u4e3a \\(2048\\)\uff0c\u6545 \\(k\\) \u7684\u8303\u56f4\u662f \\(2^{15}\\)~\\(2^{16}\\)\uff0c\u7a77\u4e3e\u5373\u53ef</p> Text Only<pre><code>from Crypto.Util.number import *\nimport sympy.crypto\nimport gmpy2\n\nd = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913\nc = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804\ne = 0x10001\np = q = 0\n\nfor k in range( 2**15 , 2**16 ):\n    if ( e * d - 1 ) % k == 0:\n        p = sympy.prevprime( gmpy2.iroot( ( e * d - 1 ) // k , 2 )[0] ) ;\n        q = sympy.nextprime( p )\n        if (e*d-1)==(p-1)*(q-1)*k:\n            break\nn = p * q\nprint( long_to_bytes( pow( c , d , n ) ) )\n</code></pre> <p>flag:<code>flag{70u2_nn47h_14_v3ry_gOO0000000d}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfafctf2018","title":"[BUUCTF\u00b7AFCTF2018]\u4f60\u80fd\u770b\u51fa\u8fd9\u662f\u4ec0\u4e48\u52a0\u5bc6\u4e48","text":"Text Only<pre><code>p=0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f\n\nq=0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061\n\ne=0x10001\n\nc=0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6   \n</code></pre> <p>\u666e\u901a\u7684rsa\uff0c\u76f4\u63a5\u89e3\u5373\u53ef</p> <p>python\u6bcf\u65e5\u5c0f\u5bc4\u5de7\uff1a\u522b\u76f4\u63a5\u590d\u5236\uff08\u5c24\u5176\u662fc\uff09\uff0c\u539f\u6587\u6709\u6bd2</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\np=0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f\nq=0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061\ne=0x10001\nc=0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6\n\nn = p * q ; phi = (p-1)*(q-1)\nd = gmpy2.invert( e , phi )\nprint( long_to_bytes( pow(c,d,n) ) )\n</code></pre> <p>flag:<code>flag{R54_|5_$0_$imp13}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfroarctf2019rsa","title":"[BUUCTF\u00b7RoarCTF2019]RSA","text":"Text Only<pre><code>A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x\np=next_prime(z*x*y)\nq=next_prime(z)\nA =  2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724\nn =  117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127\nc =  41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128\n</code></pre> <p>\u901a\u8fc7yafu\u4e0d\u80fd\u5206\u89e3\uff0c\u5229\u7528factor\u53ef\u4ee5\u5206\u89e3\u5f97\u5230p\u548cq</p> <p>\u53ef\u80fd\u4f1a\u51fa\u73b0\u5206\u6bcd\u4e3a0\u7684\u60c5\u51b5\uff0c\u6545\u9700\u8981\u5224\u65ad</p> Text Only<pre><code>from Crypto.Util.number import *\nfrom gmpy2 import *\n\np = 842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569\nq = 139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183\nn = p * q\nphi = (p-1)*(q-1)\nc = 41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128\n\nfor e in range( 2 , 100000 ):\n    try:\n        d = invert( e , phi )\n        m = str(long_to_bytes( pow(c,d,n) ))\n        if \"CTF\" in m or \"flag\" in m:\n            print( m )\n    except ZeroDivisionError:\n        continue\n</code></pre> <p>flag:<code>flag{wm-l1l1ll1l1l1l111ll}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfroarctf2019babyrsa","title":"[BUUCTF\u00b7RoarCTF2019]babyRSA","text":"Text Only<pre><code>import sympy\nimport random\n\ndef myGetPrime():\n    A= getPrime(513)\n    print(A)\n    B=A-random.randint(1e3,1e5)\n    print(B)\n    return sympy.nextPrime((B!)%A)\np=myGetPrime()\n#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407\n#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596\n\nq=myGetPrime()\n#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927\n#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026\n\nr=myGetPrime()\n\nn=p*q*r\n#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733\nc=pow(flag,e,n)\n#e=0x1001\n#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428\n#so,what is the flag?\n</code></pre> <p>\u5a01\u5c14\u900a\u5b9a\u7406\uff1a\\((p-1)! \\equiv -1 \\ mod \\ p\\) \u5176\u4e2dp\u662f\u8d28\u6570</p> <p>\u8981\u6c42 \\(Ans = B!\\ \\% \\ A\\) \uff0c\u53ea\u9700\u6c42 \\((A-1)! \\ \\% \\ A\\) \u548c \\(B! * (A-1)!^{-1}\\)</p> <p>\u5176\u4e2d \\((A-1)! \\equiv -1 \\ mod \\ A\\) \u548c \\((B! * (A-1)!^{-1})^{-1}=\\prod_{b+1}^{A-1}\\)</p> <p>\u6545 \\(Ans= -(\\prod_{b+1}^{A-1})^{-1}\\)</p> Text Only<pre><code>from Crypto.Util.number import *\nfrom gmpy2 import *\nfrom sympy import *\n\nA1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407\nB1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596\nA2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927\nB2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026\nn=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733\ne=0x1001\nc=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428\n\np = 1 ; q = 1\nfor i in range( B1+1 , A1 ):\n    p = p * i % A1\np = nextprime(-invert( p , A1 ) % A1)\nfor i in range( B2+1 , A2 ):\n    q = q * i % A2\nq = nextprime(-invert( q , A2 ) % A2)\n\nr = n // ( p * q )\nd = gmpy2.invert(e,(p-1)*(q-1)*(r-1))\nprint( long_to_bytes( pow( c , d , n ) ) ) \n</code></pre> <p>flag:<code>flag{wm-CongrAtu1ation4-1t4-ju4t-A-bAby-R4A}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfbjdctf2020rsa_output","title":"[BUUCTF\u00b7BJDCTF2020]rsa_output","text":"Text Only<pre><code>{21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,2767}\n\n{21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,3659}\n\nmessage1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599\n\nmessage2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227\n</code></pre> <p>\u77e5\u9053n\u548c\u4e24\u7ec4e\u4e24\u7ec4c\uff0c\u6545\u662f\u5171\u819c\u653b\u51fb</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nn = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne1 = 2767\ne2 = 3659\n\nc1 = 20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599\nc2 = 11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227\n\ndef exgcd( a , b ):\n    if a == 0:\n        return ( b , 0 , 1 )\n    else:\n        g , y , x = exgcd( b % a , a )\n        return ( g , x - ( b // a ) * y , y )\n\ns = exgcd( e1 , e2 )\ns1 = -s[1] ; s2 = s[2]\nc1 = gmpy2.invert( c1 , n )\nm = ( pow( c1 , s1 ) * pow( c2 , s2 ) ) % n\nprint( long_to_bytes( m ) )\n</code></pre> <p>flag:<code>flag{r3a_C0mmoN_moD@_4ttack}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfsamemod","title":"[BUUCTF]SameMod","text":"Text Only<pre><code>{6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773}\n{6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839}\n\nmessage1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349\nmessage2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535\n</code></pre> <p>\u5f88\u597d\u7684\u5171\u819c\u653b\u51fb\uff0c\u4f7f\u6211\u7684python\u7ffb\u8f6c</p> <p>\u4f7f\u7528\u4f20\u7edf\u7684<code>long_to_bytes</code>\u89e3\u51fa\u5f97\u5230\u7684\u662f\u4e71\u7801</p> <p>\u597d\u591a1\u54c7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u90a3\u4e2a97\u597d\u773c\u719f\u2014\u2014\u5b9e\u9645\u4e0a\u6b63\u89e3\u662f\u901a\u8fc7ascll\u7801\u8fdb\u884c\u8f6c\u5316\u5f97\u5230flag</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nn = 6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249\ne1 = 773\ne2 = 839\nc1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349\nc2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535\n\ndef exgcd( a , b ):\n    if a == 0:\n        return ( b , 0 , 1 )\n    else:\n        g , y , x = exgcd( b % a , a )\n        return ( g , x - ( b // a ) * y , y )\n\ns = exgcd( e1 , e2 )\ns1 = -s[1] ; s2 = s[2]\nc1 = gmpy2.invert( c1 , n )\nm = str(( pow( c1 , s1 ) * pow( c2 , s2 ) ) % n)\ncnt = 0\nnum = \"\"\ntop = 3\nfor i in m:\n    num = num + i\n    cnt += 1\n    if num[0] == \"1\":\n        top = 3\n    else:\n        top = 2\n    if cnt == top:\n        cnt = 0\n        print( chr(int(num)) , end=\"\" )\n        num = \"\"\n</code></pre> <p>flag:<code>flag{whenwethinkitispossible}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfbjdctf2020easyrsa","title":"[BUUCTF\u00b7BJDCTF2020]easyrsa","text":"Text Only<pre><code>from Crypto.Util.number import getPrime,bytes_to_long\nfrom sympy import Derivative\nfrom fractions import Fraction\nfrom secret import flag\n\np=getPrime(1024)\nq=getPrime(1024)\ne=65537\nn=p*q\nz=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint(c,z,n)\n'''\noutput:\n7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\n32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\n15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n'''\n</code></pre> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nc = 7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\nz = 32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\nn = 15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\ne = 65537\np = (gmpy2.iroot(z+n*2,2)[0]+gmpy2.iroot(z-n*2,2)[0])//2\nq = (gmpy2.iroot(z+n*2,2)[0]-gmpy2.iroot(z-n*2,2)[0])//2\n\nphi = (p-1)*(q-1)\nd = gmpy2.invert( e , phi )\nm = pow( c , d , n )\nprint( long_to_bytes( m ) )\n</code></pre> <p>flag:<code>flag{Advanced_mathematics_is_too_hard!!!}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#wieners-attack","title":"\u7ef4\u7eb3\u653b\u51fb\uff08Wiener's Attack\uff09","text":"<p>\u8981\u6c42\uff1a</p> <ol> <li>\\(p\\) \u548c \\(q\\) \u76f8\u5dee\u4e0d\u8fdc</li> <li>\\(d&lt;\\frac{1}{3}n^{\\frac{1}{4}}\\)</li> <li>\\(q &lt; p  &lt; 2 * q\\)</li> </ol> <p>\u516c\u5f0f\u63a8\u5bfc\uff1a</p> <p>\u56e0\u4e3a \\(e d \u2261 1 mod phi\\)</p> <p>\u6240\u4ee5 \\(e * d - t * phi = 1\\)\uff0c\u5176\u4e2d \\(t\\) \u4e3a\u6574\u6570</p> <p>\u56e0\u4e3a \\(n = p * q  &gt; q^2\\) \uff0c\u5219\u6709$ q &lt; \\sqrt{n}$</p> <p>\u6240\u4ee5 \\(n - phi = p + q - 1 &lt; 3 * q - 1 &lt; 3 * q &lt; 3\\sqrt{n}\\)</p> <p>\u6545\u6709\\(\\lvert\\frac{e}{n}-\\frac{t}{a}\\rvert\\)=\\(\\lvert\\frac{ed-tn}{dn}\\rvert\\)=\\(\\lvert\\frac{1+t(phi-n)}{dn}\\rvert\\)&lt;\\(\\frac{3t\\sqrt{n}}{dn}\\)=\\(\\frac{3t}{d\\sqrt{n}}\\)</p> <p>\u7531\u4e8e\\(t&lt;a\\)\uff0c\u6545 \u539f\u5f0f&lt;\\(\\frac{1}{dn^{\\frac{1}{4}}}\\)&lt;\\(\\frac{1}{3d^2}\\)</p> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\\(\\lvert\\frac{e}{n}-\\frac{t}{a}\\rvert\\) &lt; \\(\\frac{1}{3d^2}\\)</p> <p>\u6b64\u65f6\uff0c\\(\\frac{t}{a}\\)\u662f\\(\\frac{b}{n}\\)\u7684\u4e00\u4e2a\u6536\u655b\u5b50</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#legendre","title":"Legendre\u7406\u8bba","text":"<p>\u5df2\u77e5\\(\\lvert\\frac{(p_1-p_2)q_1q_2}{p_2}\\rvert&lt;\\frac12\\)\uff0c\u5219\u53ef\u63a8\u5f97\\(\\lvert\\frac{N_1}{N_2}-\\frac{q_1}{q_2}\\rvert&lt;\\frac{1}{2q_2^2}\\)</p> <p>\u6240\u4ee5\\(\\frac{q_1}{q_2}\\)\u662f\\(\\frac{N_1}{N_2}\\) \u7684\u6536\u655b\u5b50\uff0c\u7528\u8fde\u5206\u6570\u5373\u53ef\u6c42\u5f97\\(q_1\\),\\(q_2\\)</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#easy_aes","title":"Easy_AES","text":"<p>pedding\u586b\u5145\u65b9\u5f0f\u662f\u5728\u524d\u9762\u586b\u5145<code>b'\\t\\t\\t\\t\\t\\t\\t\\t\\t'</code></p> <p>\u56e0\u800c\u524d15\u4f4d\u6c38\u8fdc\u662f<code>\\t\\t\\t\\t\\t\\t\\t\\t\\tISCTF{</code></p> <p>\u8fdb\u800c\u53ef\u4ee5\u7206\u7834\u5f97\u5230key</p> <p>\u5df2\u77e5enc\uff0c\u53ef\u4ee5\u53d6\u5b83\u7684\u524d16\u4f4d\u6765\u7206\u7834iv\uff0c\u8fdb\u800c\u5f97\u5230flag</p> <p>flag{1b106cea3fb848e7bea310c9851f15c1}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#isctf20231zrsa","title":"[ISCTF2023]1zRSA","text":"<p>Legendre\u7406\u8bba:</p> <p>\u5df2\u77e5\\(\\lvert\\frac{(p_1-p_2)q_1q_2}{p_2}\\rvert&lt;\\frac12\\)\uff0c\u5219\u53ef\u63a8\u5f97\\(\\lvert\\frac{N_1}{N_2}-\\frac{q_1}{q_2}\\rvert&lt;\\frac{1}{2q_2^2}\\)</p> <p>\u6240\u4ee5\\(\\frac{q_1}{q_2}\\)\u662f\\(\\frac{N_1}{N_2}\\) \u8fde\u5206\u6570\u5c55\u5f00\u7684\u67d0\u4e00\u9879\u7684\u6e10\u8fdb\u5206\u6570</p> Text Only<pre><code>\u6bcf\u4e2a\u8fde\u5206\u6570\u90fd\u53ef\u4ee5\u770b\u4f5c\u7531\u4e24\u4e2a\u6570\u5217\u7ec4\u6210\uff1a\u4e00\u4e2a\u662f\u6574\u6570\u90e8\u5206\u7684\u6570\u5217\uff0c\u53e6\u4e00\u4e2a\u662f\u5206\u6570\u7684\u6570\u5217\u3002\u2014\u2014\u300a\u666e\u6797\u65af\u987f\u6570\u5b66\u6307\u5357\u300b\n</code></pre> <p>\u901a\u8fc7\u8f97\u8f6c\u76f8\u9664\u6cd5\uff0c\u6c42\u5f97\u8fde\u5206\u6570\u5c55\u5f00\u5f62\u5f0f\uff1a\u5177\u4f53\u64cd\u4f5c\u662f\uff1a</p> <p>\u8ba1\u7b97\u5546\u6570\u4f5c\u4e3a\u6574\u6570\u90e8\u5206\uff0c\u8ba1\u7b97\u4f59\u6570/\u9664\u6570\u5f97\u5230\u5206\u6570\u90e8\u5206\uff0c\u53d6\u5206\u6570\u7684\u5012\u6570\u7f6e\u4e8e\u5206\u6bcd\uff0c\u8fdb\u884c\u4e0b\u4e00\u8f6e\u7684\u8fd0\u884c\uff0c\u76f4\u5230\u53ef\u4ee5\u6574\u9664\u4e3a\u6b62\uff0c\u8fc7\u7a0b\u4e2d\u5f97\u5230\u7684\u6574\u6570\u90e8\u5206\u987a\u5e8f\u6392\u5217\u5373\u4e3a\u8fde\u5206\u6570\u5c55\u5f00\u5f62\u5f0f\u7684\u6570\u5217</p> <p>\u5bf9\u4e8e\u6e10\u8fdb\u5206\u6570\uff0c\u6709 \\(p_i=a_ip_{i-1}+p_{i-2}\\) \uff0c\\(q_i=a_iq_{i-1}+q_{i-2}\\) </p> Text Only<pre><code>#OI-wiki\u4e0a\u7684\u4ee3\u7801\ndef fraction(p, q):\n    a = []\n    while q:\n        a.append(p // q)\n        p, q = q, p % q\n    return a\n</code></pre> Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\nc = \nN1 = \nN2 = \ne = \n\na = []\np = []\nq = []\ndef get_a( p , q ):\n    a.append( p // q )\n    if p % q != 0:\n        get_a( q , p%q )\nget_a( N1 , N2 )\np.append( a[0] ) , p.append( a[0]*a[1]+1 )\nq.append( 1 ) , q.append( a[1] )\nfor i in range( 2 , len(a)-1 ):\n    p.append( a[i]*p[i-1]+p[i-2] )\n    q.append( a[i]*q[i-1]+q[i-2] )\nfor i in range( 0 , len(a)-1 ):\n    if N1 % p[i] == 0 and p[i] != 1:\n        d = gmpy2.invert( e , (p[i]-1)*(N1//p[i]-1) )\n        m = pow( c , d , N1 )\n        print( long_to_bytes( m ) )\n</code></pre> <p>flag:<code>ISCTF{6f3af9a9-2727-4d48-afb4-9ca82de893f3}</code></p> Text Only<pre><code>references:\nhttps://math.stackexchange.com/questions/531736/legendres-proof-continued-fractions-from-hardys-book\nhttps://chaoli.club/index.php/2756/0\nhttps://oi-wiki.org/math/number-theory/continued-fraction/\n</code></pre>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#polarctf2023basecrypto","title":"[PolarCTF\u7f51\u7edc\u5b89\u51682023\u51ac\u5b63]base\uff08CRYPTO\uff09","text":"Text Only<pre><code>import base64\nimport struct\nraw_table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\nnew_table = 'GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5'\n\ncipher = 'j2rXjx8wSZjD'\nflag = \"\"\n\nfor i in cipher:\n    for j in range( len(raw_table) ):\n        #print( i )\n        #print( new_table[j] )\n        if i == new_table[j]:\n            flag += raw_table[j]\n            break\nprint( flag )\n</code></pre> <p>base64\u89e3\u7801\u5f97\u5230flag</p> <p>flag:<code>flag{666}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#nctf2019childrsa","title":"[NCTF2019]childRSA","text":"Text Only<pre><code>from random import choice\nfrom Crypto.Util.number import isPrime, sieve_base as primes\nfrom flag import flag\n\ndef getPrime(bits):\n    while True:\n        n = 2\n        while n.bit_length() &lt; bits:\n            n *= choice(primes)\n        if isPrime(n + 1):\n            return n + 1\n\ne = 0x10001\nm = int.from_bytes(flag.encode(), 'big')\np, q = [getPrime(2048) for _ in range(2)]\nn = p * q\nc = pow(m, e, n)\n\n#n = \n#c = \n</code></pre> <p>\u81ea\u884c\u7f16\u5199\u811a\u672c\uff0c\u6c42\u5f97 \\(primes\\) \u90fd\u662f\u4e0d\u8d85\u8fc7 \\(1e5\\) \u7684\u8d28\u6570\uff0c\\(choice()\\)\u4e3a\u5728\u5217\u8868\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20</p> <p>\u89c2\u5bdf \\(p\\) \u548c \\(q\\) \u7684\u751f\u6210\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230 \\(p-1\\) \u548c \\(q-1\\) \u90fd\u662f \u524d \\(10000\\) \u4e2a\u8d28\u6570\u91cc\u968f\u673a\u9009\u62e9\u591a\u4e2a\u7684\u4e58\u79ef</p> <p>\u8bbe $T = \\prod primes $\uff0c\u6545\u6709 \\(T\\) \u662f \\(p-1\\) \u548c \\(q-1\\) \u7684 \u6574\u6570\u500d\uff0c\u4e0d\u59a8\u8bbe \\(T=k*(p-1)\\)</p> <p>\u5219 \\(2^T-1=2^{k*(p-1)}-1 \\equiv 0 (modp )\\) \uff0c\u6545 \\(2^T-1 \\equiv 0 (modp )\\)\uff0c\u56e0\u4e3a\\(n \\equiv 0 (modp )\\)</p> <p>\u901a\u8fc7\u8d39\u9a6c\u5c0f\u5b9a\u7406\u5f97\u5230 \\(2^T-1\\) \u662f \\(p\\) \u7684\u6574\u6570\u500d\uff0c\u6839\u636e \\(RSA\\)\u89c4\u5219\uff0c\\(n\\) \u4e5f\u662f \\(p\\) \u7684\u6574\u6570\u500d\uff0c\u6545\u5f97\u5230 </p> <p>\\(gcd(2^T-1,n)=p\\) </p> <p>\u5373\u6c42\u5f97 \\(2^T\\) \u53ef\u5f97 \\(n\\) </p> <p>\u8fdb\u4e00\u6b65\u4f18\u5316</p> <p>\u56e0\u4e3a $2^T \\% n = 2^T - k^{'}p*q $</p> <p>\u4e24\u8fb9\u540c\u65f6%p\uff0c\u5219 \\(2^T \\% n = 2 ^ T (modp)\\)</p> Text Only<pre><code>import gmpy2\nimport binascii\nfrom Crypto.Util.number import long_to_bytes\nfrom Crypto.Util.number import isPrime, sieve_base as primes\n\ne = 0x10001\nn = \nc = \n\nprod = 1\nfor i in primes:\n    prod *= i\np = gmpy2.gcd( pow(2,prd,n)-1 , n )\nq = n // p\nd = gmpy2.invert( e , (p-1)*(q-1) )\nprint( long_to_bytes(pow(c,d,n))\n</code></pre> <p><code>flag{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}</code></p> <p>\u603b\u7ed3\uff1a\u8fd9\u9053\u9898\u7ed9\u4e86 \\(p\\) \u548c \\(q\\) \u7684\u751f\u6210\u65b9\u5f0f\uff0c\u53ef\u4ee5\u501f\u6b64\u53d1\u73b0 \\(n\\) \u548c $\\prod $ \u5728 \\(mod\\) \\(p\\) \u4e0b\u7684\u5173\u7cfb\uff1b\u901a\u8fc7\u6570\u8bba\u8fd0\u7b97\u5f97\u5230 \\(\\prod\\) \u7684\u7b49\u4ef7\u5feb\u901f\u8fd0\u7b97\uff0c\u8fdb\u800c\u6c42\u51fa \\(p\\)\uff0c\u5f97\u5230 <code>flag</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#hdctf2019bbbbbbrsa","title":"[HDCTF2019]bbbbbbrsa","text":"Text Only<pre><code>from base64 import b64encode as b32encode\nfrom gmpy2 import invert,gcd,iroot\nfrom Crypto.Util.number import *\nfrom binascii import a2b_hex,b2a_hex\nimport random\nnbit = 128\np = getPrime(nbit)\nq = getPrime(nbit)\nn = p*q\nphi = (p-1)*(q-1)\ne = random.randint(50000,70000)\nwhile True:\n    if gcd(e,phi) == 1:\n        break;\n    else:\n        e -= 1;\nc = pow(int(b2a_hex(flag),16),e,n)\nprint b32encode(str(c))[::-1]\n\n#p= 177077389675257695042507998165006460849\n#n= 37421829509887796274897162249367329400988647145613325367337968063341372726061\n#c= ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM\n</code></pre> <p>\u5c06 \\(c\\) \u8fdb\u884c\u5b57\u7b26\u4e32\u7ffb\u8f6c\uff0c\u8fdb\u884c \\(base64\\) \u89e3\u7801\uff0ce\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u53ef\u4ee5\u7206\u7834</p> <p>\u8bb0\u5f97\u68c0\u67e5\u4e32\u91cc\u662f\u5426\u5305\u542b <code>flag</code>\uff0c\u4e0d\u7136\u8dd1\u4e0d\u5b8c\u7684</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nc = 2373740699529364991763589324200093466206785561836101840381622237225512234632\np = 177077389675257695042507998165006460849\nn = 37421829509887796274897162249367329400988647145613325367337968063341372726061\nq = n // p\nphi = (p-1) * (q-1)\ne = 70000\nwhile 1:\n    if gmpy2.gcd(e,phi) == 1:\n        d = gmpy2.invert( e , phi )\n        flag = pow( c , d , n )\n        if 'flag' in str(long_to_bytes(flag)):\n            print(long_to_bytes(flag))\n            break\n    e = e - 1\n</code></pre> <p><code>flag{rs4_1s_s1mpl3!#}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa4","title":"RSA4","text":"<p>\u7ed9\u4e86\u4e09\u7ec4n\u548cc\uff0c\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u5373\u53ef\u6c42\u89e3</p> Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\ndef crrt( c , p ):\n    M = 1\n    for i in p:\n        M = M * i\n    m = []\n    for i in range(len(p)):\n        m.append(M // p[i])\n    x = 0\n    for i in range(len(c)):\n        x = x + c[i]*m[i]*gmpy2.invert(m[i],p[i])\n    return x % M\n\nn1 = \"\"\nc1 = \"\"\nn2 = \"\"\nc2 = \"\"\nn3 = \"\"\nc3 = \"\"\nn = [int(n1,5),int(n2,5),int(n3,5)]\nc = [int(c1,5),int(c2,5),int(c3,5)]\nM = crrt( c , n )\nfor e in range( 3 , 4 ):\n    m , f = gmpy2.iroot( M , e )\n    print( long_to_bytes( m ) )\n</code></pre> <p><code>flag{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa4_1","title":"RSA4","text":"Text Only<pre><code>from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\ndef crtt( c , p ):\n    M = 1\n    for i in p:\n        M = M * i\n    m = []\n    for i in range(len(p)):\n        m.append(M // p[i])\n    x = 0\n    for i in range(len(c)):\n        x = x + c[i]*m[i]*gmpy2.invert(m[i],p[i])\n    return x % M\n\nn1 =  ; c1 = \nn2 =  ; c2 = \nn3 =  ; c3 = \ne = 3\n\nn = [n1,n2,n3]\nc = [c1*2%n1,c2*2%n2,c3*2%n3]\nM = crtt( c , n )*gmpy2.invert(2,n1*n2*n3)%(n1*n2*n3)\nm , f = gmpy2.iroot( M , e )\nresult = m\nprint( result )\nprint( long_to_bytes(result) )\n</code></pre> <p>flag:<code>flag{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#bjdctf2020rsa","title":"[BJDCTF2020]RSA","text":"Text Only<pre><code>from Crypto.Util.number import long_to_bytes,bytes_to_long\nimport gmpy2\n\ndef gcd( a , b ):\n    if a &lt; b:\n        a , b = b , a\n    if b == 0:\n        return a\n    return gcd( b , a % b )\n\nc1 =  ; n1 = \nt  = \nc2 =  ; n2 = \nm2 = bytes_to_long((\"BJD\"*32).encode())\n\np = gcd( n1 , n2 )\nq1 = n1 // p ; q2 = n2 // p\nphi = ( p - 1 ) * ( q1 - 1 )\n\ne = 0\nfor i in range( 100000 ):\n    if gcd( i , phi ) == 1:\n        c1_ = pow( 294 , i , n1 )\n        if t == c1_:\n            e = i ; break\n\nd = gmpy2.invert( e , phi )\nprint( long_to_bytes( pow( c1 , d , n1 ) ) )\n</code></pre> <p>flag:<code>flag{p_is_common_divisor}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#hdctf2019basic-rsa","title":"[HDCTF2019]basic rsa","text":"<p>flag{B4by_Rs4}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#buuctfrsa5","title":"[BUUCTF]RSA5","text":"<p>\u7ed9\u5b9a\u5f88\u591a\u7ec4c\u548cn\u3002\u56e0\u4e3an\u5b58\u5728\u4e0d\u4e92\u8d28\u7684\u6570\u5bf9\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u662f<code>\u6a21\u4e0d\u4e92\u8d28\u653b\u51fb</code></p> Text Only<pre><code>for i in range(len(n)):\n    for j in range(i+1,len(n)):\n        if(gmpy2.gcd(n[i],n[j])!=1):\n            print(i,j)\n</code></pre> <p>\u5f97\u5230n5\u548cn18\u5b58\u5728\u6700\u5927\u516c\u7ea6\u6570</p> <p>\u6240\u4ee5\uff0c\u9009\u62e9n5\u548cn18\u7684n\u8fdb\u884cgcd\u64cd\u4f5c\uff0c\u5373\u53ef\u5f97\u5230p</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\ne = 65537\nn5 = \nc5 = \nn18 = \nc18 = \n\np = gmpy2.gcd( n5 , n18 )\nq = n5 // p\n\nm = pow( c5 , gmpy2.invert(e,(p-1)*(q-1)) , n5 )\nprint( long_to_bytes( m ) )\n</code></pre> <p>flag{abdcbe5fd94e23b3de429223ab9c2fdf}</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#2020-you_raise_me_up","title":"[\u7f51\u9f0e\u676f 2020 \u9752\u9f99\u7ec4]you_raise_me_up","text":"Text Only<pre><code>#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom Crypto.Util.number import *\nimport random\n\nn = 2 ** 512\nm = random.randint(2, n-1) | 1\nc = pow(m, bytes_to_long(flag), n)\nprint 'm = ' + str(m)\nprint 'c = ' + str(c)\n\n# m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075\n# c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499\n</code></pre> <p>python\u7528\u4e8e\u89e3\u79bb\u6563\u5bf9\u6570\u7684\u5feb\u901f\u65b9\u6cd5</p> Text Only<pre><code>from sympy.ntheory import *\ndiscrete_log(41,15,7)\n</code></pre> <p>\u5373\u89e3\u5373\u4e3a \\(7^x \\equiv 15 \\ mod \\ 41\\)</p> Text Only<pre><code>from Crypto.Util.number import *\nfrom sympy import *\n\nm = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075\nc = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499\nn = 2 ** 512\n\nflag = discrete_log( 2**512 , c , m )\nprint( long_to_bytes(flag) )\n</code></pre> <p>flag:<code>flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#wustctf2020","title":"[WUSTCTF2020]\u5927\u6570\u8ba1\u7b97","text":"Text Only<pre><code>flag\u7b49\u4e8e wctf2020{Part1-Part2-Part3-Part4} \u6bcf\u4e00Part\u90fd\u4e3a\u6570\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\uff08\u4e0d\u9700\u89810x)\uff0c\u5e76\u7528 '-' \u8fde\u63a5\nPart1 = 2020*2019*2018* ...*3*2*1 \u7684\u524d8\u4f4d\nPart2 = 520^1314 + 2333^666 \u7684\u524d8\u4f4d\nPart3 = \u5b87\u5b99\u7ec8\u6781\u95ee\u9898\u7684\u7b54\u6848 x,y,z\u7edd\u5bf9\u503c\u548c\u7684\u524d8\u4f4d\nPart4 = \u89c1\u56fe\u7247\u9644\u4ef6\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e58\u4e0a1314\n</code></pre> Text Only<pre><code>from decimal import *\n\nans = Decimal(1)\nfor i in range( 1 , 2021 ):\n    ans = ans * Decimal(i)\nprint( ans )\n</code></pre> <p>part1:<code>24d231f</code></p> Text Only<pre><code>from decimal import *\n\nans1 = Decimal(1) ; ans2 = Decimal(1)\nfor i in range( 1 , 1314+1 ):\n    ans1 = ans1 * Decimal(520)\nfor i in range( 1 , 666+1 ):\n    ans2 = ans2 * Decimal(2333)\nprint( str(ans1 + ans2)[0]+str(ans1 + ans2)[2:9] )\n</code></pre> <p>part2:<code>403cfd3</code></p> <p></p> Text Only<pre><code>print( 80538738812075974+80435758145817515+12602123297335631 )\n</code></pre> <p>part3:<code>108db5e</code></p> Text Only<pre><code>def F( x ):\n    return x*x\nprint( (F(22)-F(0)+36)*1314 )\n</code></pre> <p>part4:<code>a6d10</code></p> <p>flag:<code>flag{24d231f-403cfd3-108db5e-a6d10}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#npuctf2020ezrsa","title":"[NPUCTF2020]EzRSA","text":"Text Only<pre><code>from gmpy2 import lcm , powmod , invert , gcd , mpz\nfrom Crypto.Util.number import getPrime\nfrom sympy import nextprime\nfrom random import randint\np = getPrime(1024)\nq = getPrime(1024)\nn = p * q\ngift = lcm(p - 1 , q - 1)\ne = 54722\nflag = b'NPUCTF{******************}'\nm = int.from_bytes(flag , 'big')\nc = powmod(m , e , n)\nprint('n: ' , n)\nprint('gift: ' , gift)\nprint('c: ' , c)\n\n#n:  17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121\n#gift:  2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104\n#c:  3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319\n</code></pre> <p>\\(e\\) \u4e0d\u662f\u8d28\u6570\uff0c\u56e0\u4e3a $m^e  mod  n = c $ \uff0c\u6240\u4ee5$m^{2*\\frac{e}{2}}  mod  n = c $</p> <p>\u4f7f\u7528factor\u5206\u89e3\u5373\u53ef\u5f97\u5230p\u548cq</p> Text Only<pre><code>from Crypto.Util.number import *\nfrom gmpy2 import *\n\nn = 17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121\np = 161136651053130509602530659420755324119806487925813087617466818245407407797561810253722204813002837916779909309520498985459703212021249251124954613236122142746302911323565396331355397916764254680629384957057354297855676493062493901977415968666512459829211010720514167083018352796496733697235524845188512914793\nq = 106021448991021391444550749375115277080844281746248845802565680557785009341952320484175568763707424932172033597514861602114171459176440279045761846695231788376075050452154924141266290931413542110639081792550648106240966552406813059396358355737185354885474455248579946190266152416149137616855791805617206153497\nc = 3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319\ne = 54722\nphi = (p-1)*(q-1)\nd = gmpy2.invert( e//2 , phi )\nflag = iroot(pow( c , d , n ),2)[0]\nprint( long_to_bytes( flag ) )\n</code></pre> <p>\u53ef\u80fd\u662f\u56e0\u4e3a\u6709\u5f00\u6839\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981p\u548cq\u4e5f\u53ef\u4ee5\u89e3\u5bc6\uff0cgift\u5c31\u662fphi</p> Text Only<pre><code>from Crypto.Util.number import *\nfrom gmpy2 import *\n\nn = 17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121\nphi = 2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104\nc = 3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319\ne = 54722\n\nd = gmpy2.invert( e//2 , phi )\nflag = iroot(pow( c , d , n ),2)[0]\nprint( long_to_bytes( flag ) )\n</code></pre> <p>flag:<code>flag{diff1cult_rsa_1s_e@sy}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#wustctf2020dp_leaking_1s_very_dangerous","title":"[WUSTCTF2020]dp_leaking_1s_very_d@angerous","text":"Text Only<pre><code>e = 65537\nn = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847\nc = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869\ndp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825\n</code></pre> <p>dp\u6cc4\u9732\u7684\u6a21\u677f\u9898</p> Text Only<pre><code>from Crypto.Util.number import *\nimport gmpy2\ne = 65537\nn = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847\nc = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869\ndp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825\n\nfor i in range(1,e):\n    if (dp*e-1)%i==0:\n        if n%((dp*e-1)//i+1)==0:\n            p=(dp*e-1)//i+1\n            q=n//p\n            phi=(p-1)*(q-1)\n            d=gmpy2.invert(e,phi)\n            print(long_to_bytes(gmpy2.powmod(c,d,n)))\n            break\n</code></pre> <p>flag:<code>flag{dp_leaking_1s_very_d@angerous}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#inshack2017rsa16m","title":"[INSHack2017]rsa16m","text":"<p>n\uff08\u5f88\u5927\u5f88\u5927\uff09=  ;  c =   ; e = </p> <p>\u4f4e\u5bc6\u5ea6\u8d28\u6570\u653b\u51fb</p> Text Only<pre><code>print( long_to_bytes( iroot( c , e )[0] ) )\n</code></pre> <p>flag:<code>flag{(I)NSA_W0uld_bE_pr0uD}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa-what","title":"RSA &amp; what","text":"Text Only<pre><code>from Crypto.Util.number import bytes_to_long, getPrime\nfrom random import randint\nfrom gmpy2 import powmod\n\np = getPrime(2048)\nq = getPrime(2048)\nN = p*q\nPhi = (p-1)*(q-1)\ndef get_enc_key(N,Phi):\n    e = getPrime(N)\n    if Phi % e == 0:\n        return get_enc_key(N, Phi)\n    else:\n        return e\ne1 = get_enc_key(randint(10, 12), Phi)\ne2 = get_enc_key(randint(10, 12), Phi)\n\nfr = open(r\"./base64\", \"rb\")#flag is in this file\nf1 = open(r\"./HUB1\", \"wb\")\nf2 = open(r\"./HUB2\", \"wb\")\nbase64 = fr.read(255)\nf1.write(\"%d\\n%d\\n\" % (N, e1))\nf2.write(\"%d\\n%d\\n\" % (N, e2))\nwhile len(base64)&gt;0:\n    pt = bytes_to_long(base64)\n    ct1 = powmod(pt, e1, N)\n    ct2 = powmod(pt, e2, N)\n    f1.write(\"\\n%d\" % ct1)\n    f2.write(\"\\n%d\" % ct2)\n    base64 = fr.read(255)\nfr.close()\nf1.close()\nf2.close()\n</code></pre> <p>\u5171\u819c\u653b\u51fb</p> Text Only<pre><code>from Crypto.Util.number import *\nimport base64\n\ndef exgcd( a , b ):\n    if a == 0:\n        return ( b , 0 , 1 )\n    else:\n        g , y , x = exgcd( b % a , a )  \n        return ( g , x - (b//a)*y , y )\n\ndef CMA( n , e1 , e2 , c1 , c2 ):\n    temp , s1 , s2 = exgcd( e1 , e2 )\n    if s1 &lt; 0:\n        s1 = -s1\n        c1 = inverse( c1 , n )\n    elif s2 &lt; 0:\n        s2 = -s2\n        c2 = inverse( c2 , n )\n    m = pow( c1 , s1 , n ) * pow( c2 , s2 , n ) % n\n    return m\n\nf1 = open(\"HUB1\") ; f2 = open(\"HUB2\")\n\nN , N = f1.readline() , f2.readline()\ne1,e2 = f1.readline() , f2.readline()\nf1.readline() ; f2.readline()\nc1,c2 = f1.readline() , f2.readline()\n\nans = b''\ncnt = 0\nwhile( len(c1) ):\n    cnt += 1\n    ans += long_to_bytes( CMA(int(N),int(e1),int(e2),int(c1),int(c2)) )\n    c1 , c2 = f1.readline() , f2.readline()\ntemp = b''\nM = b''\nprint( ans )\nfor i in ans:\n    k = long_to_bytes(i)\n    if k == b'\\n':\n        M += base64.b64decode( temp )\n        temp = b''\n        continue\n    temp += k\nprint( M )\n</code></pre> <p>\u5f97\u5230\u5bc6\u6587</p> Text Only<pre><code>THISFLAGISHIDDEN.CANYOUFINDITOUT?DOYOUKNOWBASE64?YoungCTHINKYOUARENOTTHATFAMILIARWITHBASE64.Base64isagroupofsimilarbinary-to-textencodingschemesthatrepresentbinarydatainanASCIIstringformatbytranslatingitintoaradix-64representation.ThetermBase64originatesfromaspecificMIMEcontenttransferencoding.Theparticularsetof64characterschosentorepresentthe64place-valuesforthebasevariesbetweenimplementations.Thegeneralstrategyistochoose64charactersthatarebothmembersofasubsetcommontomostencodings,andalsoprintable.Thiscombinationleavesthedataunlikelytobemodifiedintransitthroughinformationsystems,suchasE-mail,thatweretraditionallynot8-bitclean.[1]Forexample,MIME'sBase64implementationusesA\\xa8CZ,a\\xa8Cz,and0\\xa8C9forthefirst62values.Othervariationssharethispropertybutdifferinthesymbolschosenforthelasttwovalues;anexampleis\n</code></pre> <p>\u8fdb\u884cbase64\u9690\u5199\u89e3\u5bc6\u5f97\u5230</p> <p>flag:<code>flag{7c86d8f7d6de33a87f7f9d6b005ce640}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#actf2020crypto-aes","title":"[ACTF\u65b0\u751f\u8d5b2020]crypto-aes","text":"Text Only<pre><code>from Cryptodome.Cipher import AES\nimport os\nimport gmpy2\nfrom flag import FLAG\nfrom Cryptodome.Util.number import *\n\ndef main():\n    key=os.urandom(2)*16\n    iv=os.urandom(16)\n    print(bytes_to_long(key)^bytes_to_long(iv))\n    aes=AES.new(key,AES.MODE_CBC,iv)\n    enc_flag = aes.encrypt(FLAG)\n    print(enc_flag)\nif __name__==\"__main__\":\n    main()\n\n\"\"\"\n91144196586662942563895769614300232343026691029427747065707381728622849079757\nb'\\x8c-\\xcd\\xde\\xa7\\xe9\\x7f.b\\x8aKs\\xf1\\xba\\xc75\\xc4d\\x13\\x07\\xac\\xa4&amp;\\xd6\\x91\\xfe\\xf3\\x14\\x10|\\xf8p'\n\"\"\"\n</code></pre> Text Only<pre><code>from Crypto.Cipher import AES\nimport os\nfrom gmpy2 import *\nfrom Crypto.Util.number import *\n\nxor = 91144196586662942563895769614300232343026691029427747065707381728622849079757\nenc_flag = b'\\x8c-\\xcd\\xde\\xa7\\xe9\\x7f.b\\x8aKs\\xf1\\xba\\xc75\\xc4d\\x13\\x07\\xac\\xa4&amp;\\xd6\\x91\\xfe\\xf3\\x14\\x10|\\xf8p'\n\nout = long_to_bytes( xor )\nkey = out[:16]*2\niv = bytes_to_long(key[16:])^bytes_to_long(out[16:])\niv = long_to_bytes( iv )\n\naes = AES.new( key , AES.MODE_CBC , iv )\nprint( aes.decrypt( enc_flag ) )\n</code></pre> <p>flag:<code>flag{W0W_y0u_can_so1v3_AES_now!}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#inshack2019yet-another-rsa-challenge-part-1","title":"[INSHack2019]Yet Another RSA Challenge - Part 1","text":"Text Only<pre><code>[Buy an encrypted flag, get a (almost intact) prime factor for free !](https://static.ctf.insecurity-insa.fr/595437e42ea3951e8ed4ecda16141f017f3ba36b.tar.gz)\n\nYou can find a harder version of this challenge in the Programming category.\n</code></pre> Text Only<pre><coden0xDCC5A0BD3A1FC0BEB0DA1C2E8CF6B474481B7C12849B76E03C4C946724DB577D2825D6AA193DB559BC9DBABE1DDE8B5E7805E48749EF002F622F7CDBD7853B200E2A027E87E331AFCFD066ED9900F1E5F5E5196A451A6F9E329EB889D773F08E5FBF45AACB818FD186DD74626180294DCC31805A88D1B71DE5BFEF3ED01F12678D906A833A78EDCE9BDAF22BBE45C0BFB7A82AFE42C1C3B8581C83BF43DFE31BFD81527E507686956458905CC9A660604552A060109DC81D01F229A264AB67C6D7168721AB36DE769CEAFB97F238050193EC942078DDF5329A387F46253A4411A9C8BB71F9AEB11AC9623E41C14FCD2739D76E69283E57DDB11FC531B4611EE3\n596380963583874022971492302071822444225514552231574984926542429117396590795270181084030717066220888052607057994262255729890598322976783889090993129161030148064314476199052180347747135088933481343974996843632511300255010825580875930722684714290535684951679115573751200980708359500292172387447570080875531002842462002727646367063816531958020271149645805755077133231395881833164790825731218786554806777097126212126561056170733032553159740167058242065879953688453169613384659653035659118823444582576657499974059388261153064772228570460351169216103620379299362366574826080703907036316546232196313193923841110510170689800892941998845140534954264505413254429240789223724066502818922164419890197058252325607667959185100118251170368909192832882776642565026481260424714348087206462283972676596101498123547647078981435969530082351104111747783346230914935599764345176602456069568419879060577771404946743580809330315332836749661503035076868102720709045692483171306425207758972682717326821412843569770615848397477633761506670219845039890098105484693890695897858251238713238301401843678654564558196040100908796513657968507381392735855990706254646471937809011610992016368630851454275478216664521360246605400986428230407975530880206404171034278692756\n</code></pre> Text Only<pre><code>import subprocess\np = subprocess.check_output('openssl prime -generate -bits 2048 -hex')\nq = subprocess.check_output('openssl prime -generate -bits 2048 -hex')\nflag = int('INSA{REDACTED}'.encode('hex'), 16)\n\nN = int(p,16) * int(q,16)\nprint N\nprint '0x'+p.replace('9F','FC')\nprint pow(flag,65537,N)\n</code></pre> <p>p \u768416\u8fdb\u5236\u6570\u88ab\u66ff\u6362\u4e86\u4e00\u90e8\u5206\uff0c\u901a\u8fc7\u7206\u7834\u7684\u65b9\u5f0f\u83b7\u53d6 p \u7684\u503c</p> Text Only<pre><code>from Crypto.Util.number import*\nfrom gmpy2 import*\nfrom libnum import*\nN = 719579745653303119025873098043848913976880838286635817351790189702008424828505522253331968992725441130409959387942238566082746772468987336980704680915524591881919460709921709513741059003955050088052599067720107149755856317364317707629467090624585752920523062378696431510814381603360130752588995217840721808871896469275562085215852034302374902524921137398710508865248881286824902780186249148613287250056380811479959269915786545911048030947364841177976623684660771594747297272818410589981294227084173316280447729440036251406684111603371364957690353449585185893322538541593242187738587675489180722498945337715511212885934126635221601469699184812336984707723198731876940991485904637481371763302337637617744175461566445514603405016576604569057507997291470369704260553992902776099599438704680775883984720946337235834374667842758010444010254965664863296455406931885650448386682827401907759661117637294838753325610213809162253020362015045242003388829769019579522792182295457962911430276020610658073659629786668639126004851910536565721128484604554703970965744790413684836096724064390486888113608024265771815004188203124405817878645103282802994701531113849607969243815078720289912255827700390198089699808626116357304202660642601149742427766381\ncipher = 596380963583874022971492302071822444225514552231574984926542429117396590795270181084030717066220888052607057994262255729890598322976783889090993129161030148064314476199052180347747135088933481343974996843632511300255010825580875930722684714290535684951679115573751200980708359500292172387447570080875531002842462002727646367063816531958020271149645805755077133231395881833164790825731218786554806777097126212126561056170733032553159740167058242065879953688453169613384659653035659118823444582576657499974059388261153064772228570460351169216103620379299362366574826080703907036316546232196313193923841110510170689800892941998845140534954264505413254429240789223724066502818922164419890197058252325607667959185100118251170368909192832882776642565026481260424714348087206462283972676596101498123547647078981435969530082351104111747783346230914935599764345176602456069568419879060577771404946743580809330315332836749661503035076868102720709045692483171306425207758972682717326821412843569770615848397477633761506670219845039890098105484693890695897858251238713238301401843678654564558196040100908796513657968507381392735855990706254646471937809011610992016368630851454275478216664521360246605400986428230407975530880206404171034278692756\nplain = ['9F','FC']\nfor a in plain:\n    for b in plain:\n        for c in plain:\n            for d in plain:\n                p1 = '0xDCC5A0BD3A1' +a+ '0BEB0DA1C2E8CF6B474481B7C12849B76E03C4C946724DB577D2825D6AA193DB559BC9DBABE1DDE8B5E7805E48749EF002F622F7CDBD7853B200E2A027E87E331A' +b+ 'FD066ED9900F1E5F5E5196A451A6F9E329EB889D773F08E5FBF45AACB818FD186DD74626180294DCC31805A88D1B71DE5BFEF3ED01F12678D906A833A78EDCE9BDAF22BBE45C0BFB7A82AFE42C1C3B8581C83BF43DFE31BFD81527E507686956458905CC9A660604552A060109DC81D01F229A264AB67C6D7168721AB36DE769CEAFB97F238050193EC942078DDF5329A387F46253A4411A9C8BB71F9AEB11AC9623E41C14' +c+ 'D2739D76E69283E57DDB11' +d+ '531B4611EE3'\n                p = int(p1,16)\n                if(N%p == 0):\n                    print(p)\np = 27869881035956015184979178092922248885674897320108269064145135676677416930908750101386898785101159450077433625380803555071301130739332256486285289470097290409044426739584302074834857801721989648648799253740641480496433764509396039330395579654527851232078667173592401475356727873045602595552393666889257027478385213547302885118341490346766830846876201911076530008127691612594913799272782226366932754058372641521481522494577124999360890113778202218378165756595787931498460866236502220175258385407478826827807650036729385244897815805427164434537088709092238894902485613707990645011133078730017425033369999448757627854563\nq = N//p\nphi = (p-1)*(q-1)\ne = 65537\nd = invert(e,phi)\nm = pow(cipher,d,N)\nprint( long_to_bytes(m) )\n</code></pre> <p>flag:<code>flag{I_w1ll_us3_OTp_n3xT_T1M3}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#npuctf2020","title":"[NPUCTF2020]\u8ba4\u6e05\u5f62\u52bf\uff0c\u5efa\u7acb\u4fe1\u5fc3","text":"Text Only<pre><code>from Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secret import flag\n\np = getPrime(25)\ne = # Hidden\nq = getPrime(25)\nn = p * q\nm = bytes_to_long(flag.strip(b\"npuctf{\").strip(b\"}\"))\n\nc = pow(m, e, n)\nprint(c)\nprint(pow(2, e, n))\nprint(pow(4, e, n))\nprint(pow(8, e, n))\n\n'''\n169169912654178\n128509160179202\n518818742414340\n358553002064450\n'''\n</code></pre> <p>\\(n = gcd( c_1^2-c_2 , c_1 * c_2 - c_3 )\\)</p> <p>\u4f7f\u7528yafu\u5bf9n\u5206\u89e3</p> Text Only<pre><code>from Crypto.Util.number import*\nfrom gmpy2 import*\nfrom sympy import*\n\nc = 169169912654178\nc1 = 128509160179202\nc2 = 518818742414340\nc3 = 358553002064450\n\nn = gcd(pow(c1,2)-c2,c1*c2-c3)\np = 28977097\nq = 18195301\nn = p*q\ne = discrete_log(n,c1,2)\nprint(e)\nphi = (p-1)*(q-1)\nd = invert(e,phi)\nprint( long_to_bytes(pow(c,int(d),n)) )\n</code></pre> <p>flag:<code>flag{345y!}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#mrctf2020babyrsa","title":"[MRCTF2020]babyRSA","text":"<p>tag: RSA | \u666e\u901a\u4ee3\u7801\u5206\u6790</p> Text Only<pre><code>import sympy\nimport random\nfrom gmpy2 import gcd, invert\nfrom Crypto.Util.number import getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes\nfrom z3 import *\nflag = b\"MRCTF{xxxx}\"\nbase = 65537\n\n\ndef GCD(A):\n    B = 1\n    for i in range(1, len(A)):\n        B = gcd(A[i-1], A[i])\n    return B\n\n\ndef gen_p():\n    P = [0 for i in range(17)]\n    P[0] = getPrime(128)\n    for i in range(1, 17):\n        P[i] = sympy.nextprime(P[i-1])\n    print(\"P_p :\", P[9])\n    n = 1\n    for i in range(17):\n        n *= P[i]\n    p = getPrime(1024)\n    factor = pow(p, base, n)\n    print(\"P_factor :\", factor)\n    return sympy.nextprime(p)\n\n\ndef gen_q():\n    sub_Q = getPrime(1024)\n    Q_1 = getPrime(1024)\n    Q_2 = getPrime(1024)\n    Q = sub_Q ** Q_2 % Q_1\n    print(\"Q_1: \", Q_1)\n    print(\"Q_2: \", Q_2)\n    print(\"sub_Q: \", sub_Q)\n    return sympy.nextprime(Q)\n\n\nif __name__ == \"__main__\":\n    _E = base\n    _P = gen_p()\n    _Q = gen_q()\n    assert (gcd(_E, (_P - 1) * (_Q - 1)) == 1)\n    _M = bytes_to_long(flag)\n    _C = pow(_M, _E, _P * _Q)\n    print(\"Ciphertext = \", _C)\n\n'''\nP_p : 206027926847308612719677572554991143421\nP_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839\nQ_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521\nQ_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743\nsub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651\nCiphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832\n'''\n</code></pre> <p>p\u662f\u8fde\u7eed17\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\uff0c\u5df2\u7ecf\u7ed9\u51fa\u7b2c\u5341\u4e2a\\(p_9\\)\uff0c\u6613\u5f97p\u7684\u503c</p> Text Only<pre><code>from gmpy2 import invert\nfrom Crypto.Util.number import long_to_bytes\nimport sympy\n\nP = [0 for i in range(17)]\nP[9] = 206027926847308612719677572554991143421\nfor i in range( 8 , -1 , -1 ):\n    P[i] = sympy.prevprime(P[i+1])\nfor i in range( 10 , 17 , 1 ):\n    P[i] = sympy.nextprime(P[i-1])\nn = 1\nfor i in range( 17 ):\n    n *= P[i]\nbase = 65537\nfactor = 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839\n\nphi_n = 1\nfor i in range( 17 ):\n    phi_n *= ( P[i] - 1 )\nd = invert( base , phi_n )\np = sympy.nextprime( pow( factor , d , n ) )\n</code></pre> <p>q\u7531\u4e09\u4e2a\u6570\u5f97\u5230\uff0c\u5df2\u7ecf\u7ed9\u51fa\uff0c\u6545\u6613\u6c42\u51fa</p> Text Only<pre><code>Q_1 = 103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521\nQ_2 = 151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743\nsub_Q = 168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651\n\nq = sympy.nextprime( pow( sub_Q , Q_2 , Q_1 ) )\n\nc = 1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832\n\nphi = ( p - 1 ) * ( q - 1 )\nn = p * q\n\ne = base\nd = invert( e , phi )\nm = pow( c , d , n )\n\nprint( long_to_bytes( m ) )\n</code></pre> <p>flag:<code>MRCTF{sti11_@_b@by_qu3st10n}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#mrctf2020easy_rsa","title":"[MRCTF2020]Easy_RSA","text":"<p>tag:RSA | \u5df2\u77e5n\u3001phi\u6c42p\u3001q |  \u5df2\u77e5n\u3001e*d\u6c42phi</p> Text Only<pre><code>import sympy\nfrom gmpy2 import gcd, invert\nfrom random import randint\nfrom Crypto.Util.number import getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes\nimport base64\n\nfrom zlib import *\nflag = b\"MRCTF{XXXX}\"\nbase = 65537\n\ndef gen_prime(N):\n    A = 0\n    while 1:\n        A = getPrime(N)\n        if A % 8 == 5:\n            break\n    return A\n\ndef gen_p():\n    p = getPrime(1024)\n    q = getPrime(1024)\n    assert (p &lt; q)\n    n = p * q\n    print(\"P_n = \", n)\n    F_n = (p - 1) * (q - 1)\n    print(\"P_F_n = \", F_n)\n    factor2 = 2021 * p + 2020 * q\n    if factor2 &lt; 0:\n        factor2 = (-1) * factor2\n    return sympy.nextprime(factor2)\n\n\ndef gen_q():\n    p = getPrime(1024)\n    q = getPrime(1024)\n    assert (p &lt; q)\n    n = p * q\n    print(\"Q_n = \", n)\n    e = getRandomNBitInteger(53)\n    F_n = (p - 1) * (q - 1)\n    while gcd(e, F_n) != 1:\n        e = getRandomNBitInteger(53)\n    d = invert(e, F_n)\n    print(\"Q_E_D = \", e * d)\n    factor2 = 2021 * p - 2020 * q\n    if factor2 &lt; 0:\n        factor2 = (-1) * factor2\n    return sympy.nextprime(factor2)\n\n\nif __name__ == \"__main__\":\n    _E = base\n    _P = gen_p()\n    _Q = gen_q()\n    assert (gcd(_E, (_P - 1) * (_Q - 1)) == 1)\n    _M = bytes_to_long(flag)\n    _C = pow(_M, _E, _P * _Q)\n    print(\"Ciphertext = \", _C)\n'''\nP_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693\nP_F_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740\nQ_n =  20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947\nQ_E_D =  100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201\nCiphertext =  40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021\n'''\n</code></pre> <p>p\u7684\u751f\u6210\u662f\u5df2\u77e5n\u3001phi\u6c42p\u3001q</p> Text Only<pre><code>pp = ( (P_n-P_F_n+1) + int(gmpy2.iroot( pow(P_n-P_F_n+1,2)-4*P_n,2)[0]) ) // 2\npq = ( (P_n-P_F_n+1) - int(gmpy2.iroot( pow(P_n-P_F_n+1,2)-4*P_n,2)[0]) ) // 2\n</code></pre> <p>q\u7684\u751f\u6210\u662f\u5df2\u77e5n\u3001e*d\u6c42phi</p> <p>\\(\\frac{ed-1}{n} \\leq k \\leq \\frac{ed-1}{2n}\\)</p> Text Only<pre><code>k = ( Q_E_D - 1 ) // Q_n + 1\nQ_F_n = ( Q_E_D - 1 ) // k\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801</p> Text Only<pre><code>import gmpy2\nfrom Crypto.Util.number import long_to_bytes\nimport sympy\nimport math\n\nP_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693\nP_F_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740\nQ_n =  20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947\nQ_E_D =  100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201\nCiphertext =  40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021\n\npp = ( (P_n-P_F_n+1) + int(gmpy2.iroot( pow(P_n-P_F_n+1,2)-4*P_n,2)[0]) ) // 2\npq = ( (P_n-P_F_n+1) - int(gmpy2.iroot( pow(P_n-P_F_n+1,2)-4*P_n,2)[0]) ) // 2\n\nk = ( Q_E_D - 1 ) // Q_n + 1\nQ_F_n = ( Q_E_D - 1 ) // k\n\nqp = ( (Q_n-Q_F_n+1) + int(gmpy2.iroot( pow(Q_n-Q_F_n+1,2)-4*Q_n,2)[0]) ) // 2\nqq = ( (Q_n-Q_F_n+1) - int(gmpy2.iroot( pow(Q_n-Q_F_n+1,2)-4*Q_n,2)[0]) ) // 2\n\nif pp &gt; pq:\n    pp , pq = pq , pp\nif qp &gt; qq:\n    qp , qq = qq , qp\n\ne = 65537\np = sympy.nextprime( 2021 * pp + 2020 * pq )\nq = sympy.nextprime( 2021 * qp - 2020 * qq )\n\nc = Ciphertext\nd = gmpy2.invert( e , (p-1)*(q-1) )\nprint( long_to_bytes( pow( c , d , p*q ) ) )\n</code></pre> <p>\u53e6\u4e00\u89e3\u6cd5\uff1a\u4f7f\u7528factordb\u5bf9e*d-1\u8fdb\u884c\u5206\u89e3\uff0c\u5f97\u5230\u6700\u5927\u7684\u4e00\u90e8\u5206\u4f5c\u4e3aphi</p> <p>flag:<code>MRCTF{Ju3t_@_31mp13_que3t10n}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#npuctf2020_1","title":"[NPUCTF2020]\u5171 \u6a21 \u653b \u51fb","text":"<p>tag: \u5171\u819c\u653b\u51fb | </p> Text Only<pre><code>#task.py\nfrom gmpy2 import *\nfrom Crypto.Util.number import *\nfrom secret import flag\n\nflag = flag.strip(b\"npuctf{\").strip(b\"}\")\nm = bytes_to_long(flag)\n\np, q = getPrime(512), getPrime(512)\nn = p * q\ne1, e2 = p, q\nc1, c2 = pow(m, e1, n), pow(m, e2, n)\n\nprint(n)\nprint(c1)\nprint(c2)\n\n'''\n128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149\n96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198\n9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585\n'''\n</code></pre> Text Only<pre><code>#hint.py\nfrom gmpy2 import *\nfrom Crypto.Util.number import *\nfrom secret import hint\n\nm = bytes_to_long(hint)\np = getPrime(256)\nc = pow(m, 256, p)\nprint(p)\n\np, q = getPrime(256), getPrime(256)\nn = p * q\ne1, e2 = getPrime(32), getPrime(32)\nc1, c2 = pow(c, e1, n), pow(c, e2, n)\nprint(n)\nprint(e1, c1)\nprint(e2, c2)\n\n'''\n107316975771284342108362954945096489708900302633734520943905283655283318535709\n6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579\n2303413961 1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723\n2622163991 1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249\n'''\n</code></pre> <p>\u5148\u89e3hint.txt\uff0c\u5178\u578b\u7684\u5171\u819c\u653b\u51fb</p> Text Only<pre><code>from gmpy2 import*\nfrom Crypto.Util.number import*\nfrom sympy import*\n\np = 107316975771284342108362954945096489708900302633734520943905283655283318535709\nn = 6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579\ne1 = 2303413961 ; c1 = 1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723\ne2 = 2622163991 ; c2 = 1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249\n\ns = gcdext( e1 , e2 )#\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\nc = int(powmod( c1 , s[1] , n ) * powmod( c2 , s[2] , n ) % n)\n\nprint( long_to_bytes( nthroot_mod( c , 256 , p ) ) ) #pow\u7684\u9006\u8fd0\u7b97\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u80fd\u8dd1\uff0c\u53cd\u6b63\u786e\u5b9e\u80fd\u8dd1\uff0c\u800c\u4e14\u4e0d\u6162\uff09\n</code></pre> <p>\u5f97\u5230hint:<code>m.bit_length() &lt; 400</code></p> Text Only<pre><code>c1=m^p mod n\nc2=m^q mod n\n==&gt;n=p*q\nc1=m^p mod p \nc2=m^q mod q\n==&gt;\u7531\u8d39\u9a6c\u5c0f\u5b9a\u7406\u53ef\u77e5 a^p=a mod p\nc1=m mod p\nc2=m mod q\n==&gt;c1=m+ip c2=m+jq\nc1*c2=m^2+(ip+jq)*m+ijn\nc1+c2=2^m+ip+jq =&gt;(c1+c2)*m=2*m^2+(ip+j1)*m\n==&gt;m^2-(c1+c2)*m+c1*c2=ijn=0 mod n\n</code></pre> <p>\u4f7f\u7528sage\u89e3\u591a\u9879\u5f0f</p> Text Only<pre><code>#\u5efa\u7acb\u73af\nPR.&lt;m&gt; = PolynomialRing(Zmod(n))\n#\u5b9a\u4e49\u51fd\u6570\nf = m^2-(c1+c2)*m+c1*c2\n#\u51fd\u6570\u6c42\u89e3\nx0 = f.small_roots(X=2^400)\nprint(x0)\n</code></pre> <p>\u6c42m\uff0cm\u4f4d\u6570\u5df2\u77e5\uff0c\u5e76\u4e14c1 = m^p mod n, c2 = m^q mod n</p> <p>\u5219\u4e0a\u9650\u5373\u4e3a\u89e3</p> Text Only<pre><code>from Crypto.Util.number import *\nprint(long_to_bytes(4242839043019782000788118887372132807371568279472499477998758466224002905442227156537788110520335652385855))\n</code></pre> <p>flag:<code>flag{verrrrrrry_345yyyyyyy_rsaaaaaaa_righttttttt?}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#xnuca2018warmup","title":"[XNUCA2018]Warmup","text":"<p>tag:\u5171\u819c\u653b\u51fb | \u6d41\u91cf\u5305\u5206\u6790</p> Text Only<pre><code>from Crypto.Util.number import bytes_to_long, getPrime\nfrom random import randint\nfrom gmpy2 import powmod\nimport sys\n\np = getPrime(1024)\nq = getPrime(1024)\nN = p*q\nPhi = (p-1)*(q-1)\n\nwith open(\"flag\", 'r') as fr:\n    flag = bytes_to_long(fr.read().strip())\n\ndef get_enc_key(BitLen, Phi):\n    e = getPrime(BitLen)\n    if Phi % e == 0:\n        return get_enc_key(BitLen, Phi)\n    else:\n        return e\n\ndef sprint(message):\n    print(message)\n    sys.stdout.flush()\n\ndef communicate():\n    sprint(\"This is a message distribute system.Please tell me your name: \")\n    user = raw_input()\n    bakcdoor(user)\n    e = get_enc_key(randint(13, 13 + (len(user) % 4)), Phi)\n    ct = powmod(flag, e, N)\n    sprint(\"Hi %s, your N is: %d\\nAnd your exponent is: %d\\nLast but not least, your secret is: %d\" % (user, N, e, ct))\n    sprint(\"You will know the secret after I give you P,Q.\\nSee you next time!\")\n\nif __name__ == \"__main__\":\n    communicate()\n</code></pre> <p>\u548c\u4e00\u4e2a\u6d41\u91cf\u5305</p> <p></p> <p>\u627e\u5230\u516d\u4e2a\u6709\u5927\u91cf\u6570\u5b57\u7684\u5305\uff0c\u63d0\u53d6\u4e3b\u8981\u6570\u636e</p> Text Only<pre><code>n=25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263\ne1=7669\nc1=22917655888781915689291442748409371798632133107968171254672911561608350738343707972881819762532175014157796940212073777351362314385074785400758102594348355578275080626269137543136225022579321107199602856290254696227966436244618441350564667872879196269074433751811632437228139470723203848006803856868237706401868436321225656126491701750534688966280578771996021459620472731406728379628286405214996461164892486734170662556518782043881759918394674517409304629842710180023814702447187081112856416034885511215626693534876901484105593275741829434329109239483368867518384522955176807332437540578688867077569728548513876841471\ne2=6947\nc2=20494665879116666159961016125949070097530413770391893858215547229071116025581822729798313796823204861624912909030975450742122802775879194445232064367771036011021366123393917354134849911675307877324103834871288513274457941036453477034798647182106422619504345055259543675752998330786906376830335403339610903547255965127196315113331300512641046933227008101401416026809256813221480604662012101542846479052832128788279031727880750642499329041780372405567816904384164559191879422615238580181357183882111249939492668328771614509476229785062819586796660370798030562805224704497570446844131650030075004901216141893420140140568\n</code></pre> <p>\u53d1\u73b0n\u76f8\u540c</p> <p>\u2014\u2014\u5171\u819c\u653b\u51fb\uff01</p> Text Only<pre><code>from gmpy2 import*\nfrom Crypto.Util.number import*\nfrom sympy import*\n\ns = gcdext( e1 , e2 )#\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\nc = int(powmod( c1 , s[1] , n ) * powmod( c2 , s[2] , n ) % n)\n\nprint( long_to_bytes( c ) ) #pow\u7684\u9006\u8fd0\u7b97\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u80fd\u8dd1\uff0c\u53cd\u6b63\u786e\u5b9e\u80fd\u8dd1\uff0c\u800c\u4e14\u4e0d\u6162\uff09\n</code></pre> <p>flag\u560e\u5623\u4e00\u4e0b\u5b50\u5c31\u51fa\u6765\u4e86</p> <p>flag:<code>FLAG{g00d_Luck_&amp;_Hav3_Fun}</code></p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#afctf2018","title":"[#AFCTF2018]\u82b1\u5f00\u85cf\u5b9d\u5730","text":"<p>tag:</p> <p></p> Text Only<pre><code>\u7b2c80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857\u53f7\u85cf\u5b9d\u56fe\n\n\u6211\u628a\u6211\u7684\u5b9d\u85cf\u90fd\u85cf\u5728\u4e86\u90a3\u91cc\uff01\n\u90a3\u4e2a\u795e\u79d8\u7684\u5730\u65b9\uff01\n\u4e8e\u662f\u6211\u628a\u85cf\u5b9d\u56fe\u5206\u6210\u4e865\u4efd\uff0c\u4ea4\u7ed9\u4e94\u4f4d\u8d24\u8005\u8ba9\u4ed6\u4eec\u5e2e\u6211\u59a5\u5584\u4fdd\u7ba1\uff0c\u5e76\u4e14\u53ea\u8981\u641c\u96c63\u4efd\u5c31\u53ef\u4ee5\u83b7\u5f97\u5b9d\u85cf\u7684\u5730\u5740\u3002\n\n\u7b2c\u4e00\u4f4d\u8d24\u8005\u5c06\u85cf\u5b9d\u56fe\u653e\u8fdb\u65f6\u7a7a\u95e8\u4e2d\u8bf4\u9053\uff1a\n\u201c\u90a3\u4e48\u53e3\u4ee4\u5c31\u662f\u6211\u7684\u751f\u65e5\u5427\uff0c\u90a3\u53ef\u662f\u4e2a\u597d\u6570\u5b57\u5462\u3002\u201d\n\n\u7b2c\u4e8c\u4f4d\u8d24\u8005\u5c06\u85cf\u5b9d\u56fe\u653e\u8fdb\u5b9d\u7bb1\uff0c\u3010\u5c0f\u3011\u58f0\u5ff5\u7740\u81ea\u5df1\u7684\u540d\u5b57\u9501\u4e0a\u4e86\u5b9d\u7bb1\u3002\n\n\u7b2c\u4e09\u4f4d\u8d24\u8005\u5c06\u85cf\u5b9d\u56fe\u65bd\u4e0a\u5492\u8bed\u4e22\u8fdb\u5927\u6d77\uff1a\u201c\u53ea\u8981\u3010\u5927\u3011\u58f0\u558a\u51fa\u90a3\u53e5\u5492\u8bed\u5c31\u53ef\u4ee5\u628a\u6c34\u9a71\u9010\uff01\u201d\n\n\u7b2c\u56db\u4f4d\u8d24\u8005\u627e\u4e86\u4e2a\u7834\u9501\u9501\u4e0a\u4e86\u5b9d\u7bb1\uff0c\u72e1\u9ee0\u5730\u7b11\u7740\uff1a\u201c\u8c01\u77e5\u9053\u5b83\u662f\u574f\u7684\u5462\uff1f\u201d\n\n\u7b2c\u4e94\u4f4d\u8d24\u8005\u7ed9\u85cf\u5b9d\u56fe\u88f9\u4e0a\u4e86\u9690\u8eab\u8863\uff0c\u653e\u5165\u4e86\u4e00\u4e2a\u5323\u5b50\u91cc\n\n\u636e\u8bf4\uff0c\u53ea\u6709\u62e5\u6709\u3010\u667a\u6167\u3011\u4e0e\u3010\u529b\u91cf\u3011\u5c31\u53ef\u4ee5\u83b7\u5f97\u5b9d\u85cf\u4e86\u5462\uff01~\n\u4f60\u662f\u8fd9\u6837\u7684\u52c7\u8005\u5417\uff1f\n</code></pre> <p>\u9664\u4e86\u7b2c\u4e94\u4e2a\u538b\u7f29\u5305\uff0c\u5269\u4e0b\u56db\u4e2a\u538b\u7f29\u5305\u88ab\u52a0\u5bc6\u4e86</p> <p>\u70b9\u5f00txt\uff0c\u53d1\u73b0\u6709\u4e00\u4e32\u5f88\u5947\u602a\u7684\u6570\u5b57</p> <p>\u8fd9\u662f\u4ec0\u4e48\uff0c\u597d\u5947\u602a\uff0c\u8f6c\u4e00\u4e0b</p> Text Only<pre><code>from sympy import*\n\ntxt = 80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857\n\nprint( long_to_bytes( txt ) )\n</code></pre> <p>\u5f97\u5230\u4e00\u4e2a\u50cf\u662fflag\u7684\u4e1c\u897f</p> Text Only<pre><code>b\"A treasure map is a map that marks the location of buried treasure, a lost mine, a valuable secret or a hidden locale.So flag is afctf{1sn't_s0_int3Resting}\\x99\"\n</code></pre> <p>\u4ea4\u4e00\u4e0b\uff1f\u5bf9\u4e86\uff1f\uff1f\uff1f</p> <p>\u90a3\u538b\u7f29\u5305\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7</p>"},{"location":"04-CRYPTO/03-%E5%85%B8%E5%9E%8B%E9%A2%98%E7%9B%AE/03-RSA.html#rsa-what_1","title":"RSA &amp; what","text":"Text Only<pre><code>from Crypto.Util.number import bytes_to_long, getPrime\nfrom random import randint\nfrom gmpy2 import powmod\n\np = getPrime(2048)\nq = getPrime(2048)\nN = p*q\nPhi = (p-1)*(q-1)\ndef get_enc_key(N,Phi):\n    e = getPrime(N)\n    if Phi % e == 0:\n        return get_enc_key(N, Phi)\n    else:\n        return e\ne1 = get_enc_key(randint(10, 12), Phi)\ne2 = get_enc_key(randint(10, 12), Phi)\n\nfr = open(r\"./base64\", \"rb\")#flag is in this file\nf1 = open(r\"./HUB1\", \"wb\")\nf2 = open(r\"./HUB2\", \"wb\")\nbase64 = fr.read(255)\nf1.write(\"%d\\n%d\\n\" % (N, e1))\nf2.write(\"%d\\n%d\\n\" % (N, e2))\nwhile len(base64)&gt;0:\n    pt = bytes_to_long(base64)\n    ct1 = powmod(pt, e1, N)\n    ct2 = powmod(pt, e2, N)\n    f1.write(\"\\n%d\" % ct1)\n    f2.write(\"\\n%d\" % ct2)\n    base64 = fr.read(255)\nfr.close()\nf1.close()\nf2.close()\n</code></pre> <p>\u5171\u819c\u653b\u51fb</p> Text Only<pre><code>from Crypto.Util.number import *\nimport base64\n\ndef exgcd( a , b ):\n    if a == 0:\n        return ( b , 0 , 1 )\n    else:\n        g , y , x = exgcd( b % a , a )  \n        return ( g , x - (b//a)*y , y )\n\ndef CMA( n , e1 , e2 , c1 , c2 ):\n    temp , s1 , s2 = exgcd( e1 , e2 )\n    if s1 &lt; 0:\n        s1 = -s1\n        c1 = inverse( c1 , n )\n    elif s2 &lt; 0:\n        s2 = -s2\n        c2 = inverse( c2 , n )\n    m = pow( c1 , s1 , n ) * pow( c2 , s2 , n ) % n\n    return m\n\nf1 = open(\"HUB1\") ; f2 = open(\"HUB2\")\n\nN , N = f1.readline() , f2.readline()\ne1,e2 = f1.readline() , f2.readline()\nf1.readline() ; f2.readline()\nc1,c2 = f1.readline() , f2.readline()\n\nans = b''\ncnt = 0\nwhile( len(c1) ):\n    cnt += 1\n    ans += long_to_bytes( CMA(int(N),int(e1),int(e2),int(c1),int(c2)) )\n    c1 , c2 = f1.readline() , f2.readline()\ntemp = b''\nM = b''\nprint( ans )\nfor i in ans:\n    k = long_to_bytes(i)\n    if k == b'\\n':\n        M += base64.b64decode( temp )\n        temp = b''\n        continue\n    temp += k\nprint( M )\n</code></pre> <p>\u5f97\u5230\u5bc6\u6587</p> Text Only<pre><code>THISFLAGISHIDDEN.CANYOUFINDITOUT?DOYOUKNOWBASE64?YoungCTHINKYOUARENOTTHATFAMILIARWITHBASE64.Base64isagroupofsimilarbinary-to-textencodingschemesthatrepresentbinarydatainanASCIIstringformatbytranslatingitintoaradix-64representation.ThetermBase64originatesfromaspecificMIMEcontenttransferencoding.Theparticularsetof64characterschosentorepresentthe64place-valuesforthebasevariesbetweenimplementations.Thegeneralstrategyistochoose64charactersthatarebothmembersofasubsetcommontomostencodings,andalsoprintable.Thiscombinationleavesthedataunlikelytobemodifiedintransitthroughinformationsystems,suchasE-mail,thatweretraditionallynot8-bitclean.[1]Forexample,MIME'sBase64implementationusesA\\xa8CZ,a\\xa8Cz,and0\\xa8C9forthefirst62values.Othervariationssharethispropertybutdifferinthesymbolschosenforthelasttwovalues;anexampleis\n</code></pre> <p>\u8fdb\u884cbase64\u9690\u5199\u89e3\u5bc6\u5f97\u5230</p> <p>flag:<code>flag{7c86d8f7d6de33a87f7f9d6b005ce640}</code></p>"},{"location":"05-RE/index.html","title":"REVERSE-\u9006\u5411","text":"Text Only<pre><code>\u5efa\u8bbe\u4e2d\n</code></pre>"},{"location":"06-PWN/index.html","title":"PWN","text":""},{"location":"06-PWN/index.html#_1","title":"\u4ecb\u7ecd","text":"<p>Pwn\uff08\u53d1\u97f3\u540c\u201c\u7830\u201d\uff09\u662f\u9ed1\u5ba2\u672f\u8bed\uff0c\u6307\u901a\u8fc7\u6f0f\u6d1e\u653b\u7834\u7cfb\u7edf\u6216\u7a0b\u5e8f\uff0c\u83b7\u5f97\u63a7\u5236\u6743\u3002 CTF\u7ade\u8d5b\u4e2d\uff0c\u4e00\u822c\u662f\u7834\u89e3\u4f4d\u4e8eLinux\u7cfb\u7edf\u4e2d\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff08ELF\u6587\u4ef6\uff09\u3002</p>"},{"location":"06-PWN/index.html#_2","title":"\u5b66\u4e60\u8def\u7ebf","text":"<p>\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u8def\u7ebf\u8fdb\u884c\u5b66\u4e60\uff1a 1. \u638c\u63e1C\u8bed\u8a00 2. \u7b80\u5355\u5b66\u4e60ELF\u7684\u5404\u4e2a\u6bb5\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u7684\u5806\u6808\u5e73\u8861\u8fc7\u7a0b\u548c\u5404\u79cd\u8c03\u7528\u7ea6\u5b9a\uff0cgot\u8868plt\u8868\uff0c\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236 3. \u8c03\u8bd5\u5de5\u5177pwndbg\u3001IDA 4. \u6808\u6f0f\u6d1e 5. \u5806\u6f0f\u6d1e</p>"},{"location":"07-%E6%B8%97%E9%80%8F/index.html","title":"PENETRATION-\u6e17\u900f","text":"<p>\u6e17\u900f\u6d4b\u8bd5\uff08Penetration Testing\uff09\uff0c\u7b80\u79f0\u201c\u6e17\u900f\u201d\uff0c\u662f\u4e00\u79cd\u6a21\u62df\u9ed1\u5ba2\u653b\u51fb\u7684\u7f51\u7edc\u5b89\u5168\u6280\u672f\uff0c\u76ee\u7684\u662f\u5728\u4e0d\u9020\u6210\u5b9e\u9645\u7834\u574f\u7684\u524d\u63d0\u4e0b\uff0c\u6d4b\u8bd5\u7cfb\u7edf\u3001\u7f51\u7edc\u6216\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u3002\u901a\u8fc7\u53d1\u73b0\u548c\u5229\u7528\u7cfb\u7edf\u4e2d\u7684\u6f0f\u6d1e\uff0c\u6e17\u900f\u6d4b\u8bd5\u5e2e\u52a9\u4f01\u4e1a\u6216\u7ec4\u7ec7\u8bc6\u522b\u6f5c\u5728\u98ce\u9669\uff0c\u4ece\u800c\u63d0\u524d\u4fee\u8865\u6f0f\u6d1e\uff0c\u63d0\u5347\u6574\u4f53\u9632\u62a4\u80fd\u529b\u3002\u6e17\u900f\u6d4b\u8bd5\u5e38\u6d89\u53ca\u4fe1\u606f\u6536\u96c6\u3001\u6f0f\u6d1e\u5206\u6790\u3001\u5229\u7528\u3001\u6743\u9650\u63d0\u5347\u4e0e\u6a2a\u5411\u79fb\u52a8\u7b49\u591a\u4e2a\u9636\u6bb5\u3002</p> <p>\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u8bf7\u5148\u9605\u8bfb <code>\u9776\u573a-tryhackme</code> \u76ee\u5f55\u4e0b\u7684 <code>\u8def\u5f84\u9009\u62e9</code> \u90e8\u5206\uff0c\u7a0d\u4f5c\u5b66\u4e60\u540e\u518d\u8fdb\u884c\u5176\u4ed6\u76ee\u5f55\u4e0b\u7684\u5b66\u4e60</p>"},{"location":"07-%E6%B8%97%E9%80%8F/C2%E5%B7%A5%E5%85%B7/index.html","title":"C2\u5de5\u5177","text":""},{"location":"07-%E6%B8%97%E9%80%8F/C2%E5%B7%A5%E5%85%B7/index.html#_1","title":"\u63a8\u8350\u6559\u7a0b","text":"<p>https://wbglil.gitbook.io/cobalt-strike</p> <p>https://raven-medicine.com/books/ec8ce/chapter/2c2</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E6%9C%A8%E9%A9%AC%E5%85%8D%E6%9D%80/index.html","title":"\u6728\u9a6c\u514d\u6740","text":"<p>\u6728\u9a6c\u514d\u6740\u662f C2 \u4e0a\u7ebf\u7684\u5173\u952e</p> <p>\u6307\u901a\u8fc7\u6280\u672f\u624b\u6bb5\u7ed5\u8fc7\u6740\u6bd2\u8f6f\u4ef6\u3001EDR\uff08\u7ec8\u7aef\u68c0\u6d4b\u4e0e\u54cd\u5e94\uff09\u7b49\u5b89\u5168\u9632\u62a4\u673a\u5236\uff0c\u4f7f\u6076\u610f\u7a0b\u5e8f\uff08\u901a\u5e38\u662f\u6728\u9a6c\u3001\u53cd\u5f39Shell\u6216C2\u8f7d\u8377\uff09\u5728\u76ee\u6807\u7cfb\u7edf\u4e2d\u80fd\u591f\u6084\u65e0\u58f0\u606f\u5730\u6267\u884c\u3002</p> <p>\u5e38\u89c1\u65b9\u6cd5\u5305\u62ec\u6df7\u6dc6\u4ee3\u7801\u3001\u52a0\u58f3\u3001\u52a0\u5bc6\u8f7d\u8377\u3001\u5229\u7528\u767d\u540d\u5355\u7a0b\u5e8f\u8fdb\u884c\u8fdb\u7a0b\u6ce8\u5165\u7b49\u3002\u514d\u6740\u5e76\u4e0d\u4ee3\u8868\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u6076\u610f\u884c\u4e3a\uff0c\u800c\u662f\u5b83\u80fd\u591f\u907f\u5f00\u4f20\u7edf\u7279\u5f81\u5e93\u6216\u884c\u4e3a\u76d1\u6d4b\u7684\u68c0\u6d4b\u673a\u5236\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E7%A4%BE%E5%B7%A5%E9%92%93%E9%B1%BC/index.html","title":"\u793e\u5de5\u9493\u9c7c","text":"<p>\u793e\u5de5\u9493\u9c7c\uff08Social Engineering Phishing\uff09\u662f\u4e00\u79cd\u901a\u8fc7\u4f2a\u88c5\u6210\u53ef\u4fe1\u5bf9\u8c61\u8bf1\u4f7f\u76ee\u6807\u6cc4\u9732\u654f\u611f\u4fe1\u606f\u6216\u6267\u884c\u6076\u610f\u64cd\u4f5c\u7684\u653b\u51fb\u624b\u6bb5\u3002</p> <p>\u5e38\u89c1\u5f62\u5f0f\u5305\u62ec\u4f2a\u9020\u7684\u767b\u5f55\u9875\u9762\u3001\u9493\u9c7c\u90ae\u4ef6\u3001\u5047\u5192\u7684\u5373\u65f6\u6d88\u606f\u3001\u6076\u610f\u6587\u6863\u7b49\u3002</p> <p>\u5728\u6e17\u900f\u6d4b\u8bd5\u4e2d\uff0c\u9493\u9c7c\u653b\u51fb\u53ef\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u7ec4\u7ec7\u5185\u90e8\u5458\u5de5\u7684\u5b89\u5168\u610f\u8bc6\u53ca\u90ae\u4ef6\u7f51\u5173\u7684\u8fc7\u6ee4\u80fd\u529b\u3002\u867d\u7136\u6280\u672f\u95e8\u69db\u8f83\u4f4e\uff0c\u4f46\u4f9d\u8d56\u5bf9\u4eba\u6027\u7684\u7406\u89e3\u4e0e\u60c5\u5883\u8bbe\u8ba1\uff0c\u662f\u793e\u4f1a\u5de5\u7a0b\u4e2d\u7684\u6838\u5fc3\u6280\u5de7\u4e4b\u4e00\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E7%A4%BE%E5%B7%A5%E9%92%93%E9%B1%BC/%E9%92%93%E9%B1%BCwifi/index.html","title":"\u9493\u9c7cwifi","text":"<p>\u9493\u9c7c WiFi \u662f\u4e00\u79cd\u901a\u8fc7\u4f2a\u9020\u65e0\u7ebf\u63a5\u5165\u70b9\uff08\u70ed\u70b9\uff09\u6765\u8bf1\u5bfc\u53d7\u5bb3\u8005\u8fde\u63a5\u7684\u793e\u5de5\u653b\u51fb\u624b\u6bb5\u3002</p> <p>\u653b\u51fb\u8005\u901a\u5e38\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u4e0e\u771f\u5b9e\u7f51\u7edc\u540d\u79f0\u76f8\u540c\u6216\u76f8\u4f3c\u7684WiFi\u70ed\u70b9\uff08\u5982\u201c\u6821\u56edWIFI-Free\u201d\uff09\uff0c\u4e00\u65e6\u76ee\u6807\u7528\u6237\u8fde\u63a5\uff0c\u5c31\u53ef\u80fd\u88ab\u5f15\u5bfc\u5230\u9493\u9c7c\u767b\u5f55\u9875\u7a83\u53d6\u8d26\u6237\u5bc6\u7801\uff0c\u6216\u76f4\u63a5\u52ab\u6301\u6d41\u91cf\u8fdb\u884c\u4e2d\u95f4\u4eba\u653b\u51fb\uff08MitM\uff09\u3002</p> <p>\u8fd9\u79cd\u653b\u51fb\u65e0\u9700\u9ad8\u590d\u6742\u5ea6\u6280\u672f\uff0c\u4f46\u4f9d\u8d56\u4f4d\u7f6e\u63a5\u8fd1\u548c\u7528\u6237\u5bf9\u7f51\u7edc\u7684\u4fe1\u4efb\u3002\u5e38\u7528\u4e8e\u6d4b\u8bd5\u516c\u5171\u73af\u5883\u4e0b\u7684\u5b89\u5168\u9632\u8303\u610f\u8bc6\u548c\u7ec8\u7aef\u8bbe\u5907\u7684\u6570\u636e\u4f20\u8f93\u5b89\u5168\u6027\u3002</p> <p>\u5177\u4f53\u5185\u5bb9\u89c1\u4ee5\u4e0b\u6587\u7ae0\uff1a</p> <p>noone\u7684\u8fd1\u6e90\u6e17\u900f\u7b14\u8bb0-\u9493\u9c7cwifi\u521d\u8bc6</p> <p>noone\u7684\u8fd1\u6e90\u6e17\u900f\u7b14\u8bb0-\u9493\u9c7cwifi\u8fdb\u9636</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9A%A7%E9%81%93/index.html","title":"\u96a7\u9053","text":""},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/index.html","title":"\u9776\u573a","text":"<p>\u5728\u6e17\u900f\u6d4b\u8bd5\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c<code>\u9776\u573a</code> \u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5b9e\u8df5\u73af\u5883\u3002\u5176\u901a\u5e38\u6307\u7684\u662f\u4e3a\u8bad\u7ec3\u6216\u6d4b\u8bd5\u6e17\u900f\u6280\u672f\u800c\u642d\u5efa\u7684\u4e00\u4e2a\u6216\u4e00\u7ec4\u5177\u6709\u5df2\u77e5\u6f0f\u6d1e\u7684\u7cfb\u7edf\u73af\u5883\u3002\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u673a\uff08\u5982DVWA\u3001Metasploitable\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7f51\u7edc\u67b6\u6784\uff08\u5982VulnHub\u3001Tryhackme\u3001Hack The Box\u7b49\uff09\uff0c\u6a21\u62df\u771f\u5b9e\u7f51\u7edc\u4e2d\u7684\u670d\u52a1\u5668\u3001\u670d\u52a1\u548c\u9632\u5fa1\u673a\u5236\u3002</p> <p>\u9776\u573a\u7684\u6700\u5927\u4f18\u52bf\u5728\u4e8e\u5b89\u5168\u3001\u53ef\u63a7\u3002\u521d\u5b66\u8005\u53ef\u4ee5\u5728\u4e0d\u8fdd\u6cd5\u3001\u65e0\u98ce\u9669\u7684\u524d\u63d0\u4e0b\uff0c\u53cd\u590d\u7ec3\u4e60\u4fe1\u606f\u6536\u96c6\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6743\u9650\u63d0\u5347\u7b49\u6838\u5fc3\u6280\u80fd\u3002\u8bb8\u591a\u9776\u573a\u8fd8\u63d0\u4f9b\u4e0d\u540c\u96be\u5ea6\u7b49\u7ea7\u3001\u9898\u76ee\u7c7b\u578b\u548c\u6311\u6218\u76ee\u6807\uff0c\u9002\u5408\u4ece\u96f6\u57fa\u7840\u5230\u8fdb\u9636\u9636\u6bb5\u7684\u5b66\u4e60\u9700\u6c42\u3002</p> <p>\u5728\u771f\u6b63\u8fdb\u5165\u590d\u6742\u73af\u5883\u524d\uff0c\u9776\u573a\u662f\u953b\u70bc\u6280\u672f\u3001\u79ef\u7d2f\u7ecf\u9a8c\u7684\u6700\u4f73\u5e73\u53f0\u3002\u901a\u8fc7\u52a8\u624b\u5b9e\u64cd\uff0c\u80fd\u591f\u5e2e\u52a9\u7406\u89e3\u6e17\u900f\u6d4b\u8bd5\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u4e5f\u80fd\u5efa\u7acb\u8d77\u89e3\u51b3\u95ee\u9898\u7684\u903b\u8f91\u548c\u601d\u7ef4\u65b9\u5f0f\u3002\u5bf9\u4e8e\u521a\u5165\u95e8\u7684\u540c\u5b66\uff0c\u5efa\u8bae\u4ece\u4e00\u4e9b\u56fe\u5f62\u5316\u754c\u9762\u3001\u63d0\u793a\u4e30\u5bcc\u7684\u5165\u95e8\u9776\u573a\u5f00\u59cb\uff0c\u9010\u6b65\u8fc7\u6e21\u5230\u5177\u5907\u6311\u6218\u6027\u7684\u5f00\u653e\u5f0f\u73af\u5883\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html","title":"TryHackMe","text":"<p>\u4e00\u4e2a\u5f88\u597d\u7528\u7684\u5b66\u6e17\u900f\u7f51\u7ad9</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#_1","title":"\u7b80\u4ecb","text":"<p><code>TryHackMe</code> \u662f\u4e00\u4e2a\u9762\u5411\u7f51\u7edc\u5b89\u5168\u5b66\u4e60\u8005\u7684\u5728\u7ebf\u9776\u573a\u5e73\u53f0\uff0c\u4ee5\u4efb\u52a1\u5bfc\u5411\u3001\u7ed3\u6784\u6e05\u6670\u8457\u79f0\u3002\u5b83\u901a\u8fc7\u5c06\u590d\u6742\u7684\u6e17\u900f\u6d4b\u8bd5\u77e5\u8bc6\u62c6\u89e3\u4e3a\u4e00\u4e2a\u4e2a\u53ef\u4ea4\u4e92\u7684\u5b66\u4e60\u6a21\u5757\uff0c\u8ba9\u521d\u5b66\u8005\u53ef\u4ee5\u5faa\u5e8f\u6e10\u8fdb\u5730\u638c\u63e1\u6280\u80fd\u3002\u6bcf\u4e2a\u6a21\u5757\u901a\u5e38\u5305\u542b\u6559\u7a0b\u3001\u5728\u7ebf\u5b9e\u9a8c\u73af\u5883\u548c\u7b54\u9898\u6311\u6218\uff0c\u7528\u6237\u65e0\u9700\u81ea\u884c\u642d\u5efa\u9776\u673a\uff0c\u53ea\u9700\u901a\u8fc7\u6d4f\u89c8\u5668\u6216VPN\u8fde\u63a5\u5e73\u53f0\u63d0\u4f9b\u7684\u865a\u62df\u73af\u5883\uff0c\u5373\u53ef\u5f00\u59cb\u7ec3\u4e60\u3002</p> <p><code>TryHackMe</code> \u6db5\u76d6\u7684\u5185\u5bb9\u975e\u5e38\u5e7f\u6cdb\uff0c\u4ece\u57fa\u7840\u7684Linux\u547d\u4ee4\u3001\u7f51\u7edc\u534f\u8bae\u3001\u5b89\u5168\u5de5\u5177\uff08\u5982Nmap\u3001Burp Suite\uff09\u5230\u8fdb\u9636\u7684\u6f0f\u6d1e\u5229\u7528\u3001Web\u6e17\u900f\u3001\u7ea2\u961f\u84dd\u961f\u5bf9\u6297\u7b49\u4e00\u5e94\u4ff1\u5168\u3002</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#vip","title":"\u5173\u4e8eVIP","text":"<p>\u7edd\u5927\u591a\u6570\u7684\u60c5\u51b5\u4e0b\uff0cVIP\u7684\u597d\u5904\u5728\u4e8e\u53ef\u4ee5\u65e0\u9650\u65f6\u957f\u7684\u4f7f\u7528\u5728\u7ebf\u7684 <code>attackbox</code>\uff0c\u907f\u514d\u4e86\u7531\u4e8e\u798f\u5dde\u7f51\u7edc\u95ee\u9898\u5bfc\u81f4VPN\u96be\u4ee5\u94fe\u63a5\u7684\u95ee\u9898</p> <p>\u5c11\u90e8\u5206\u7684\u9776\u573a\uff0c\u6bd4\u5982\u5185\u7f51\u90e8\u5206\uff0c\u4f1a\u9700\u8981VIP</p> <p>\u53bb\u54b8\u9c7c\u8d2d\u4e70\u6bd4\u5b98\u7f51\u5212\u7b97\u5f88\u591a</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#_2","title":"\u8def\u5f84\u9009\u62e9","text":"<p>\u53c2\u8003sugobet\u7684CSDN\u535a\u5ba2</p> <p></p> <p>\u5bf9\u4e8e\u96f6\u57fa\u7840\uff0c\u53ef\u4ee5\u5148\u5b8c\u6210 1\u30014\u30012\u30013\uff0c\u7136\u540e\u518d\u6709\u987a\u5e8f\u7684\u5b66\u4e605\u30016\u30017</p> <p>\u5426\u5219\u53ef\u4ee5\u76f4\u63a5\u4ece5\u30016\u30017\u6709\u987a\u5e8f\u7684\u5f00\u59cb\u5b66\u4e60</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/tryhackme/index.html#rooms","title":"<code>Rooms</code>","text":"<p>\u53ef\u4ee5\u53c2\u8003noone\u7684\u535a\u5ba2</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/vulnhub/index.html","title":"Vulnhub","text":"<p><code>VulnHub</code> \u662f\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u6f0f\u6d1e\u9776\u673a\u548c\u6e17\u900f\u5b9e\u6218\u8bad\u7ec3\u7684\u5f00\u6e90\u5e73\u53f0\uff0c\u63d0\u4f9b\u5927\u91cf\u53ef\u4e0b\u8f7d\u7684\u865a\u62df\u673a\u955c\u50cf\uff0c\u6bcf\u4e2a\u955c\u50cf\u90fd\u8bbe\u8ba1\u6709\u7279\u5b9a\u7684\u6f0f\u6d1e\u6311\u6218\uff0c\u6a21\u62df\u771f\u5b9e\u7cfb\u7edf\u4e2d\u7684\u5b89\u5168\u95ee\u9898\u3002\u7528\u6237\u53ef\u4ee5\u5728\u672c\u5730\u642d\u5efa\u8fd9\u4e9b\u9776\u673a\u73af\u5883</p>"},{"location":"07-%E6%B8%97%E9%80%8F/%E9%9D%B6%E5%9C%BA/vulnhub/index.html#rooms","title":"<code>Rooms</code>","text":"<p>\u53ef\u4ee5\u53c2\u8003noone\u7684\u535a\u5ba2</p>"},{"location":"08-SRC/index.html","title":"SRC","text":""},{"location":"08-SRC/index.html#src_1","title":"\u4ec0\u4e48\u662f SRC","text":"<p>SRC\uff08Security Response Center\uff0c\u5b89\u5168\u54cd\u5e94\u4e2d\u5fc3\uff09\u662f\u5404\u5927\u4f01\u4e1a\u6216\u5e73\u53f0\u8bbe\u7acb\u7684\u6f0f\u6d1e\u63a5\u6536\u4e0e\u5904\u7406\u673a\u5236\uff0c\u65e8\u5728\u9f13\u52b1\u5b89\u5168\u7814\u7a76\u4eba\u5458\u5728\u5408\u6cd5\u5408\u89c4\u8303\u56f4\u5185\u6316\u6398\u5e76\u4e0a\u62a5\u4ea7\u54c1\u6216\u670d\u52a1\u4e2d\u7684\u5b89\u5168\u6f0f\u6d1e\u3002</p> <p>\u5728\u6821\u56ed\u6216\u4e2a\u4eba\u5c42\u9762\uff0c\u53c2\u4e0e SRC \u901a\u5e38\u6307\u7684\u662f\u5bf9\u5404\u7c7b\u516c\u5f00\u7f51\u7ad9\u8fdb\u884c\u6e17\u900f\u6d4b\u8bd5\uff0c\u6316\u6398\u5b9e\u9645\u6f0f\u6d1e\uff0c\u5e76\u901a\u8fc7\u5382\u5546\u5b98\u65b9\u901a\u9053\u8d1f\u8d23\u4efb\u5730\u63d0\u4ea4\uff0c\u83b7\u5f97\u8ba4\u53ef\u3001\u5956\u52b1\u6216\u79ef\u5206\u3002</p> <p>\u5e38\u89c1\u7684\u5e73\u53f0\u6709</p> <p>\u8865\u5929</p> <p>\u6f0f\u6d1e\u76d2\u5b50</p> <p>edusrc</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/index.html","title":"\u8fd0\u7ef4","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/00-NISA%20%E7%BD%91%E7%BB%9C%E8%B5%84%E4%BA%A7%E7%BB%B4%E6%8A%A4%E6%8C%87%E5%8D%97/index.html","title":"NISA \u7f51\u7edc\u8d44\u4ea7\u7ef4\u62a4\u6307\u5357","text":"<p>\u5c06\u76ee\u524d\u534f\u4f1a\u5185\u7684\u7f51\u7edc\u8d44\u4ea7\u60c5\u51b5\u90e8\u7f72\u60c5\u51b5\u4ee5\u53ca\u7ef4\u62a4\u65b9\u5f0f\u6c47\u603b, \u65b9\u4fbf\u540e\u7eed\u4ea4\u63a5(\u6ce8\u610f\u654f\u611f\u4fe1\u606f\u8bef\u4e0a\u4f20)</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/00-NISA%20%E7%BD%91%E7%BB%9C%E8%B5%84%E4%BA%A7%E7%BB%B4%E6%8A%A4%E6%8C%87%E5%8D%97/00-%E5%AE%98%E7%BD%91/index.html","title":"\u5b98\u7f51","text":"<p>\u6e90\u7801\u548c\u7f51\u9875\u5747\u6258\u7ba1\u4e8e Github \u4e0a, \u4ed3\u5e93\u4e3a FJNU-NISA/NISA-HomePage, \u5e76\u4e14\u4f7f\u7528 www.fjnusec.cn \u53ef\u4ee5\u8bbf\u95ee, \u4f46\u672a\u5bf9\u56fd\u5185\u8bbf\u95ee\u8fdb\u884c\u4f18\u5316</p>"},{"location":"09-%E8%BF%90%E7%BB%B4/00-NISA%20%E7%BD%91%E7%BB%9C%E8%B5%84%E4%BA%A7%E7%BB%B4%E6%8A%A4%E6%8C%87%E5%8D%97/01-Wiki/index.html","title":"Wiki","text":"<p>\u6e90\u7801\u548c\u7f51\u9875\u5747\u6258\u7ba1\u4e8e Github \u4e0a, \u4ed3\u5e93\u4e3a FJNU-NISA/NISA-Wiki, \u5e76\u4e14\u4f7f\u7528 wiki.fjnusec.cn \u53ef\u4ee5\u8bbf\u95ee, \u4f46\u672a\u5bf9\u56fd\u5185\u8bbf\u95ee\u8fdb\u884c\u4f18\u5316</p>"},{"location":"10-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/index.html","title":"INCIDENT RESPONSE-\u5e94\u6025\u54cd\u5e94","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"11-IOT/index.html","title":"IOT-\u7269\u8054\u7f51","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"11-IOT/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE/BLE%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99.html","title":"BLE\u4f4e\u529f\u8017\u84dd\u7259","text":"<p>\u53c2\u8003: http://doc.iotxx.com/BLE%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98</p>"},{"location":"12-FORENSIC/index.html","title":"FORENSIC-\u7535\u5b50\u53d6\u8bc1","text":"<p>\u5efa\u8bbe\u4e2d</p>"},{"location":"13-%E5%8C%BA%E5%9D%97%E9%93%BE/index.html","title":"BLOCKCHAIN-\u533a\u5757\u94fe\u5b89\u5168","text":"<p>\u5efa\u8bbe\u4e2d</p>"}]}